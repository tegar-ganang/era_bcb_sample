package DE.FhG.IGD.util;

import codec.*;
import java.io.*;
import java.util.*;
import java.security.*;

/**
 * Generates or updates Manifest sections with message digests.
 *
 * @author Volker Roth
 * @version "$Id: ManifestDigester.java 117 2000-12-06 17:47:39Z vroth $"
 */
public class ManifestDigester extends Object {

    /**
     * The <code>Manifest</code> that keeps the attributes
     * generated by this instance.
     */
    protected Manifest mf_;

    /**
     * The {@link Digester Digerster} that is used to
     * compute multiple digests in parallel.
     */
    private Digester digester_;

    /**
     * The <code>Map</code> of digests computed on a
     * given entry.
     */
    private Map digests_;

    /**
     * Creates an instance. Manifest attributes generated
     * by the digesting methods are added to the given
     * <code>Manifest</code>. The threshold, the trusted
     * digest algorithms, and the digest algorithms to be
     * used are taken from the given <code>Manifest</code>.
     *
     * @param mf The <code>Manifest</code> to which any
     *   generated Manifest entries are added.
     * @exception NoSuchAlgorithmException if none of the
     *   trusted algorithms defined in the <code>Manifest
     *   </code> is installed locally.
     * @exception IllegalArgumentException if the threshold
     *   specified in the <code>Manifest</code> exceeds the
     *   number of installed trusted algorithms.
     */
    public ManifestDigester(Manifest mf) throws NoSuchAlgorithmException {
        if (mf == null) {
            throw new NullPointerException("Manifest");
        }
        mf_ = mf;
        digests_ = new HashMap();
        digester_ = new Digester(mf_.trusted_, mf_.threshold_);
    }

    /**
     * Generates or updates the Manifest section with the given
     * name using the data read from the given stream.
     *
     * @param name The name of the Manifest section. This is the
     *   name that appears in the <code>Name:</code> attrbute of
     *   each Manifest section.
     * @param in The <code>InputStream</code> with the data that
     *   is digested.
     */
    public void digest(String name, InputStream in) throws IOException {
        Attributes attr;
        String[] md;
        String s;
        byte[] b;
        int n;
        if (name == null || in == null) {
            throw new NullPointerException("name or input stream");
        }
        md = mf_.md_;
        try {
            digester_.digest(md, digests_, in);
        } catch (DigestException e) {
            throw new IllegalStateException("Caught " + e.getClass().getName() + "(\"" + e.getMessage() + "\")");
        }
        s = "";
        attr = new Attributes(digests_.size());
        for (n = digests_.size() - 1; n >= 0; n--) {
            b = (byte[]) digests_.get(md[n]);
            if (b != null) {
                attr.put(md[n] + "-Digest", Base64.encode(b));
                s = s + md[n] + " ";
            }
        }
        attr.put("Digest-Algorithms", s.trim());
        mf_.entries_.put(name, attr);
    }

    /**
     * Creates and updates Manifest entries for all entries
     * in the given <code>Resource</code> whose names appear
     * in the given <code>Collection</code>. Names not in the
     * <code>Resource</code> will be ignored.<p>
     *
     * If <code>source</code> is an instance of <code>Manifest
     * </code> then this method assumes that a signature file
     * shall be computed and replaces the Manifest attributes
     * of the underlying <code>Manifest</code> to
     * &quot;Signature-Version: 1.0&quot;.
     *
     * @param names A <code>Collection</code> of strings where
     *   each string is the name of a <code>Resource</code>
     *   file whose digests shall be added to the Manifest.
     * @param ClassCastException if <code>names</code> contains
     *   an object which is not a <code>String</code>.
     */
    public void digest(Collection names, Resource source) throws IOException {
        InputStream in;
        Iterator i;
        String name;
        if (source instanceof Manifest) {
            mf_.attributes_ = new Attributes(1);
            mf_.attributes_.put("Signature-Version", "1.0");
        }
        for (i = names.iterator(); i.hasNext(); ) {
            name = (String) i.next();
            in = source.getInputStream(name);
            if (in == null) {
                continue;
            }
            try {
                digest(name, in);
            } finally {
                in.close();
            }
        }
    }

    /**
     * Digests the entire given <code>Resource</code>. Only
     * files accepted by the <code>MetaInfFilter</code> are
     * digested. In other words, the contents of a <code>
     * META-INF</code> folder in <code>resource</code> are
     * ignored.<p>
     *
     * This method calls <code>digest(names, resource)</code>
     * where <code>names</code> is a <code>List</code> of
     * the names in <code>resource</code>.
     *
     * @param resource The <code>Resource</code> whose
     *   contents are digested.
     * @exception IOException if some I/O related error
     *   occurs.
     */
    public void digest(Resource resource) throws IOException {
        List names;
        if (resource == null) {
            throw new NullPointerException("Resource");
        }
        names = resource.list(new MetaInfFilter());
        digest(names, resource);
    }
}
