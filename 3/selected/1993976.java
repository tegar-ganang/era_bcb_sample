package com.ciberiasoluciones.lidia.interfaz.usuarios;

import com.ciberiasoluciones.lidia.interfaz.Principal;
import com.ciberiasoluciones.lidia.interfaz.formas.Forma;
import com.ciberiasoluciones.lidia.modelo.Usuarios;
import java.security.MessageDigest;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.Query;

/**
 *
 * @author osalcedo
 */
public class FrmUsuarios extends Forma {

    Vector<Usuarios> usuarios;

    /** Creates new form Usuario */
    public FrmUsuarios(Principal p) {
        super(p);
        initComponents();
        habilitar(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfUsuario = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jpfClave = new javax.swing.JPasswordField();
        setTitle("Usuarios");
        jLabel1.setText("Usuario:");
        jLabel2.setText("Clave:");
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jtfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(jPanel1Layout.createSequentialGroup().addGap(14, 14, 14).addComponent(jLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jpfClave))).addContainerGap(145, Short.MAX_VALUE)));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGap(43, 43, 43).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jtfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel1)).addGap(7, 7, 7).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel2).addComponent(jpfClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(151, Short.MAX_VALUE)));
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
        pack();
    }

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPasswordField jpfClave;

    private javax.swing.JTextField jtfUsuario;

    @Override
    public boolean editar() {
        try {
            usuarios.get(getRegistroActual()).setUsuario(jtfUsuario.getText());
            usuarios.get(getRegistroActual()).setClave(md5(String.valueOf(jpfClave.getPassword())));
            return db.Actualizar(usuarios.get(getRegistroActual()));
        } catch (Exception ex) {
            Logger.getLogger(FrmUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    @Override
    public boolean buscar() {
        Query createNativeQuery = db.getEntityManager().createNativeQuery("select * from usuarios", Usuarios.class);
        usuarios = (Vector<Usuarios>) createNativeQuery.getResultList();
        setRegistroActual(0);
        setNroRegistros(usuarios.size());
        this.VerRegistro(0);
        return true;
    }

    @Override
    public boolean cargar() {
        List l = (List) db.Consultar("Usuarios.findAll");
        usuarios = (Vector<Usuarios>) l;
        if (l.size() > 0) {
            setRegistroActual(0);
            setNroRegistros(l.size());
            VerRegistro(0);
        }
        return true;
    }

    @Override
    public boolean borrar() {
        return db.Borrar(usuarios.get(getRegistroActual()));
    }

    @Override
    public boolean insertar() {
        try {
            Usuarios u = new Usuarios();
            u.setUsuario(this.jtfUsuario.getText());
            u.setClave(md5(String.valueOf(jpfClave.getPassword())));
            return db.Insertar(u);
        } catch (Exception ex) {
            Logger.getLogger(FrmUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    @Override
    public final void habilitar(boolean v) {
        jpfClave.setEditable(v);
        jtfUsuario.setEditable(v);
        if (getOperacion() == Forma.OPERACION_NUEVO) {
            jtfUsuario.setText("");
            jpfClave.setText("");
        }
    }

    @Override
    public void VerRegistro(int pos) {
        jtfUsuario.setText(usuarios.get(pos).getUsuario());
        jpfClave.setText(usuarios.get(pos).getClave());
    }

    private static String md5(String clear) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] b = md.digest(clear.getBytes());
        int size = b.length;
        StringBuilder h = new StringBuilder(size);
        for (int i = 0; i < size; i++) {
            int u = b[i] & 255;
            if (u < 16) h.append("0").append(Integer.toHexString(u)); else h.append(Integer.toHexString(u));
        }
        return h.toString();
    }
}
