package edu.nupt.jxta.impl.dht.table;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import com.sun.xml.internal.bind.v2.runtime.unmarshaller.XsiNilLoader.Array;
import edu.nupt.jxta.impl.dht.table.ID;

/**
 * �ο�openChordԴ�룬��δ�Ķ�
 * 
 * Provides a hash function for calculating the hash value out of {@link Key} or
 * {@link URL} objects.
 * 
 * @author Karsten Loesing, Sven Kaffille
 * @version 1.0.5
 */
public final class HashFunction {

    /**
	 * Singleton instance of this class.
	 */
    private static HashFunction hashFunction = null;

    /**
	 * Returns the singleton instance of this class.
	 * 
	 * @return Singleton instance of HashFunction.
	 * @throws RuntimeException
	 *             If there is an internal problem with the specified hash
	 *             function of the Java API.
	 */
    public static HashFunction getHashFunction() {
        if (hashFunction == null) {
            try {
                hashFunction = new HashFunction(MessageDigest.getInstance("SHA-1"));
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException("No hash function available!", e);
            }
        }
        return hashFunction;
    }

    /**
	 * Message digest for calculating hash values.
	 */
    private MessageDigest messageDigest;

    /**
	 * Constructor is hidden and only invoked once by {@link #getHashFunction()}.
	 * 
	 * @param digest1
	 *            Message digest for calculating hash values.
	 */
    private HashFunction(MessageDigest digest1) {
        if (digest1 == null) {
            throw new NullPointerException("Parameter may not be null!");
        }
        this.messageDigest = digest1;
    }

    /**
	 * Returns the length of IDs generated by this hash function.
	 * 
	 * @return Number of bytes of generated IDs.
	 */
    public final int getLengthOfIDsInBytes() {
        return this.messageDigest.getDigestLength();
    }

    /**
	 * Calculates the hash value for a given data Key.
	 * 
	 * @param entry
	 * @return ID for the given Key.
	 */
    public final ID getHashKey(net.jxta.id.ID ID) {
        if (ID == null) {
            throw new IllegalArgumentException("Parameter entry must not be null!");
        }
        byte[] testBytes = ID.toString().getBytes();
        return this.createID(testBytes);
    }

    public final ID createID(byte[] testBytes) {
        synchronized (this.messageDigest) {
            this.messageDigest.reset();
            this.messageDigest.update(testBytes);
            byte[] digest = this.messageDigest.digest();
            byte[] newdigest = new byte[1];
            newdigest[0] = new Integer(((digest[4] & 0x7) << 4) + (digest[0] & 0xf)).byteValue();
            return new ID(newdigest);
        }
    }

    public static void main(String[] args) {
        System.out.println(HashFunction.getHashFunction().createID("jxta:uuid-59716261646162614E504720503250335D729986F33447EAB7A0B247E53CD2D203".getBytes()).toDecimalString());
    }
}
