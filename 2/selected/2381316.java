package com.finchsync.gui;

import java.io.File;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import com.finchsync.helper.XMLReader;
import com.finchsync.sync.SyncClientConfig;
import com.finchsync.sync.SyncMonitor;
import com.finchsync.sync.SyncServlet;
import com.finchsync.sync.SyncSession;
import com.finchsync.sync.SyncSource;
import com.finchsync.sync.SyncSourceConfig;

/**
 * Server application Main Window. $Author: $
 * <p>
 * $Revision: $
 */
@SuppressWarnings("serial")
public class SyncMainWindow extends javax.swing.JFrame implements SyncMonitor {

    /** Logger for this class */
    private static org.apache.log4j.Logger mylog = org.apache.log4j.Logger.getLogger(SyncMainWindow.class);

    /** List of client activity */
    private ActivityTableModel activity_table;

    private SyncMain syncmain;

    private ClientTableModel client_table;

    private SyncClientConfig client_selected;

    private SyncSourceTableModel ssc_table;

    private SyncSourceConfig ssc_selected;

    /** Creates new form SyncMain */
    public SyncMainWindow(SyncMain syncmain) {
        this.syncmain = syncmain;
        startGUI();
    }

    /**
	 * Starts the FinchSync GUI.
	 */
    @SuppressWarnings("deprecation")
    private void startGUI() {
        initComponents();
        SwingUtilities.updateComponentTreeUI(this);
        ssc_table = new SyncSourceTableModel(syncmain.getSyncSourceConfigurations());
        jSyncSourceTable.setModel(ssc_table);
        jSyncSourceTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jSyncSourceTable.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {

            public void valueChanged(javax.swing.event.ListSelectionEvent e) {
                select_SyncSourceConfig(e);
            }
        });
        jSyncSourceTable.getColumnModel().getColumn(0).setPreferredWidth(15);
        jSyncSourceTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        jSyncSourceTable.getColumnModel().getColumn(2).setPreferredWidth(15);
        jSyncSourceTable.getColumnModel().getColumn(3).setPreferredWidth(250);
        jSyncSourceTable.getColumnModel().getColumn(4).setPreferredWidth(15);
        client_table = new ClientTableModel(syncmain.getSyncClientConfigurations());
        jClientTable.setModel(client_table);
        jClientTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jClientTable.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {

            public void valueChanged(javax.swing.event.ListSelectionEvent e) {
                select_ClientConfig(e);
            }
        });
        jClientTable.getColumnModel().getColumn(0).setPreferredWidth(5);
        jClientTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        jClientTable.getColumnModel().getColumn(2).setPreferredWidth(250);
        activity_table = new ActivityTableModel();
        jActivityTable.setModel(activity_table);
        jActivityTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        jActivityTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        jActivityTable.getColumnModel().getColumn(2).setPreferredWidth(50);
        jActivityTable.getColumnModel().getColumn(3).setPreferredWidth(200);
        this.setTitle("FinchSync V " + SyncServlet.SOFTWARE_VERSION + ' ' + SyncServlet.SOFTWARE_REVISION);
        try {
            InetAddress a = InetAddress.getLocalHost();
            jActivity_status.setText("This server: " + a.getHostName() + ", IP:" + a.getHostAddress());
        } catch (Exception e) {
            jActivity_status.setText("This server: - unknown -, IP: - unknown -");
        }
        this.show();
    }

    @SuppressWarnings("unused")
    private void setLogLevel(String level) {
        Logger root = Logger.getRootLogger();
        if ("debug".equals(level)) root.setLevel(Level.DEBUG); else if ("info".equals(level)) root.setLevel(Level.INFO); else if ("warn".equals(level)) root.setLevel(Level.WARN); else if ("error".equals(level)) root.setLevel(Level.ERROR); else if ("fatal".equals(level)) root.setLevel(Level.FATAL); else root.setLevel(Level.OFF);
    }

    public ActivityTableModel getActivityTable() {
        return activity_table;
    }

    /**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    @SuppressWarnings("deprecation")
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        jActivityPane1 = new javax.swing.JTabbedPane();
        jActivity = new javax.swing.JPanel();
        jActivitySP = new javax.swing.JScrollPane();
        jActivityTable = new javax.swing.JTable();
        jActivity_status = new javax.swing.JLabel();
        jSyncSourcePanel = new javax.swing.JPanel();
        jSyncSourceSP = new javax.swing.JScrollPane();
        jSyncSourceTable = new javax.swing.JTable();
        jSyncSourceB_Add = new javax.swing.JButton();
        jSyncSourceB_Config = new javax.swing.JButton();
        jSyncSourceB_Delete = new javax.swing.JButton();
        jClientPanel = new javax.swing.JPanel();
        jClientSP = new javax.swing.JScrollPane();
        jClientTable = new javax.swing.JTable();
        jClientB_Add = new javax.swing.JButton();
        jClientB_Config = new javax.swing.JButton();
        jClientB_Delete = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuServerConfig = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuAbout = new javax.swing.JMenuItem();
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("FinchSync V 0.1");
        setName("appwin");
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        jActivityPane1.setToolTipText("");
        jActivity.setLayout(new java.awt.GridBagLayout());
        jActivityTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null } }, new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
        jActivitySP.setViewportView(jActivityTable);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 10);
        jActivity.add(jActivitySP, gridBagConstraints);
        jActivity_status.setText("IP:");
        jActivity_status.setBorder(new javax.swing.border.EtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        jActivity.add(jActivity_status, gridBagConstraints);
        jActivityPane1.addTab("Activity", jActivity);
        jSyncSourcePanel.setLayout(new java.awt.GridBagLayout());
        jSyncSourceTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null } }, new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
        jSyncSourceSP.setViewportView(jSyncSourceTable);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 5);
        jSyncSourcePanel.add(jSyncSourceSP, gridBagConstraints);
        jSyncSourceB_Add.setToolTipText("Add a new Sync Source.");
        jSyncSourceB_Add.setLabel("Add");
        jSyncSourceB_Add.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSyncSourceB_Add(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 10);
        jSyncSourcePanel.add(jSyncSourceB_Add, gridBagConstraints);
        jSyncSourceB_Config.setToolTipText("Change configuration.");
        jSyncSourceB_Config.setLabel("Config");
        jSyncSourceB_Config.setEnabled(false);
        jSyncSourceB_Config.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSyncSourceB_Config(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        jSyncSourcePanel.add(jSyncSourceB_Config, gridBagConstraints);
        jSyncSourceB_Delete.setToolTipText("Delete selected Sync Source.");
        jSyncSourceB_Delete.setLabel("Delete");
        jSyncSourceB_Delete.setEnabled(false);
        jSyncSourceB_Delete.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSyncSourceB_Delete(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        jSyncSourcePanel.add(jSyncSourceB_Delete, gridBagConstraints);
        jActivityPane1.addTab("Sync Sources", jSyncSourcePanel);
        jClientPanel.setLayout(new java.awt.GridBagLayout());
        jClientTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null } }, new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
        jClientSP.setViewportView(jClientTable);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 5);
        jClientPanel.add(jClientSP, gridBagConstraints);
        jClientB_Add.setToolTipText("Add a new client.");
        jClientB_Add.setLabel("Add");
        jClientB_Add.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClientB_Add(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 10);
        jClientPanel.add(jClientB_Add, gridBagConstraints);
        jClientB_Config.setToolTipText("Edit client's configuration.");
        jClientB_Config.setLabel("Config");
        jClientB_Config.setEnabled(false);
        jClientB_Config.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClientB_Config(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        jClientPanel.add(jClientB_Config, gridBagConstraints);
        jClientB_Delete.setToolTipText("Delete selected client.");
        jClientB_Delete.setLabel("Delete");
        jClientB_Delete.setEnabled(false);
        jClientB_Delete.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClientB_Delete(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        jClientPanel.add(jClientB_Delete, gridBagConstraints);
        jActivityPane1.addTab("Clients", jClientPanel);
        getContentPane().add(jActivityPane1, java.awt.BorderLayout.CENTER);
        jMenu1.setText("File");
        jMenuServerConfig.setText("Server Configuration");
        jMenuServerConfig.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuServerConfigActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuServerConfig);
        jMenu1.add(jSeparator1);
        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuExit);
        jMenuBar1.add(jMenu1);
        jMenu2.setText("Help");
        jMenuAbout.setText("About");
        jMenuAbout.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAboutActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuAbout);
        jMenuBar1.add(jMenu2);
        setJMenuBar(jMenuBar1);
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width - 665) / 2, (screenSize.height - 347) / 2, 665, 347);
    }

    private void jMenuAboutActionPerformed(java.awt.event.ActionEvent evt) {
        AboutDialog ad = new AboutDialog(this, true);
        ad.setVisible(true);
    }

    private void jMenuServerConfigActionPerformed(java.awt.event.ActionEvent evt) {
        Map<String, String> data = new HashMap<String, String>();
        data.putAll(syncmain.getSettings());
        ServerSettingsDialog ssd = new ServerSettingsDialog(syncmain, this, true, data);
        ssd.setVisible(true);
        if (ssd.isChanged()) {
            syncmain.getSettings().clear();
            syncmain.getSettings().putAll(data);
            JOptionPane.showMessageDialog(this, "Changed will take effect after restarting the server !");
        }
    }

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {
        exitForm(null);
    }

    private void jClientB_Config(java.awt.event.ActionEvent evt) {
        if (client_selected == null) return;
        SyncClientConfigDialog sccd = new SyncClientConfigDialog(client_selected, syncmain, this, true);
        sccd.setVisible(true);
        if (sccd.changed()) client_table.fireTableDataChanged();
    }

    private void jClientB_Delete(java.awt.event.ActionEvent evt) {
        if (client_selected == null) return;
        if (JOptionPane.showConfirmDialog(this, "Delete Client '" + client_selected.getName() + "' ?", "Message", JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) return;
        syncmain.getSyncClientConfigurations().remove(client_selected);
        client_table.fireTableDataChanged();
        client_selected = null;
    }

    private void jClientB_Add(java.awt.event.ActionEvent evt) {
        SyncClientConfig scc = new SyncClientConfig(null);
        SyncClientConfigDialog sccd = new SyncClientConfigDialog(scc, syncmain, this, true);
        sccd.setVisible(true);
        if (sccd.changed()) {
            syncmain.getSyncClientConfigurations().add(scc);
            client_table.fireTableDataChanged();
        }
    }

    private void jSyncSourceB_Delete(java.awt.event.ActionEvent evt) {
        if (ssc_selected == null) return;
        if (JOptionPane.showConfirmDialog(this, "Delete SyncSource '" + ssc_selected.getName() + "' ?", "Message", JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) return;
        syncmain.getSyncSourceConfigurations().remove(ssc_selected);
        ssc_table.fireTableDataChanged();
        String sname = ssc_selected.getName();
        for (SyncClientConfig scc : syncmain.getSyncClientConfigurations()) {
            for (Iterator<Map<String, String>> t = scc.getSyncSourceList().iterator(); t.hasNext(); ) {
                Map<String, String> m = t.next();
                if (sname.equals(m.get("name"))) t.remove();
            }
        }
        ssc_selected = null;
    }

    private void jSyncSourceB_Config(java.awt.event.ActionEvent evt) {
        if (ssc_selected != null && ssc_selected.hasConfigDialog()) ssc_selected.openConfigDialog(this);
    }

    private void jSyncSourceB_Add(java.awt.event.ActionEvent evt) {
        SyncSourceWizard sswiz = new SyncSourceWizard(syncmain, this, true);
        sswiz.setVisible(true);
        SyncSourceConfig ssc = sswiz.getSyncSourceConfig();
        if (ssc != null) {
            String err = ssc.createBackup();
            if (err != null) JOptionPane.showMessageDialog(this, "Failed to backup file '" + ssc.getFilename() + "': " + err + "\nPlease backup this file!");
            syncmain.getSyncSourceConfigurations().add(ssc);
            ssc_table.fireTableDataChanged();
        }
    }

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {
        File f = new File(syncmain.getRootPath() + "/serversettings.xml");
        if (syncmain.writeConfig(f) == false) JOptionPane.showMessageDialog(this, "Error writing settings to '" + f.getAbsolutePath() + "'!");
        if (syncmain.stopServer() == false) {
            if (JOptionPane.showConfirmDialog(this, "Failed to stopp the Server. Close anyway ?", "Message", JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) return;
        }
        mylog.info("Server stopped.");
        System.exit(0);
    }

    /**
	 * @param args
	 *            the command line arguments
	 */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Throwable th) {
            try {
                UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            } catch (Exception e) {
            }
        }
        @SuppressWarnings("unused") boolean gui = true;
        if (args.length > 0) {
            if ("-nogui".equals(args[0])) gui = false;
            if ("-stopserver".equals(args[0])) {
                sendStop();
                System.exit(0);
            }
        }
    }

    /**
	 * Sends a stop signal to the running server.
	 */
    private static void sendStop() {
        try {
            File f = new File(new File("finchconfig").getAbsolutePath() + "/serversettings.xml");
            if (!f.exists()) {
                String msg = "Can't find configuration file '" + f.getAbsolutePath() + "'.";
                System.out.println(msg);
            }
            Document doc = XMLReader.readXMLDocument(f, null, false, null);
            if (doc == null) throw new Exception("Can't read config file!");
            Element root = doc.getDocumentElement();
            Element el_settings = XMLReader.findSubElement(root, "serversettings");
            Map<String, String> settings = new HashMap<String, String>();
            XMLReader.readChildsToMap(el_settings, settings, true);
            if (!"true".equals(settings.get(SyncMain.S_ENABLESTATUSPAGE))) {
                System.out.println("Server'S status page must be enabled to stop the server from the commandline!\nServer not stopped!");
                return;
            }
            String login = settings.get(SyncMain.S_ADMINLOGIN);
            String password = settings.get(SyncMain.S_ADMINPASSWORD);
            String port = settings.get(SyncMain.S_PORTHTTP);
            String u = "http://localhost:" + port + "/status?login=" + login + "&password=" + password + "&action=stopserver";
            URL url = new URL(u);
            HttpURLConnection hc = (HttpURLConnection) url.openConnection();
            hc.setUseCaches(false);
            if (hc.getResponseCode() == 200) System.out.println("Server stopped!");
        } catch (Exception e) {
            System.out.println("Error :" + e.getMessage());
        }
    }

    private void select_SyncSourceConfig(javax.swing.event.ListSelectionEvent e) {
        int sel = jSyncSourceTable.getSelectedRow();
        if (sel == -1) {
            jSyncSourceB_Config.setEnabled(false);
            jSyncSourceB_Delete.setEnabled(false);
            return;
        }
        ssc_selected = syncmain.getSyncSourceConfigurations().get(sel);
        jSyncSourceB_Config.setEnabled(ssc_selected.hasConfigDialog());
        jSyncSourceB_Delete.setEnabled(true);
        return;
    }

    private void select_ClientConfig(javax.swing.event.ListSelectionEvent e) {
        int sel = jClientTable.getSelectedRow();
        if (sel == -1) {
            jClientB_Config.setEnabled(false);
            jClientB_Delete.setEnabled(false);
            return;
        }
        client_selected = syncmain.getSyncClientConfigurations().get(sel);
        jClientB_Config.setEnabled(true);
        jClientB_Delete.setEnabled(true);
        return;
    }

    public void displayActivity(SyncSession sess, String activity) {
        if (sess == null) return;
        boolean first = true;
        StringBuffer sb = new StringBuffer();
        for (SyncSource ssource : sess.getSyncSources()) {
            if (ssource.isAvailable()) {
                if (!first) sb.append(',');
                first = false;
                sb.append(ssource.getConfig().getName());
            }
        }
        activity_table.setActivity(sess.getSyncClientConfig().getName(), sb.toString(), null, activity);
    }

    private javax.swing.JPanel jActivity;

    private javax.swing.JTabbedPane jActivityPane1;

    private javax.swing.JScrollPane jActivitySP;

    private javax.swing.JTable jActivityTable;

    private javax.swing.JLabel jActivity_status;

    private javax.swing.JButton jClientB_Add;

    private javax.swing.JButton jClientB_Config;

    private javax.swing.JButton jClientB_Delete;

    private javax.swing.JPanel jClientPanel;

    private javax.swing.JScrollPane jClientSP;

    private javax.swing.JTable jClientTable;

    private javax.swing.JMenu jMenu1;

    private javax.swing.JMenu jMenu2;

    private javax.swing.JMenuItem jMenuAbout;

    private javax.swing.JMenuBar jMenuBar1;

    private javax.swing.JMenuItem jMenuExit;

    private javax.swing.JMenuItem jMenuServerConfig;

    private javax.swing.JSeparator jSeparator1;

    private javax.swing.JButton jSyncSourceB_Add;

    private javax.swing.JButton jSyncSourceB_Config;

    private javax.swing.JButton jSyncSourceB_Delete;

    private javax.swing.JPanel jSyncSourcePanel;

    private javax.swing.JScrollPane jSyncSourceSP;

    private javax.swing.JTable jSyncSourceTable;
}
