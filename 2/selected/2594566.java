package edu.ucsd.ncmir.cytosegtowib;

import edu.sdsc.grid.io.GeneralFile;
import edu.ucsd.ncmir.spl.graphics.contour_tracer.ContourTracer;
import edu.ucsd.ncmir.spl.graphics.PlanarPolygon;
import edu.ucsd.ncmir.spl.graphics.PlanarPolygonTable;
import edu.ucsd.ncmir.spl.graphics.Threader;
import edu.ucsd.ncmir.spl.graphics.ZeroAreaPolygonException;
import edu.ucsd.ncmir.spl.minixml.Element;
import edu.ucsd.ncmir.spl.minixml.JDOMException;
import edu.ucsd.ncmir.spl.minixml.SAXBuilder;
import edu.ucsd.ncmir.volume.volume.Volume;
import java.io.IOException;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JPanel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

/**
 *
 * @author spl
 */
public class Worker extends JPanel implements Runnable {

    /** Creates new form Worker */
    private CytosegToWIB _parent;

    private String _url_base;

    private int _planes;

    public Worker(CytosegToWIB parent) {
        this._parent = parent;
        this.initComponents();
        SpinnerNumberModel snm = new SpinnerNumberModel(255, 0, 255, 1);
        this.foreground_value.setModel(snm);
        new OntologyAutoCompleter(this.ontological_name, "Anatomical_Region");
        TabChangeListener tcl = new TabChangeListener(this._parent);
        this.ontological_name.getDocument().addDocumentListener(tcl);
        this.threshold.setModel(new SpinnerNumberModel(1, 1, 10, 1));
    }

    void setVolume(Volume volume) {
        this._planes = volume.getPlanes();
        String server = System.getProperty("server");
        this._url_base = server + "WebImageBrowser/cgi-bin/wibdb.pl" + "?uri=" + volume.toURI();
    }

    private class TabChangeListener implements DocumentListener {

        private CytosegToWIB _parent;

        TabChangeListener(CytosegToWIB parent) {
            this._parent = parent;
        }

        private void manageUpdate(DocumentEvent e) {
            try {
                Document d = e.getDocument();
                String text = d.getText(0, d.getLength());
                this._parent.updateTabLabel(text);
            } catch (BadLocationException ble) {
            }
        }

        public void insertUpdate(DocumentEvent e) {
            this.manageUpdate(e);
        }

        public void removeUpdate(DocumentEvent e) {
            this.manageUpdate(e);
        }

        public void changedUpdate(DocumentEvent e) {
            this.manageUpdate(e);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        single_object = new javax.swing.JRadioButton();
        subobjects = new javax.swing.JRadioButton();
        singletons = new javax.swing.JPanel();
        exclude_singletons = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        threshold_label = new javax.swing.JLabel();
        threshold = new javax.swing.JSpinner();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        ontological_name = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        foreground_value = new javax.swing.JSpinner();
        jPanel10 = new javax.swing.JPanel();
        setLayout(new java.awt.BorderLayout());
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        buttonGroup1.add(single_object);
        single_object.setText("Create As Single Object");
        jPanel2.add(single_object);
        buttonGroup1.add(subobjects);
        subobjects.setSelected(true);
        subobjects.setText("Sort Into Sub-Objects");
        subobjects.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                subobjectsStateChange(evt);
            }
        });
        jPanel2.add(subobjects);
        jPanel4.add(jPanel2);
        singletons.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        singletons.setLayout(new java.awt.GridLayout(2, 1));
        exclude_singletons.setSelected(true);
        exclude_singletons.setText("Exclude Singletons");
        singletons.add(exclude_singletons);
        jPanel3.setLayout(new java.awt.BorderLayout(5, 0));
        threshold_label.setText("Threshold (>)");
        jPanel3.add(threshold_label, java.awt.BorderLayout.WEST);
        jPanel3.add(threshold, java.awt.BorderLayout.CENTER);
        singletons.add(jPanel3);
        jPanel4.add(singletons);
        add(jPanel4, java.awt.BorderLayout.NORTH);
        jPanel7.setLayout(new java.awt.BorderLayout());
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Ontological Name");
        jPanel7.add(jLabel3, java.awt.BorderLayout.PAGE_START);
        jPanel8.setLayout(new java.awt.BorderLayout());
        ontological_name.setText("object");
        jPanel8.add(ontological_name, java.awt.BorderLayout.NORTH);
        jPanel7.add(jPanel8, java.awt.BorderLayout.CENTER);
        jPanel9.setLayout(new java.awt.GridLayout(1, 0));
        jPanel9.add(jPanel1);
        jPanel11.setLayout(new java.awt.BorderLayout(5, 0));
        jLabel5.setText("Foreground Value");
        jPanel11.add(jLabel5, java.awt.BorderLayout.WEST);
        jPanel11.add(foreground_value, java.awt.BorderLayout.CENTER);
        jPanel9.add(jPanel11);
        jPanel9.add(jPanel10);
        jPanel7.add(jPanel9, java.awt.BorderLayout.SOUTH);
        add(jPanel7, java.awt.BorderLayout.CENTER);
    }

    private void subobjectsStateChange(javax.swing.event.ChangeEvent evt) {
        this.exclude_singletons.setEnabled(this.subobjects.isSelected());
        this.threshold_label.setEnabled(this.subobjects.isSelected());
        this.threshold.setEnabled(this.subobjects.isSelected());
    }

    private javax.swing.ButtonGroup buttonGroup1;

    private javax.swing.JCheckBox exclude_singletons;

    private javax.swing.JSpinner foreground_value;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JLabel jLabel5;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel10;

    private javax.swing.JPanel jPanel11;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JPanel jPanel3;

    private javax.swing.JPanel jPanel4;

    private javax.swing.JPanel jPanel7;

    private javax.swing.JPanel jPanel8;

    private javax.swing.JPanel jPanel9;

    private javax.swing.JTextField ontological_name;

    private javax.swing.JRadioButton single_object;

    private javax.swing.JPanel singletons;

    private javax.swing.JRadioButton subobjects;

    private javax.swing.JSpinner threshold;

    private javax.swing.JLabel threshold_label;

    public String getObjectName() {
        return this.ontological_name.getText();
    }

    public void run() {
        try {
            GeneralFile directory = this._parent.getDirectory();
            SpinnerNumberModel fgmodel = (SpinnerNumberModel) this.foreground_value.getModel();
            byte foreground = (byte) fgmodel.getNumber().intValue();
            GeneralFile[] files = directory.listFiles();
            Arrays.sort(files, new GFCompare());
            int z = 0;
            PlanarPolygonTable ppt = new PlanarPolygonTable();
            for (GeneralFile file : files) {
                ImageMangler mangler = new ImageMangler(file);
                int width = mangler.getWidth();
                int height = mangler.getHeight();
                byte[] data = mangler.getPixels();
                ContourTracer ct = new ContourTracer(data, width, height);
                ArrayList<int[][]> traces = ct.trace(foreground);
                for (int[][] trace : traces) {
                    try {
                        ppt.addPlanarPolygon(new PlanarPolygon(trace, z));
                    } catch (ZeroAreaPolygonException zape) {
                    }
                }
                this._parent.updateProgress();
                z++;
            }
            String onto_class = this.ontological_name.getText();
            if (this.subobjects.isSelected()) {
                Threader t = new Threader(ppt);
                SpinnerNumberModel tmodel = (SpinnerNumberModel) this.threshold.getModel();
                int thresh = tmodel.getNumber().intValue();
                int i = 0;
                while (t.hasMoreElements()) {
                    PlanarPolygonTable ppte = t.nextElement();
                    if ((ppte.size() > thresh) || !this.exclude_singletons.isSelected()) {
                        String name = String.format("%s.%06d", onto_class, i++);
                        this.sendPolygons(ppte, onto_class, name);
                    }
                }
            } else this.sendPolygons(ppt, onto_class, onto_class);
        } catch (Throwable t) {
            t.printStackTrace();
        }
    }

    private void sendPolygons(PlanarPolygonTable ppt, String onto_class, String name) throws MalformedURLException, IOException, JDOMException {
        String querystring = this._url_base + "&type=annotate" + "&name=" + name + "&color=" + (int) (Math.random() * 0x01000000);
        double offset = (this._planes - 1) / 2.0;
        boolean first = true;
        for (Double d : ppt.getKeys()) {
            for (PlanarPolygon p : ppt.getArray(d)) {
                HttpURLConnection urlconn = (HttpURLConnection) new URL(querystring).openConnection();
                urlconn.setDoOutput(true);
                urlconn.connect();
                PrintStream ps = new PrintStream(urlconn.getOutputStream());
                double xya[][] = p.getXY();
                String out = String.format("%d\n", xya.length);
                for (double[] xy : xya) out += String.format("%g %g %g\n", xy[0], xy[1], d.doubleValue() - offset);
                if (first) {
                    first = false;
                    out += "annotations 1\n" + "0:object " + onto_class;
                    ps.println(out);
                    SAXBuilder sb = new SAXBuilder();
                    Element r = sb.build(urlconn.getInputStream()).getRootElement();
                    String id = r.getAttributeValue("id");
                    querystring = this._url_base + "&type=contour" + "&id=" + id;
                } else ps.print(out);
                ps.close();
                urlconn.disconnect();
            }
        }
    }
}
