package solowiki;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javax.swing.SwingWorker;

/**
 *
 * @author Peppe
 */
public class UpdatesDialog extends javax.swing.JDialog {

    /** Creates new form UpdatesDialog */
    public UpdatesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        warningLabel = new javax.swing.JLabel();
        checkButton = new javax.swing.JButton();
        installedLabel = new javax.swing.JLabel();
        currentLabel = new javax.swing.JLabel();
        installedText = new javax.swing.JLabel();
        currentText = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        downloadButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        downloadProgressBar = new javax.swing.JProgressBar();
        statusLabel = new javax.swing.JLabel();
        statusText = new javax.swing.JLabel();
        downloadLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("solowiki/resources/UpdatesDialog");
        setTitle(bundle.getString("title"));
        setLocationByPlatform(true);
        warningLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        warningLabel.setText(bundle.getString("beware"));
        checkButton.setText(bundle.getString("check"));
        checkButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });
        installedLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        installedLabel.setLabelFor(installedText);
        installedLabel.setText(bundle.getString("installed"));
        currentLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        currentLabel.setLabelFor(currentText);
        currentLabel.setText(bundle.getString("current"));
        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("solowiki/resources/SoloWikiApp");
        installedText.setText(bundle1.getString("Application.version"));
        currentText.setText(bundle.getString("unknown"));
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(checkButton).addComponent(warningLabel))).addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addComponent(installedLabel)).addGroup(jPanel1Layout.createSequentialGroup().addGap(10, 10, 10).addComponent(currentLabel))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(currentText).addComponent(installedText)))).addContainerGap(20, Short.MAX_VALUE)));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addComponent(warningLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(checkButton).addGap(11, 11, 11).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(installedLabel).addComponent(installedText)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(currentLabel).addComponent(currentText)).addContainerGap(6, Short.MAX_VALUE)));
        downloadButton.setText(bundle.getString("download"));
        downloadButton.setEnabled(false);
        downloadButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });
        cancelButton.setText(bundle.getString("cancel"));
        cancelButton.setEnabled(false);
        statusLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        statusLabel.setLabelFor(statusText);
        statusLabel.setText(bundle.getString("status.label"));
        statusText.setText(bundle.getString("status.waiting"));
        downloadLabel.setText("         ");
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addContainerGap().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(downloadProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE).addGroup(jPanel2Layout.createSequentialGroup().addComponent(downloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(10, 10, 10).addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)).addGroup(jPanel2Layout.createSequentialGroup().addComponent(statusLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(statusText)))).addGroup(jPanel2Layout.createSequentialGroup().addGap(83, 83, 83).addComponent(downloadLabel))).addContainerGap()));
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(cancelButton).addComponent(downloadButton)).addGap(17, 17, 17).addComponent(downloadProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(2, 2, 2).addComponent(downloadLabel).addGap(2, 2, 2).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(statusLabel).addComponent(statusText)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        closeButton.setText(bundle.getString("close"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(closeButton)).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(closeButton).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        pack();
    }

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {
        BufferedReader in = null;
        boolean checked = false;
        try {
            URL versionURL = new URL(java.util.ResourceBundle.getBundle("solowiki/resources/SoloWikiApp").getString("AppVersionURL"));
            in = new BufferedReader(new InputStreamReader(versionURL.openStream()));
            String inputLine;
            if ((inputLine = in.readLine()) != null) {
                currentText.setText(inputLine);
                checked = true;
            }
            in.close();
            if (checked) {
                if (!(currentText.getText().equals(installedText.getText()))) {
                    downloadButton.setEnabled(true);
                    downloadProgressBar.setValue(0);
                    downloadLabel.setText("   ");
                } else {
                    statusText.setText(java.util.ResourceBundle.getBundle("solowiki/resources/UpdatesDialog").getString("status.uptodate"));
                }
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(UpdatesDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            statusText.setText(java.util.ResourceBundle.getBundle("solowiki/resources/UpdatesDialog").getString("error"));
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ex) {
                    Logger.getLogger(UpdatesDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        this.dispose();
    }

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {
        DownloadWorker dw = new DownloadWorker();
        dw.addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("progress".equals(evt.getPropertyName())) {
                    downloadProgressBar.setValue((Integer) evt.getNewValue());
                }
            }
        });
        statusText.setText("Downloading...");
        downloadButton.setEnabled(false);
        cancelButton.setEnabled(true);
        dw.execute();
    }

    private class DownloadWorker extends SwingWorker<Void, Long> {

        String filename;

        String downloadURL;

        boolean ioerror;

        long length;

        public DownloadWorker() {
            filename = "SoloWiki-" + currentText.getText() + ".zip";
            ResourceBundle rb = java.util.ResourceBundle.getBundle("solowiki/resources/SoloWikiApp");
            downloadURL = rb.getString("AppDownloadURL") + filename;
            ioerror = false;
        }

        @Override
        protected Void doInBackground() throws Exception {
            InputStream in = null;
            OutputStream out = null;
            try {
                URL url = new URL(downloadURL);
                URLConnection connection = url.openConnection();
                length = connection.getContentLength();
                in = (InputStream) connection.getContent();
                if (!(isCancelled())) {
                    out = new BufferedOutputStream(new FileOutputStream(filename));
                    byte[] buffer = new byte[1024];
                    int numRead;
                    long numWritten = 0;
                    while (!(isCancelled()) && ((numRead = in.read(buffer)) != -1)) {
                        out.write(buffer, 0, numRead);
                        numWritten += numRead;
                        int progressAt = (int) ((double) numWritten / length * 100);
                        publish(new Long(numWritten));
                        setProgress(progressAt);
                    }
                }
            } catch (MalformedURLException ex) {
                Logger.getLogger(DownloadWorker.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                ioerror = true;
            } finally {
                try {
                    if (in != null) {
                        in.close();
                    }
                    if (out != null) {
                        out.close();
                    }
                } catch (IOException ioe) {
                    ioerror = true;
                }
            }
            return null;
        }

        @Override
        public void done() {
            if (ioerror) {
                statusText.setText(java.util.ResourceBundle.getBundle("solowiki/resources/UpdatesDialog").getString("error"));
            } else {
                File tmp = new File(filename);
                if (isCancelled()) {
                    statusText.setText("Download aborted");
                    tmp.delete();
                } else {
                    statusText.setText("Download complete");
                }
            }
            cancelButton.setEnabled(false);
            downloadButton.setEnabled(false);
        }

        @Override
        protected void process(List<Long> bytes) {
            Long last = bytes.get(bytes.size() - 1);
            last = last / 1000;
            downloadLabel.setText(last.toString() + "k/" + Long.toString(length / 1000));
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                UpdatesDialog dialog = new UpdatesDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private javax.swing.JButton cancelButton;

    private javax.swing.JButton checkButton;

    private javax.swing.JButton closeButton;

    private javax.swing.JLabel currentLabel;

    private javax.swing.JLabel currentText;

    private javax.swing.JButton downloadButton;

    private javax.swing.JLabel downloadLabel;

    private javax.swing.JProgressBar downloadProgressBar;

    private javax.swing.JLabel installedLabel;

    private javax.swing.JLabel installedText;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JLabel statusLabel;

    private javax.swing.JLabel statusText;

    private javax.swing.JLabel warningLabel;
}
