package test.multidoty;

import com.restfb.json.JSONStringer;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import org.lwjgl.opengl.Display;

/**
 *
 * @author jmadar
 */
public class UI extends javax.swing.JFrame {

    public Game game;

    public HashSet<String> onlineUsers = new HashSet<String>();

    private ArrayList<String> commandHistory = new ArrayList<String>();

    private int commandHistoryPointer;

    private JPopupMenu popup;

    private final Map<String, JMenuItem> allCommands = new TreeMap<String, JMenuItem>();

    private final Map<String, JMenuItem> allRooms = new TreeMap<String, JMenuItem>();

    /** Creates new form UI */
    public UI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        canvas1 = new java.awt.Canvas();
        game = new Game();
        try {
            Display.setParent(canvas1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        jPanel1 = new javax.swing.JPanel();
        info = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        users = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JEditorPane();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));
        setResizable(false);
        canvas1.setIgnoreRepaint(true);
        canvas1.setMaximumSize(new java.awt.Dimension(640, 480));
        canvas1.setMinimumSize(new java.awt.Dimension(640, 480));
        getContentPane().add(canvas1, java.awt.BorderLayout.CENTER);
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING));
        info.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        info.setText("INFO:");
        info.setFocusable(false);
        info.setPreferredSize(new java.awt.Dimension(500, 16));
        info.setRequestFocusEnabled(false);
        jPanel1.add(info);
        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jLabel1.setText("Room:");
        jPanel1.add(jLabel1);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox1);
        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);
        jLabel2.setText("Chat:");
        jPanel2.add(jLabel2);
        jTextField1.setMinimumSize(new java.awt.Dimension(700, 28));
        jTextField1.setPreferredSize(new java.awt.Dimension(700, 28));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        jPanel2.add(jTextField1);
        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);
        jPanel3.setBackground(new java.awt.Color(102, 102, 102));
        jPanel3.setPreferredSize(new java.awt.Dimension(160, 480));
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Online Users");
        jPanel3.add(jLabel3);
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(160, 140));
        users.setColumns(20);
        users.setEditable(false);
        users.setLineWrap(true);
        users.setRows(5);
        users.setWrapStyleWord(true);
        jScrollPane2.setViewportView(users);
        jPanel3.add(jScrollPane2);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(160, 8));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(160, 305));
        chatArea.setContentType("text/html");
        chatArea.setEditable(false);
        chatArea.setMinimumSize(new java.awt.Dimension(160, 280));
        chatArea.setPreferredSize(new java.awt.Dimension(160, 280));
        chatArea.setSize(new java.awt.Dimension(200, 500));
        jScrollPane1.setViewportView(chatArea);
        jPanel3.add(jScrollPane1);
        getContentPane().add(jPanel3, java.awt.BorderLayout.LINE_END);
        pack();
    }

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {
        jTextField1ActionPerformed(new ActionEvent(jTextField1, ActionEvent.ACTION_PERFORMED, "/room " + jComboBox1.getSelectedItem().toString().trim()));
    }

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {
        String commandText = evt.getActionCommand();
        commandHistory.add(commandText);
        commandHistoryPointer = commandHistory.size();
        ((JTextField) evt.getSource()).setText("");
        if (commandText.startsWith("/quit")) {
            System.exit(0);
        } else if (commandText.startsWith("/nick")) {
            String[] commands = commandText.split(" ");
            if (commands.length > 1) {
                String oldNick = game.getUserName();
                if (oldNick == null) {
                    oldNick = "Unknown";
                }
                String newNick = commandText.substring(6).trim();
                if (onlineUsers.contains(newNick)) {
                    String message = "Name already exist in room.  Please choose a new name";
                    addChatMessage(message);
                    initChatField();
                } else {
                    game.setUserName(newNick);
                    String message = oldNick + " is now known as " + game.getUserName();
                    sendChatMessage(message);
                }
            }
        } else if (commandText.startsWith("/room")) {
            String[] commands = commandText.split(" ");
            if (commands.length > 1) {
                game.changeRoomName(commands[1].trim());
            } else {
                game.changeRoomName("");
            }
        } else if (commandText.startsWith("/load")) {
            if (game.getRoomName().length() == 0 || game.getPredefinedRooms().contains(game.getRoomName())) {
                addInfoMessage("Cannot load object in predefined rooms.  Switch to a custom room.");
                return;
            }
            sendCommand(commandText.substring(6));
        } else if (commandText.startsWith("/")) {
            sendCommand(commandText.substring(1));
        } else {
            sendChatMessage(commandText);
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {
        switch(evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                if (commandHistoryPointer > 0) {
                    jTextField1.setText(commandHistory.get(--commandHistoryPointer));
                }
                break;
            case KeyEvent.VK_DOWN:
                if (commandHistoryPointer < commandHistory.size() - 1) {
                    jTextField1.setText(commandHistory.get(++commandHistoryPointer));
                } else {
                    commandHistoryPointer = commandHistory.size();
                    jTextField1.setText("");
                }
                break;
            case KeyEvent.VK_ESCAPE:
                commandHistoryPointer = commandHistory.size();
                jTextField1.setText("");
                break;
        }
        initPopup();
        if (jTextField1.getText().startsWith("/room")) {
            String[] commandText = jTextField1.getText().split(" ");
            String roomPrefix = "";
            if (commandText.length > 1) {
                roomPrefix = commandText[1];
            }
            popupCompletion("rooms", roomPrefix);
        } else if (jTextField1.getText().startsWith("/")) {
            String[] commandText = jTextField1.getText().substring(1).split(" ");
            String commandPrefix = "";
            if (commandText.length > 0) {
                commandPrefix = commandText[0];
            }
            popupCompletion("commands", commandPrefix);
        } else {
            popup.setVisible(false);
        }
    }

    /**
     * Popup a command completion depending on the type
     * @param type
     * @param prefix
     */
    private void popupCompletion(String type, String prefix) {
        if (jTextField1.getCaret().getMagicCaretPosition() == null) {
            return;
        }
        Map<String, JMenuItem> list;
        if (type.equals("commands")) {
            list = allCommands;
        } else {
            list = allRooms;
        }
        popup.removeAll();
        for (String str : list.keySet()) {
            if (str.startsWith(prefix)) {
                popup.add(list.get(str));
            }
        }
        Point popupLocation = jTextField1.getLocationOnScreen();
        popup.setLocation(popupLocation.x + (jTextField1.getCaret().getMagicCaretPosition().x + 20), popupLocation.y + 20);
        popup.pack();
        popup.setVisible(true);
    }

    /**
     * Initialize the popup menu for command help
     */
    private void initPopup() {
        if (popup == null) {
            popup = new JPopupMenu();
            try {
                URL commandsURL = new URL(game.getAssetServerLocation() + "/?dir=commands");
                URL roomsURL = new URL(game.getAssetServerLocation() + "/?dir=rooms");
                readIntoList(commandsURL, allCommands);
                readIntoList(roomsURL, allRooms);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Read content of an URL into a list.  This is strictly a helper for
     * initPopup
     *
     * @param url
     * @param list
     */
    private void readIntoList(URL url, Map<String, JMenuItem> list) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                int commandNameBegin = inputLine.indexOf(">") + 1;
                int commandNameEnd = inputLine.indexOf("</a>");
                JMenuItem item = new JMenuItem("<html>" + inputLine + "</html>");
                if (list == allRooms) {
                    item.setActionCommand("/room " + inputLine.substring(commandNameBegin, commandNameEnd));
                } else {
                    item.setActionCommand("/" + inputLine.substring(commandNameBegin, commandNameEnd) + " ");
                }
                item.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        jTextField1.setText(e.getActionCommand());
                        popup.setVisible(false);
                    }
                });
                list.put(inputLine.substring(commandNameBegin, commandNameEnd), item);
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Sends a command to the server.
     * Assumes the commandText starts with the command name (no / prefix)
     * @param commands
     */
    public void sendCommand(String commandText) {
        String[] commands = commandText.split(" ");
        System.out.println("Extended command " + commands[0]);
        if (commands[0] != null && commands[0].length() != 0) {
            String objectId = game.getSession() + "_" + System.currentTimeMillis();
            try {
                String parameters = "";
                if (commands.length > 1) {
                    parameters = commandText.substring(commandText.indexOf(" " + commands[1])).trim();
                }
                String codeLocation = null;
                if (commands[0].startsWith("http://")) {
                    codeLocation = commands[0];
                } else {
                    codeLocation = game.getAssetServerLocation() + "/commands/" + commands[0];
                }
                String jsonString = new JSONStringer().object().key("id").value(objectId).key("x").value(game.getDoty1().getX()).key("y").value(game.getDoty1().getY()).key("z").value(game.getDoty1().getZ()).key("rotateX").value(game.getDoty1().getRotateX()).key("rotateY").value(game.getDoty1().getRotateY()).key("rotateZ").value(game.getDoty1().getRotateZ()).key("code").value(codeLocation).key("parameters").value(parameters).endObject().toString();
                game.getMc().set(objectId, jsonString, 30000);
                game.getMc().appendAndUpdate(game.getRoomObjectsKey(), objectId + "\n", 60000);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    /**
     * Sends a chat message to the server
     * @param message
     */
    public void sendChatMessage(String message) {
        try {
            String messageId = game.getSession() + "_" + System.currentTimeMillis();
            if (game.getUserName() != null) {
                message = game.getUserName() + ": " + message;
            }
            game.getMc().set(messageId, message, 5000);
            game.getMc().appendAndUpdate(game.getRoomMessagesKey(), messageId + "\n", 30000);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Add a chat message locally - the message is not sent to the server
     * @param message
     */
    public void addChatMessage(String message) {
        HTMLDocument d = (HTMLDocument) chatArea.getDocument();
        try {
            ((HTMLEditorKit) chatArea.getEditorKit()).insertHTML(d, d.getEndPosition().getOffset() - 1, "<table width=100%><tr><td>" + message.trim() + "</td></tr></table>", 1, 0, null);
        } catch (Exception e) {
        }
    }

    /**
     * Put a message into the info box
     * @param message
     */
    public void addInfoMessage(String message) {
        info.setText("INFO: " + message);
    }

    public void addOnlineUser(String user) {
        onlineUsers.add(user);
        refreshOnlineUsers();
    }

    public void deleteOnlineUser(String user) {
        onlineUsers.remove(user);
        refreshOnlineUsers();
    }

    public void clearOnlineUser() {
        onlineUsers.clear();
        refreshOnlineUsers();
    }

    public void refreshOnlineUsers() {
        users.setText(onlineUsers.toString());
    }

    /**
     * Sends chat messages to the server
     */
    public void sendChatToServer() {
        Thread sendThread = new Thread() {

            public void run() {
                int sentIndex = 0;
                while (true) {
                    try {
                        if (sentIndex < commandHistory.size()) {
                            String url = game.getAssetServerLocation() + "/comm.php?user=" + game.getSession() + "&msg=" + commandHistory.get(sentIndex).replaceAll(" ", "%20");
                            util.Sysutil.readUrl(url);
                            sentIndex++;
                        }
                        Thread.sleep(1000);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        sendThread.start();
    }

    /**
     * Receive chat data from server
     */
    public void receiveChatFromServer() {
        Thread chatThread = new Thread() {

            public void run() {
                HashSet<String> messageIdSet = new HashSet<String>();
                StringBuffer chatText = new StringBuffer();
                String[] colors = { "#B4CFEC", "#98AFC7" };
                int currentColor = 0;
                while (true) {
                    try {
                        Thread.sleep(1000);
                        String allMessageIds = (String) game.getMc().get(game.getRoomMessagesKey());
                        if (allMessageIds != null) {
                            String[] allMessageIdsArray = allMessageIds.split("\n");
                            Map messageMap = game.getMc().getMulti(allMessageIdsArray);
                            for (String messageId : allMessageIdsArray) {
                                if (!messageIdSet.contains(messageId)) {
                                    String message = (String) messageMap.get(messageId);
                                    if (message != null) {
                                        HTMLDocument d = (HTMLDocument) chatArea.getDocument();
                                        try {
                                            ((HTMLEditorKit) chatArea.getEditorKit()).insertHTML(d, d.getEndPosition().getOffset() - 1, "<table width=100%><tr bgcolor=" + colors[currentColor] + "><td>" + message.trim() + "</td></tr></table>", 1, 0, null);
                                            currentColor = (currentColor + 1) % 2;
                                        } catch (Exception e) {
                                        }
                                    }
                                    messageIdSet.add(messageId);
                                }
                            }
                        }
                        jScrollPane1.getVerticalScrollBar().setValue(jScrollPane1.getVerticalScrollBar().getMaximum());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        chatThread.start();
    }

    public void initChatField() {
        jTextField1.setText("/nick please_enter_new_nick_name");
        jTextField1.requestFocus();
        jTextField1.select(6, jTextField1.getText().length());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        org.apache.log4j.BasicConfigurator.configure();
        UI ui = (new UI());
        if (args.length > 0) {
            ui.game.setServerLocation(args[0]);
        }
        if (args.length > 1) {
            ui.game.setAssetServerLocation(args[1]);
        }
        if (args.length > 2) {
            ui.game.setRoomName(args[2]);
        }
        if (args.length > 3) {
            ui.game.setSession(args[3]);
        }
        System.out.println("Number of arguments: " + args.length);
        if (args.length > 5) {
            System.out.println("Creating facebook object");
            ui.game.setFacebookClient(new EnvFacebookClient(args[5], args[4]));
        }
        ui.setPreferredSize(new java.awt.Dimension(800, 600));
        ArrayList<String> roomNames = new ArrayList<String>(ui.game.getPredefinedRooms());
        roomNames.add(0, " ");
        ui.jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(roomNames.toArray()));
        ui.setVisible(true);
        ui.receiveChatFromServer();
        ui.sendChatToServer();
        ui.initChatField();
        ui.game.setUi(ui);
        ui.addChatMessage("Welcome. ");
        ui.addChatMessage("Click on the 3D window to move your avatar.");
        ui.game.play();
    }

    private java.awt.Canvas canvas1;

    private javax.swing.JEditorPane chatArea;

    private javax.swing.JLabel info;

    private javax.swing.JButton jButton1;

    private javax.swing.JComboBox jComboBox1;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JPanel jPanel3;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JTextField jTextField1;

    private javax.swing.JTextArea users;
}
