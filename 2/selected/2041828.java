package org.xmlcml.cml.element;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.net.URL;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import nu.xom.Document;
import nu.xom.Element;
import nu.xom.Elements;
import nu.xom.Node;
import nu.xom.ParsingException;
import nu.xom.ValidityException;
import org.xmlcml.cml.attribute.GenericDictionaryMap;
import org.xmlcml.cml.base.CMLBuilder;
import org.xmlcml.cml.base.CMLElement;
import org.xmlcml.cml.base.CMLElements;
import org.xmlcml.cml.base.CMLException;
import org.xmlcml.cml.base.CMLRuntimeException;
import org.xmlcml.cml.interfacex.GenericDictionary;
import org.xmlcml.cml.interfacex.GenericEntry;
import org.xmlcml.cml.map.NamespaceToUnitListMap;

/**
 * A container for several unitType entries.
 *
 *
 * Usually forms the complete unitTypes dictionary \n(along with metadata).
 * Note: unitTypes used to be held under unitList, but\n this was complicated to
 * implement and unitTypeList makes a clean separation.\n
 *
 * user-modifiable class autogenerated from schema if no class exists use as a
 * shell which can be edited the autogeneration software will not overwrite an
 * existing class file
 *
 */
public class CMLUnitTypeList extends AbstractUnitTypeList implements GenericDictionary {

    /** namespaced element name.*/
    public static final String NS = C_E + TAG;

    Map<String, CMLUnitType> unitTypeMap;

    /**
     * unitListMap associated with this unitList. allows resolution of SIUnits,
     * etc.
     */
    NamespaceToUnitListMap unitListMap = null;

    CMLUnitList siUnitList;

    /**
     * must give simple documentation.
     *
     */
    public CMLUnitTypeList() {
    }

    /**
     * must give simple documentation.
     *
     * @param old
     *            CMLUnitTypeList to copy
     */
    public CMLUnitTypeList(CMLUnitTypeList old) {
        super((AbstractUnitTypeList) old);
    }

    /**
     * copy node .
     *
     * @return Node
     */
    public Node copy() {
        CMLUnitTypeList unitTypeList = new CMLUnitTypeList(this);
        unitTypeList.unitTypeMap = this.unitTypeMap;
        unitTypeList.unitListMap = this.unitListMap;
        unitTypeList.siUnitList = this.siUnitList;
        return unitTypeList;
    }

    /**
     * create new instance in context of parent, overridable by subclasses.
     *
     * @param parent
     *            parent of element to be constructed (ignored by default)
     * @return CMLUnitTypeList
     */
    public CMLElement makeElementInContext(Element parent) {
        return new CMLUnitTypeList();
    }

    /**
     * get Entry by id.
     *
     * @deprecated inherited method; use getUnit instead
     * @param id the entryId (null if absent)
     * @return entry
     */
    public GenericEntry getGenericEntry(String id) {
        return getUnitType(id);
    }

    /**
     * index entries by id.
     *
     */
    public void indexEntries() {
        Elements unitNodes = this.getChildCMLElements(CMLUnitType.TAG);
        unitTypeMap = new HashMap<String, CMLUnitType>();
        for (int i = 0; i < unitNodes.size(); i++) {
            CMLUnitType unitType = (CMLUnitType) unitNodes.get(i);
            String id = unitType.getId();
            if (id != null) {
                unitTypeMap.put(id, unitType);
            }
        }
    }

    /**
     * creates unitTypeList from file;
     *
     * @param file file to create from
     * @return the unitTypeList or null
     * @throws IOException
     * @throws CMLException if file is not a well-formed unitTypeList
     */
    public static CMLUnitTypeList createUnitTypeList(File file) throws IOException, CMLException {
        return createUnitTypeList(file.toURL());
    }

    /** creates unitTypeList from inoputStreamContainer;
     *
     * @param url
     * @return the unitTypeList or null
     * @throws IOException
     * @throws CMLException if file is not a well-formed unitTypeList
     */
    public static CMLUnitTypeList createUnitTypeList(URL url) throws IOException, CMLException {
        Document dictDoc = null;
        InputStream in = null;
        try {
            in = url.openStream();
            dictDoc = new CMLBuilder().build(in);
        } catch (NullPointerException e) {
            e.printStackTrace();
            throw new CMLException("NULL " + e.getMessage() + S_SLASH + e.getCause() + " in " + url);
        } catch (ValidityException e) {
            throw new CMLException(S_EMPTY + e.getMessage() + S_SLASH + e.getCause() + " in " + url);
        } catch (ParsingException e) {
            throw new CMLException("PARSE " + S_EMPTY + e.getMessage() + " in " + url);
        } finally {
            try {
                in.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        CMLUnitTypeList dt = null;
        if (dictDoc != null) {
            Element root = dictDoc.getRootElement();
            if (root instanceof CMLUnitTypeList) {
                dt = new CMLUnitTypeList((CMLUnitTypeList) root);
            } else {
            }
        }
        if (dt != null) {
            dt.indexEntries();
        }
        return dt;
    }

    /**
     * add new unitType.
     *
     * @param unitType to add
     * @throws CMLRuntimeException unitType already present.
     */
    public void addUnitType(CMLUnitType unitType) throws CMLRuntimeException {
        String id = unitType.getId();
        if (id == null) {
            throw new CMLRuntimeException("UnitType has no id");
        }
        if (getUnitType(id) != null) {
            throw new CMLRuntimeException("UnitType for " + id + " already present");
        }
        unitTypeMap.put(id, unitType);
        this.appendChild(unitType);
    }

    /**
     * remove UnitType.
     *
     * @param unitType
     *            to remove, no action if not present
     *
     */
    public void removeUnitType(CMLUnitType unitType) {
        String id = unitType.getId();
        if (id != null) {
            if (this.getUnitType(id) != null) {
                unitTypeMap.remove(unitType);
                unitType.detach();
            }
        }
    }

    /**
     * get UnitType by id.
     *
     * @param id
     *            the entryId (null if absent)
     * @return entry
     */
    public CMLUnitType getUnitType(String id) {
        this.indexEntries();
        return (unitTypeMap == null) ? null : unitTypeMap.get(id);
    }

    /** creates a unitList dictionary from a file. the file must contain a root
     * unitList element with unit children
     *
     * @param file
     * @throws IOException
     * @return dictionary of type CMLUnitList
     */
    public GenericDictionary createDictionary(File file) throws IOException {
        return createDictionary(file.toURL());
    }

    /** creates a unitList dictionary from a file. the file must contain a root
     * unitList element with unit children
     *
     * @param url
     * @throws IOException
     * @return dictionary of type CMLUnitList
     */
    public GenericDictionary createDictionary(URL url) throws IOException {
        CMLUnitTypeList dt = null;
        Document dictDoc = CMLDictionary.createDictionary0(url);
        if (dictDoc != null) {
            Element root = dictDoc.getRootElement();
            if (root instanceof CMLUnitTypeList) {
                dt = new CMLUnitTypeList((CMLUnitTypeList) root);
            } else {
                throw new CMLRuntimeException("Expected CMLUnitTypeList root element in (" + url + "), found: " + root.getClass().getName() + S_SLASH + root.getLocalName());
            }
        }
        if (dt != null) {
            dt.indexEntries();
        }
        return dt;
    }

    /** create dictionaryMap.
     *
     * @param file
     * @param useSubdirectories
     * @return unitListMap
     */
    public GenericDictionaryMap createDictionaryMap(File file, boolean useSubdirectories) {
        return null;
    }

    /**
     * writes units dictionary as HTML.
     *
     * @param w
     *            writer
     * @throws IOException
     */
    public void writeHTML(Writer w) throws IOException {
        CMLElements<CMLUnitType> unitTypes = this.getUnitTypeElements();
        writeHTMLHeader(w);
        Map<String, CMLUnitType> idMap = new HashMap<String, CMLUnitType>();
        for (CMLUnitType unitType : unitTypes) {
            idMap.put(unitType.getId(), unitType);
        }
        String[] ss = idMap.keySet().toArray(new String[0]);
        Arrays.sort(ss);
        for (String s : ss) {
            CMLUnitType unitType = idMap.get(s);
            w.write("<tr>");
            unitType.writeHTML(w);
            w.write("</tr>");
        }
        writeHTMLFooter(w);
    }

    private void writeHTMLHeader(Writer w) throws IOException {
        w.write("<html>\n");
        w.write("<h1> Units dictionary: " + this.getTitle() + "</h1>");
        w.write("<p>namespace: <b>" + this.getNamespace() + "</b></p>\n");
        w.write("<table border='1'>\n");
        CMLUnit.writeHTMLTableHeader(w);
    }

    private void writeHTMLFooter(Writer w) throws IOException {
        w.write("</table>\n");
        w.write("</html>\n");
    }

    /**
     * associate SI UnitList with this.
     *
     * @param siUnitList
     *            to associate
     */
    public void setSIUnitList(CMLUnitList siUnitList) {
        this.siUnitList = siUnitList;
    }

    /**
     * gets associated SI unitList. requires eitehr siUnitList or unitListMap to
     * be set uses siNamespace and unitListMap to find SI units dictionary. if
     * found, sets the SIUnitList to this.
     *
     * @return the unitList
     */
    public CMLUnitList getSIUnitList() {
        if (siUnitList == null) {
            String siNamespace = this.getSiNamespace();
            if (siNamespace != null) {
                if (unitListMap == null) {
                    throw new CMLRuntimeException("Requires unitListMap ");
                }
                siUnitList = (CMLUnitList) unitListMap.getDictionary(siNamespace);
                if (siUnitList != null) {
                    this.setSIUnitList(siUnitList);
                }
            }
        }
        return siUnitList;
    }

    /**
     * associates a unitListMap with this unitList. necessary to resolve
     * parentSI and unitTypes.
     *
     * @param unitListMap of namespace->unitList
     */
    public void setUnitListMap(NamespaceToUnitListMap unitListMap) {
        this.unitListMap = unitListMap;
    }

    /**
     * gets unitListMap associated with this unitList. necessary to resolve
     * parentSI and unitTypes.
     *
     * @return unitListMap of namespace->unitList or null
     */
    public NamespaceToUnitListMap getUnitListMap() {
        return this.unitListMap;
    }

    /**
     * get number of child CMLUnitType.
     *
     * @return number of unitTypes
     */
    public int size() {
        return this.getUnitTypeElements().size();
    }
}
