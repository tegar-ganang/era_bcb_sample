package net.sourceforge.epoint.swing;

import net.sourceforge.epoint.pgp.*;
import net.sourceforge.epoint.io.*;
import java.security.*;
import java.security.interfaces.*;
import javax.swing.*;
import java.awt.Color;
import java.io.*;
import java.net.*;
import java.util.*;

/**
 * Generates an OpenPGP signature key pair for web registration
 *
 * @see PGPRegistrationConfirm
 * @author <a href="mailto:nagydani@users.sourceforge.net">Daniel A. Nagy</a>
 */
public class PGPRegistration extends javax.swing.JApplet {

    /** Initializes the applet PGPRegistration */
    public void init() {
        if (getParameter("bg") != null) setBackground(Color.decode(getParameter("bg")));
        if (getParameter("fg") != null) setForeground(Color.decode(getParameter("fg")));
        initComponents();
        JTextField[] r = { emailField, nameField, langField, pw1Field, pw2Field };
        fields = r;
        if (getParameter("email") != null) emailLabel.setText(getParameter("email"));
        if (getParameter("name") != null) nameLabel.setText(getParameter("name"));
        if (getParameter("lang") != null) langLabel.setText(getParameter("lang"));
        if (getParameter("pw1") != null) pw1Label.setText(getParameter("pw2"));
        if (getParameter("pw2") != null) pw2Label.setText(getParameter("pw2"));
        if (getParameter("reset") != null) resetButton.setText(getParameter("reset"));
        if (getParameter("ok") != null) okButton.setText(getParameter("ok"));
        if (getParameter("langpref") != null) {
            String[] lang = getParameter("langpref").toUpperCase().replaceAll(";Q=[0-9\\.]*", "").replaceAll("-[a-zA-Z][a-zA-Z]", "").split("[ ]*,[ ]*");
            String lp = "";
            int i;
            for (i = 0; i < lang.length - 1; i++) lp += lang[i] + ",";
            lp += lang[lang.length - 1];
            langField.setText(lp);
        }
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        background = new javax.swing.JPanel();
        emailLabel = new javax.swing.JLabel();
        emailField = new net.sourceforge.epoint.swing.EMailField();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        langLabel = new javax.swing.JLabel();
        langField = new net.sourceforge.epoint.swing.ISO639Field();
        pw1Label = new javax.swing.JLabel();
        pw1Field = new javax.swing.JPasswordField();
        pw2Label = new javax.swing.JLabel();
        pw2Field = new javax.swing.JPasswordField();
        jPanel1 = new javax.swing.JPanel();
        resetButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        background.setLayout(new java.awt.GridBagLayout());
        background.setBackground(getBackground());
        background.setForeground(getForeground());
        emailLabel.setForeground(java.awt.Color.red);
        emailLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        emailLabel.setText("Email:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        background.add(emailLabel, gridBagConstraints);
        emailField.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        background.add(emailField, gridBagConstraints);
        nameLabel.setForeground(background.getForeground());
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nameLabel.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        background.add(nameLabel, gridBagConstraints);
        nameField.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        background.add(nameField, gridBagConstraints);
        langLabel.setForeground(background.getForeground());
        langLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        langLabel.setText("Languages:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        background.add(langLabel, gridBagConstraints);
        langField.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                langFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        background.add(langField, gridBagConstraints);
        pw1Label.setForeground(java.awt.Color.red);
        pw1Label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pw1Label.setText("Passphrase:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        background.add(pw1Label, gridBagConstraints);
        pw1Field.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pw1FieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        background.add(pw1Field, gridBagConstraints);
        pw2Label.setForeground(java.awt.Color.red);
        pw2Label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pw2Label.setText("Repeat:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        background.add(pw2Label, gridBagConstraints);
        pw2Field.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pw2FieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        background.add(pw2Field, gridBagConstraints);
        jPanel1.setBackground(background.getBackground());
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        jPanel1.add(resetButton);
        okButton.setText("Register");
        okButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        okButton.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                okButtonFocusLost(evt);
            }
        });
        jPanel1.add(okButton);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        background.add(jPanel1, gridBagConstraints);
        getContentPane().add(background, java.awt.BorderLayout.CENTER);
    }

    private void okButtonFocusLost(java.awt.event.FocusEvent evt) {
        getRootPane().setDefaultButton(null);
    }

    private void langFieldActionPerformed(java.awt.event.ActionEvent evt) {
        if (langField.isLegitimate()) pw1Field.requestFocus(); else langField.selectAll();
    }

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int i = fields.length;
        while (i-- > 0) fields[i].setText("");
        emailField.requestFocus();
    }

    private void pw2FieldActionPerformed(java.awt.event.ActionEvent evt) {
        if (new String(pw2Field.getPassword()).equals(new String(pw1Field.getPassword()))) {
            getRootPane().setDefaultButton(okButton);
            okButton.requestFocus();
        } else {
            pw1Field.setText("");
            pw2Field.setText("");
            pw1Field.requestFocus();
        }
    }

    private void pw1FieldActionPerformed(java.awt.event.ActionEvent evt) {
        pw2Field.setText("");
        pw2Field.requestFocus();
    }

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {
        langField.requestFocus();
    }

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (!emailField.isLegitimate() || (emailField.getText().length() == 0)) {
            emailField.selectAll();
            emailField.requestFocus();
            return;
        }
        if (!langField.isLegitimate()) {
            langField.selectAll();
            langField.requestFocus();
            return;
        }
        String pass = new String(pw1Field.getPassword());
        if (!new String(pw2Field.getPassword()).equals(pass)) {
            pw1Field.setText("");
            pw2Field.setText("");
            pw1Field.requestFocus();
            return;
        }
        try {
            String[] lang = langField.getText().toUpperCase().split("[ ]*,[ ]*");
            String uid = "";
            if (nameField.getText().length() > 0) uid += "\"" + nameField.getText() + "\" ";
            if (lang.length > 1) {
                uid += "(";
                int i;
                for (i = 0; i < lang.length - 1; i++) uid += lang[i] + ",";
                uid += lang[lang.length - 1] + ") ";
            } else if (lang.length == 1) {
                if (lang[0].length() > 0) uid += "(" + lang[0] + ")";
            }
            uid += "<" + emailField.getText() + ">";
            String prng = getParameter("prng");
            if (prng == null) prng = "SHA1PRNG";
            SecureRandom rand = SecureRandom.getInstance(prng);
            String algo = getParameter("algo");
            if (algo == null) algo = "DSA";
            int bits = getParameter("bits") == null ? 1024 : Integer.parseInt(getParameter("bits"));
            KeyPairGenerator g = KeyPairGenerator.getInstance(algo);
            if (algo.equals("DSA")) ((DSAKeyPairGenerator) g).initialize(bits, true, rand); else g.initialize(bits, rand);
            ByteArrayOutputStream sk = new ByteArrayOutputStream();
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            PGPPrivateKey.write(g.genKeyPair(), new String(pw1Field.getPassword()), sk);
            SECKEYPacket kp = new SECKEYPacket(new ByteArrayInputStream(sk.toByteArray()), pass);
            PacketHeader.write(true, (byte) 0, 5, os);
            os.write(SIGNATUREPacket.SUB_CREATION);
            long date = kp.getDate().getTime() / 1000l;
            os.write((int) ((date >> 24) & 0xFF));
            os.write((int) ((date >> 16) & 0xFF));
            os.write((int) ((date >> 8) & 0xFF));
            os.write((int) (date & 0xFF));
            PacketHeader.write(true, (byte) 0, 2, os);
            os.write(SIGNATUREPacket.SUB_PRIMARY);
            os.write(0xFF);
            PacketHeader.write(true, (byte) 0, 2, os);
            os.write(SIGNATUREPacket.SUB_FLAGS);
            os.write(0x03);
            PacketHeader.write(true, (byte) 0, 2, os);
            os.write(SIGNATUREPacket.SUB_SYMMETRIC);
            os.write(Algo.DESEDE);
            PacketHeader.write(true, (byte) 0, 3, os);
            os.write(SIGNATUREPacket.SUB_HASH);
            os.write(Algo.SHA1);
            os.write(Algo.MD5);
            PacketHeader.write(true, (byte) 0, 2, os);
            os.write(SIGNATUREPacket.SUB_COMPRESSION);
            os.write(COMPRESSEDPacket.ZLIB);
            byte[] subpk = os.toByteArray();
            os.reset();
            PacketHeader.write(true, (byte) 0, 9, os);
            os.write(16);
            os.write(kp.getKeyID());
            PGPUserID.write(uid, sk);
            new PGPSignature(kp).update(kp.toByteArrayPUBKEY()).update(PGPUserID.cHead(uid.getBytes("UTF-8"))).update(uid.getBytes("UTF8")).write(SIGNATUREPacket.POSITIVEUID, subpk, os.toByteArray(), sk);
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            pw.println(Armor.BEGIN + Armor.SECKEY + "-----\n" + Armor.VERSION);
            Armor.write(pw, sk.toByteArray(), 0, sk.size());
            pw.println(Armor.END + Armor.SECKEY + "-----");
            pw.close();
            if (getParameter("action") != null) {
                URL url = new URL(getParameter("action"));
                HttpURLConnection c = (HttpURLConnection) url.openConnection();
                c.setRequestMethod("POST");
                c.setDoOutput(true);
                pw = new PrintWriter(c.getOutputStream());
                pw.println("key=" + URLEncoder.encode(sw.toString(), "UTF-8"));
                pw.close();
                InputStream in = c.getInputStream();
                int i;
                while ((i = in.available()) > 0) in.read(new byte[i]);
                in.close();
            } else System.out.println(sw.toString());
            if (getParameter("next") != null) {
                getAppletContext().showDocument(new URL(getParameter("next")));
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }

    private void emailFieldActionPerformed(java.awt.event.ActionEvent evt) {
        if (emailField.isLegitimate() && (emailField.getText().length() > 0)) nameField.requestFocus(); else emailField.selectAll();
    }

    private javax.swing.JPanel background;

    private net.sourceforge.epoint.swing.EMailField emailField;

    private javax.swing.JLabel emailLabel;

    private javax.swing.JPanel jPanel1;

    private net.sourceforge.epoint.swing.ISO639Field langField;

    private javax.swing.JLabel langLabel;

    private javax.swing.JTextField nameField;

    private javax.swing.JLabel nameLabel;

    private javax.swing.JButton okButton;

    private javax.swing.JPasswordField pw1Field;

    private javax.swing.JLabel pw1Label;

    private javax.swing.JPasswordField pw2Field;

    private javax.swing.JLabel pw2Label;

    private javax.swing.JButton resetButton;

    private JTextField[] fields;
}
