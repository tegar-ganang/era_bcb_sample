/*
 * CheckUpdates.java
 *
 * Created on May 28, 2006, 6:11 PM
 */

package tools;

import core.Lesson;
import gui.WordsListPanel;
import gui.mainframe;
import java.awt.Cursor;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import util.BareBonesBrowserLaunch;
import util.ToolsInterface;

/**
 *
 * @author  reza
 */
public class CheckUpdates extends javax.swing.JFrame  implements ToolsInterface  {
    
    /** Creates new form CheckUpdates */
    public mainframe MF;
    public boolean hasBeta,hasStable;
    public String BetaURL,StableURL;
    public CheckUpdates() {
        hasBeta=false;
        hasStable=false;
        initComponents();
        
          boolean exist=false;
        try
        {
            exist=Preferences.userRoot().nodeExists("/memorizewords/tools/CheckUpdates");
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
        if (exist)
        {
            int x,y,w,h;
            Preferences reg=Preferences.userRoot().node("/memorizewords/tools/CheckUpdates");
            StableCHK.setSelected( reg.getBoolean("StableChk",true));
             BetaCHK.setSelected( reg.getBoolean("BetaChk",true));
            
           
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        stableST = new javax.swing.JLabel();
        BetaST = new javax.swing.JLabel();
        StableCHK = new javax.swing.JCheckBox();
        BetaCHK = new javax.swing.JCheckBox();
        CheckBT = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setTitle("Check for updates");
        stableST.setText("jLabel2");
        stableST.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        stableST.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stableSTMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                stableSTMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                stableSTMouseExited(evt);
            }
        });

        BetaST.setText("jLabel3");
        BetaST.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        BetaST.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BetaSTMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BetaSTMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BetaSTMouseExited(evt);
            }
        });

        StableCHK.setSelected(true);
        StableCHK.setText("Check for Stable versions");
        StableCHK.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        StableCHK.setMargin(new java.awt.Insets(0, 0, 0, 0));
        StableCHK.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                StateChanged(evt);
            }
        });

        BetaCHK.setSelected(true);
        BetaCHK.setText("Check for Beta versions");
        BetaCHK.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BetaCHK.setMargin(new java.awt.Insets(0, 0, 0, 0));
        BetaCHK.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                StateChanged(evt);
            }
        });

        CheckBT.setText("Check Now");
        CheckBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBTActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(stableST, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
                    .add(BetaST, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 609, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, CheckBT)
                    .add(BetaCHK)
                    .add(StableCHK))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(StableCHK)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(stableST, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(BetaCHK)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(BetaST, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(CheckBT)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BetaSTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BetaSTMouseClicked
if (hasBeta)
        BareBonesBrowserLaunch.openURL(BetaURL);
    }//GEN-LAST:event_BetaSTMouseClicked

    private void stableSTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stableSTMouseClicked
if (hasStable)
        BareBonesBrowserLaunch.openURL(StableURL);
    }//GEN-LAST:event_stableSTMouseClicked

    private void stableSTMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stableSTMouseExited
stableST.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_stableSTMouseExited

    private void stableSTMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stableSTMouseEntered
if (hasStable)
        stableST.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_stableSTMouseEntered

    private void BetaSTMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BetaSTMouseExited
BetaST.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_BetaSTMouseExited

    private void BetaSTMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BetaSTMouseEntered
 if (hasBeta)
        BetaST.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_BetaSTMouseEntered

    private void CheckBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBTActionPerformed
        hasBeta=false;
        hasStable=false;
        checkThrd chkTHRD = new checkThrd();
        chkTHRD.MF= MF;
        chkTHRD.checkupdates= this;
        CheckBT.setEnabled(false);
        chkTHRD.start();
    }//GEN-LAST:event_CheckBTActionPerformed

    private void StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_StateChanged
        Preferences reg=Preferences.userRoot().node("/memorizewords/tools/CheckUpdates");
        reg.putBoolean("StableChk",StableCHK.isSelected());
        reg.putBoolean("BetaChk",BetaCHK.isSelected()) ;       
          try {
                reg.flush();
            } catch (BackingStoreException ex) {
                ex.printStackTrace();
            }
    }//GEN-LAST:event_StateChanged
    
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JCheckBox BetaCHK;
    javax.swing.JLabel BetaST;
    javax.swing.JButton CheckBT;
    javax.swing.JCheckBox StableCHK;
    private javax.swing.JLabel jLabel1;
    javax.swing.JLabel stableST;
    // End of variables declaration//GEN-END:variables

    public String getMenuName() {
        return "Check updates";
    }

    public void setLesson(Lesson lesson) {
    }

    public void setMainframe(mainframe mf) {
       MF=mf;
       this.setLocation(mf.getLocation());
    }

    public void setWordsListPanel(WordsListPanel WLP) {
    }

    public void run() {
        this.setVisible(true);
    }
    public void runOnce() {
          hasBeta=false;
        hasStable=false;
           checkThrd chkTHRD = new checkThrd();
        chkTHRD.MF= MF;
        chkTHRD.checkupdates= this;
        CheckBT.setEnabled(false);
        chkTHRD.start();
    }
    
    
  
}
class checkThrd implements Runnable
{
    private Thread thisthread;
    public mainframe MF;
    public CheckUpdates checkupdates;
    public void run() {
        checkupdates.BetaST.setText("");
        checkupdates.stableST.setText("");
        
        String[] s = new String[7];
       int i=0;
        try {
            
            URL url = new URL("http://memorize-words.sourceforge.net/latest.txt");
            
            BufferedReader in = new BufferedReader(new
                    InputStreamReader(url.openStream()));
            String str;
           
            while (((str = in.readLine()) != null)&&(i<7)) {
                
                s[i]=str;
                i++;
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
       if (i<5) 
       { checkupdates.CheckBT.setEnabled(true);
           return;
       }
       //S[0]=latest Beta version
       //S[1]=latest Stable version
       //s[2]=Beta version download path
       //s[3]=Stable version download path
       //s[4]= Beta name
       //s[5]=Stable name
       boolean updated=false;
       if ((MF.CurVersion<Integer.parseInt(s[0]))&&(checkupdates.BetaCHK.isSelected()))
       {
       checkupdates.BetaST.setText("<HTML>A newer BETA version (<b>"+s[4]+"</b>) is available at<BR> <a href=''>"+s[2]+"</a></HTML>");
       updated=true;
       checkupdates.hasBeta=true;
       checkupdates.BetaURL=s[2];
       }else
           checkupdates.BetaST.setText("");
           
       if ((MF.CurVersion<Integer.parseInt(s[1]))&&(checkupdates.StableCHK.isSelected()))
       {
       checkupdates.stableST.setText("<HTML>A newer STABLE version (<b>"+s[5]+"</b>) is available at<BR> <a href=''>"+s[3]+"</a></HTML>");
       updated=true;
       checkupdates.hasStable=true;
       checkupdates.StableURL=s[3];
       }
       else
           checkupdates.stableST.setText("");
       
       if (updated)
           checkupdates.setVisible(true);
       checkupdates.CheckBT.setEnabled(true);
       // "A newer stable version (memorize-words 1-2-2) is available at http://"
       //   MF.CurVersion;
    }
    public void start(){
        
          thisthread = new Thread(this);
      
        thisthread.start();
        
    }
}
