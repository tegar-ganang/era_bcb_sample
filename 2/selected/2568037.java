package org.das2.datasource;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.text.DefaultEditorKit;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.das2.DasApplication;
import org.das2.DasException;
import org.das2.client.DasServer;
import org.das2.datum.Datum;
import org.das2.datum.DatumRange;
import org.das2.datum.DatumRangeUtil;
import org.das2.datum.TimeUtil;
import org.das2.system.RequestProcessor;
import org.das2.util.monitor.ProgressMonitor;
import org.virbo.datasource.AutoplotSettings;
import org.virbo.datasource.DataSetURI;
import org.virbo.datasource.DataSourceEditorPanel;
import org.virbo.datasource.URISplit;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 *
 * @author jbf
 */
public class Das2ServerDataSourceEditorPanel extends javax.swing.JPanel implements DataSourceEditorPanel {

    private static final String EXAMPLE_TIME_RANGES = "Example Time Ranges";

    private String DEFAULT_TIMERANGE = "2001-01-01";

    /** Creates new form Das2ServerDataSourceEditorPanel */
    public Das2ServerDataSourceEditorPanel() {
        initComponents();
    }

    /**
     * list of servers we know about
     */
    List<String> d2ss;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        das2ServerComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        timeRangeTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ReaderParamsTextArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        tcaTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tcaItem = new javax.swing.JTextField();
        viewDsdfButton = new javax.swing.JButton();
        validRangeLabel = new javax.swing.JLabel();
        discoveryCb = new javax.swing.JCheckBox();
        examplesComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        das2ServerComboBox.setEditable(true);
        das2ServerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "http://www-pw.physics.uiowa.edu/das/das2Server", "http://cassini.physics.uiowa.edu/das/das2Server" }));
        das2ServerComboBox.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                das2ServerComboBoxActionPerformed(evt);
            }
        });
        jLabel1.setText("Das2 Server URL:");
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Loading DataSets List...");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {

            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);
        jLabel2.setText("Data Set Id:");
        timeRangeTextField.setText(DEFAULT_TIMERANGE);
        jLabel3.setText("Time Range:");
        jLabel4.setText("Reader Parameters:");
        jLabel4.setToolTipText("Special parameters for the reader that implements the data source.  ");
        ReaderParamsTextArea.setColumns(20);
        ReaderParamsTextArea.setRows(5);
        jScrollPane2.setViewportView(ReaderParamsTextArea);
        jLabel5.setText("TCA Interval (sec):");
        jLabel5.setToolTipText("<html>\nInterval (in seconds) to use for TCA (ephemeris) data.<br>\nLeave blank for most datasets.<br>\n</html>\n");
        tcaTextField.setText(" ");
        tcaTextField.setToolTipText("<html> Interval (in seconds) to use for TCA (ephemeris) data.<br> Leave blank for most datasets.<br> </html> ");
        jLabel6.setText("TCA Item:");
        jLabel6.setToolTipText("The optional item number for TCAs.");
        tcaItem.setToolTipText("The optional item number for TCAs.");
        viewDsdfButton.setText("View DSDF");
        viewDsdfButton.setToolTipText("View the DSDF configuration file on the server");
        viewDsdfButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDsdfButtonActionPerformed(evt);
            }
        });
        validRangeLabel.setFont(new java.awt.Font("DejaVu LGC Sans", 0, 10));
        validRangeLabel.setText("<html><em>no valid range for dataset provided</em></html>");
        discoveryCb.setText("require example time");
        discoveryCb.setToolTipText("Show only datasets that have identified example times.  These should be a higher quality, and can be tested by a machine.");
        discoveryCb.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discoveryCbActionPerformed(evt);
            }
        });
        examplesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Example Time Ranges", "" }));
        examplesComboBox.setToolTipText("Example times specified in the data set descriptor file");
        examplesComboBox.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examplesComboBoxActionPerformed(evt);
            }
        });
        jLabel7.setText("Description:");
        jLabel7.setToolTipText("Description provided by the server (in its dsdf file)");
        descriptionLabel.setText(" ");
        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(24, 24, 24).add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)).add(layout.createSequentialGroup().addContainerGap().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE).add(das2ServerComboBox, 0, 416, Short.MAX_VALUE).add(jLabel1).add(layout.createSequentialGroup().add(jLabel2).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 181, Short.MAX_VALUE).add(discoveryCb)))).add(layout.createSequentialGroup().addContainerGap().add(jLabel5).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(tcaTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jLabel6).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(tcaItem, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(layout.createSequentialGroup().addContainerGap().add(jLabel4)).add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup().add(33, 33, 33).add(validRangeLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(examplesComboBox, 0, 147, Short.MAX_VALUE)).add(layout.createSequentialGroup().addContainerGap().add(jLabel7).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(descriptionLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)).add(layout.createSequentialGroup().addContainerGap().add(jLabel3).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(timeRangeTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(viewDsdfButton))).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().addContainerGap().add(jLabel1).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(das2ServerComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(5, 5, 5).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel2).add(discoveryCb)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel7).add(descriptionLabel)).add(7, 7, 7).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel3).add(timeRangeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(viewDsdfButton)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(validRangeLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(examplesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jLabel4).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel5).add(tcaTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(jLabel6).add(tcaItem, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap()));
    }

    /**
     * this is called off the event thread for the web transaction, then hop back on it to populate the GUI.
     * @param url
     */
    private void updateDataSetSelected(URL url) {
        InputStream in = null;
        try {
            in = url.openStream();
            StringBuilder sb = new StringBuilder();
            int by = in.read();
            while (by != -1) {
                sb.append((char) by);
                by = in.read();
            }
            in.close();
            String s = sb.toString();
            final int packetTagLength = 10;
            int contentLength = Integer.parseInt(s.substring(4, packetTagLength));
            String sxml = s.substring(packetTagLength, packetTagLength + contentLength);
            Reader xin = new BufferedReader(new StringReader(sxml));
            DocumentBuilder builder;
            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            InputSource source = new InputSource(xin);
            final Document document = builder.parse(source);
            Runnable run = new Runnable() {

                public void run() {
                    try {
                        XPathFactory factory = XPathFactory.newInstance();
                        XPath xpath = (XPath) factory.newXPath();
                        String curr = Das2ServerDataSourceEditorPanel.this.timeRangeTextField.getText();
                        Node description = (Node) xpath.evaluate("/stream/properties/@description", document, XPathConstants.NODE);
                        descriptionLabel.setText(description == null ? "" : description.getNodeValue());
                        Node exampleRange = (Node) xpath.evaluate("/stream/properties/@exampleRange", document, XPathConstants.NODE);
                        if (exampleRange != null && curr.equals(DEFAULT_TIMERANGE)) {
                            Das2ServerDataSourceEditorPanel.this.timeRangeTextField.setText(exampleRange.getNodeValue());
                        }
                        if (exampleRange != null) {
                            DefaultComboBoxModel model = new DefaultComboBoxModel(new String[] { "Example Time Ranges", exampleRange.getNodeValue() });
                            Das2ServerDataSourceEditorPanel.this.examplesComboBox.setModel(model);
                            Das2ServerDataSourceEditorPanel.this.examplesComboBox.setEnabled(true);
                        } else {
                            DefaultComboBoxModel model = new DefaultComboBoxModel(new String[] { "No example time ranges found..." });
                            Das2ServerDataSourceEditorPanel.this.examplesComboBox.setModel(model);
                            Das2ServerDataSourceEditorPanel.this.examplesComboBox.setEnabled(false);
                        }
                        if (exampleRange == null) {
                            exampleRange = (Node) xpath.evaluate("/stream/properties/@x_range", document, XPathConstants.NODE);
                            if (exampleRange != null && curr.equals(DEFAULT_TIMERANGE)) {
                                Das2ServerDataSourceEditorPanel.this.timeRangeTextField.setText(exampleRange.getNodeValue());
                            }
                        }
                        Node validRange = (Node) xpath.evaluate("/stream/properties/@validRange", document, XPathConstants.NODE);
                        if (validRange != null) {
                            Das2ServerDataSourceEditorPanel.this.validRangeLabel.setText("valid range: " + validRange.getNodeValue());
                        } else {
                            Das2ServerDataSourceEditorPanel.this.validRangeLabel.setText("<html><em>no valid range for dataset provided</em></html>");
                        }
                    } catch (XPathExpressionException ex) {
                        Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            SwingUtilities.invokeLater(run);
        } catch (SAXException ex) {
            JOptionPane.showMessageDialog(examplesComboBox, "Unable to parse dsdf: " + ex.getMessage());
            Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            JOptionPane.showMessageDialog(examplesComboBox, "Unable to parse dsdf: " + ex.getMessage());
            Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            JOptionPane.showMessageDialog(examplesComboBox, "Unable to parse dsdf: " + ex.getMessage());
            Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(examplesComboBox, "Unable to parse dsdf: " + ex.getMessage());
            Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (in != null) in.close();
            } catch (IOException ex) {
                Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {
        TreePath p = evt.getPath();
        TreeModel m = ((JTree) evt.getSource()).getModel();
        if (!m.isLeaf(p.getLastPathComponent())) {
            descriptionLabel.setText("");
            this.validRangeLabel.setText("<html><em>no dataset selected</em></html>");
            this.viewDsdfButton.setEnabled(false);
        } else {
            this.viewDsdfButton.setEnabled(true);
            this.validRangeLabel.setText("<html><em>retrieving dataset info...</em></html>");
            Object[] oo = p.getPath();
            String ds = String.valueOf(oo[1]);
            for (int i = 2; i < oo.length; i++) {
                ds = ds + "/" + oo[i];
            }
            String surl = oo[0] + "?server=dsdf&dataset=" + ds;
            try {
                final URL url = new URL(surl);
                RequestProcessor.invokeLater(new Runnable() {

                    public void run() {
                        updateDataSetSelected(url);
                    }
                });
            } catch (MalformedURLException ex) {
                Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showConfirmDialog(this, "Internal Error: " + ex.toString());
            }
        }
    }

    private void updateDas2ServersImmediately() {
        d2ss = listDas2Servers();
        das2ServerComboBox.setModel(new DefaultComboBoxModel(d2ss.toArray()));
        das2ServerComboBox.setSelectedItem(serverURL);
    }

    private List<String> listPeers(String suri) {
        String uri = suri + "?server=peers";
        List<String> result = new ArrayList();
        try {
            InputStream in = new URL(uri).openStream();
            DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            InputSource source = new InputSource(in);
            Document initialDocument = builder.parse(source);
            in.close();
            XPathFactory factory = XPathFactory.newInstance();
            XPath xpath = factory.newXPath();
            NodeList urls = (NodeList) xpath.evaluate("//das2server/peers/server/url/text()", initialDocument, XPathConstants.NODESET);
            for (int i = 0; i < urls.getLength(); i++) {
                result.add(urls.item(i).getNodeValue());
            }
            return result;
        } catch (Exception ex) {
            ex.printStackTrace();
            return new ArrayList();
        }
    }

    /**
     * add the default known servers, plus the ones we know about.
     */
    private List<String> listDas2Servers() {
        List<String> d2ss = new ArrayList();
        d2ss.add("http://www-pw.physics.uiowa.edu/das/das2Server");
        d2ss.add("http://cassini.physics.uiowa.edu/das/das2Server");
        File home = new File(AutoplotSettings.settings().resolveProperty(AutoplotSettings.PROP_AUTOPLOTDATA));
        File book = new File(home, "bookmarks");
        File hist = new File(book, "history.txt");
        System.err.println("reading recent datasources from " + hist.toString());
        if (!hist.exists()) return d2ss;
        try {
            String seek = "vap+das2server:";
            int ttaglen = 25;
            BufferedReader r = new BufferedReader(new FileReader(hist));
            String s = r.readLine();
            LinkedHashSet dss = new LinkedHashSet();
            while (s != null) {
                if (s.length() > ttaglen && s.substring(ttaglen).startsWith(seek)) {
                    int i = s.indexOf("?");
                    if (i == -1) i = s.length();
                    dss.add(s.substring(ttaglen + seek.length(), i));
                }
                s = r.readLine();
            }
            if (serverURL == null) {
                dss.addAll(listPeers("http://www-pw.physics.uiowa.edu/das/das2Server"));
            } else {
                dss.addAll(listPeers(serverURL));
            }
            d2ss.removeAll(dss);
            List<String> d2ssDiscoveryList = new ArrayList(dss);
            Collections.reverse(d2ssDiscoveryList);
            d2ssDiscoveryList.addAll(d2ss);
            d2ss = d2ssDiscoveryList;
        } catch (IOException ex) {
            JOptionPane.showConfirmDialog(examplesComboBox, "IOException when reading in " + hist);
        }
        return d2ss;
    }

    private void showDsdf(URL url) {
        InputStream in = null;
        try {
            in = url.openStream();
            StringBuilder sb = new StringBuilder();
            int by = in.read();
            while (by != -1) {
                sb.append((char) by);
                by = in.read();
            }
            in.close();
            String s = sb.toString();
            int contentLength = Integer.parseInt(s.substring(4, 10));
            String sxml = s.substring(10, 10 + contentLength);
            Reader xin = new BufferedReader(new StringReader(sxml));
            DocumentBuilder builder;
            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            InputSource source = new InputSource(xin);
            Document document = builder.parse(source);
            XPathFactory factory = XPathFactory.newInstance();
            XPath xpath = (XPath) factory.newXPath();
            NodeList o = (NodeList) xpath.evaluate("/stream/properties/@*", document, XPathConstants.NODESET);
            String result = "";
            for (int ii = 0; ii < o.getLength(); ii++) {
                result += "\n" + o.item(ii).getNodeName() + "  =  " + o.item(ii).getNodeValue();
            }
            in.close();
            final String fresult = result;
            Runnable run = new Runnable() {

                public void run() {
                    JTextArea area = new JTextArea();
                    area.setText(fresult);
                    area.setEditable(false);
                    final JPopupMenu copyMenu = new JPopupMenu();
                    copyMenu.add(new DefaultEditorKit.CopyAction()).setText("Copy");
                    area.addMouseListener(new MouseAdapter() {

                        @Override
                        public void mousePressed(MouseEvent e) {
                            if (e.isPopupTrigger()) copyMenu.show(e.getComponent(), e.getX(), e.getY());
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            if (e.isPopupTrigger()) copyMenu.show(e.getComponent(), e.getX(), e.getY());
                        }
                    });
                    JScrollPane sp = new JScrollPane(area, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
                    sp.setPreferredSize(new java.awt.Dimension(480, 480));
                    JOptionPane.showMessageDialog(Das2ServerDataSourceEditorPanel.this, sp);
                }
            };
            SwingUtilities.invokeLater(run);
        } catch (XPathExpressionException ex) {
            JOptionPane.showMessageDialog(examplesComboBox, "Unable to parse dsdf: " + ex.getMessage());
            Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            JOptionPane.showMessageDialog(examplesComboBox, "Unable to parse dsdf: " + ex.getMessage());
            Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            JOptionPane.showMessageDialog(examplesComboBox, "Unable to parse dsdf: " + ex.getMessage());
            Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(examplesComboBox, "Unable to parse dsdf: " + ex.getMessage());
            Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                in.close();
            } catch (IOException ex) {
                Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void viewDsdfButtonActionPerformed(java.awt.event.ActionEvent evt) {
        TreePath p = jTree1.getSelectionPath();
        TreeModel m = jTree1.getModel();
        if (p == null) {
            JOptionPane.showConfirmDialog(this, "No dataset selected");
            return;
        }
        if (m.isLeaf(p.getLastPathComponent())) {
            {
                try {
                    Object[] oo = p.getPath();
                    String ds = String.valueOf(oo[1]);
                    for (int i = 2; i < oo.length; i++) {
                        ds = ds + "/" + oo[i];
                    }
                    String surl = oo[0] + "?server=dsdf&dataset=" + ds;
                    final URL url = new URL(surl);
                    RequestProcessor.invokeLater(new Runnable() {

                        public void run() {
                            showDsdf(url);
                        }
                    });
                } catch (MalformedURLException ex) {
                    Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showConfirmDialog(this, "Internal Error: " + ex.toString());
                }
            }
        }
    }

    private void das2ServerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
        Object o = das2ServerComboBox.getSelectedItem();
        if (o != null) {
            setServerURL(String.valueOf(o));
        }
    }

    private void discoveryCbActionPerformed(java.awt.event.ActionEvent evt) {
        jTree1.setModel(waitTreeModel());
        RequestProcessor.invokeLater(getDataSetsRunnable());
    }

    private void examplesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
        String item = (String) examplesComboBox.getSelectedItem();
        if (!item.equals(EXAMPLE_TIME_RANGES)) {
            timeRangeTextField.setText(item);
        }
    }

    public javax.swing.JTextArea ReaderParamsTextArea;

    public javax.swing.JComboBox das2ServerComboBox;

    public javax.swing.JLabel descriptionLabel;

    public javax.swing.JCheckBox discoveryCb;

    public javax.swing.JComboBox examplesComboBox;

    public javax.swing.JLabel jLabel1;

    public javax.swing.JLabel jLabel2;

    public javax.swing.JLabel jLabel3;

    public javax.swing.JLabel jLabel4;

    public javax.swing.JLabel jLabel5;

    public javax.swing.JLabel jLabel6;

    public javax.swing.JLabel jLabel7;

    public javax.swing.JScrollPane jScrollPane1;

    public javax.swing.JScrollPane jScrollPane2;

    public javax.swing.JTree jTree1;

    public javax.swing.JTextField tcaItem;

    public javax.swing.JTextField tcaTextField;

    public javax.swing.JTextField timeRangeTextField;

    public javax.swing.JLabel validRangeLabel;

    public javax.swing.JButton viewDsdfButton;

    protected String serverURL = null;

    public static final String PROP_SERVERURL = "serverURL";

    public String getServerURL() {
        return serverURL;
    }

    public void setServerURL(String serverURL) {
        String oldServerURL = this.serverURL;
        this.serverURL = serverURL;
        if (!this.serverURL.equals(oldServerURL)) {
            timeRangeTextField.setText(DEFAULT_TIMERANGE);
            descriptionLabel.setText("");
            jTree1.setModel(waitTreeModel());
            RequestProcessor.invokeLater(getDataSetsRunnable());
        }
        firePropertyChange(PROP_SERVERURL, oldServerURL, serverURL);
    }

    protected String dataSetId = null;

    public static final String PROP_DATASETID = "dataSetId";

    public String getDataSetId() {
        return dataSetId;
    }

    public void setDataSetId(String dataSetId) {
        String oldDataSetId = this.dataSetId;
        this.dataSetId = dataSetId;
        firePropertyChange(PROP_DATASETID, oldDataSetId, dataSetId);
    }

    public JPanel getPanel() {
        return this;
    }

    public boolean reject(String uri) throws Exception {
        URISplit split = URISplit.parse(uri);
        if (split.file == null || split.file.equals("file:///")) {
            split.file = "http://www-pw.physics.uiowa.edu/das/das2Server";
        }
        String s = split.file.toString();
        if (s.equals("http://www-pw.physics.uiowa.edu/das/das2Server")) {
            return false;
        }
        URL url = new URL(s + "?server=logo");
        URLConnection connect = url.openConnection();
        try {
            InputStream in = connect.getInputStream();
            if (connect.getContentType().startsWith("image")) {
                in.close();
                return false;
            } else {
                in.close();
                return true;
            }
        } catch (IOException ex) {
            return false;
        }
    }

    public boolean prepare(String uri, java.awt.Window parent, ProgressMonitor mon) {
        return true;
    }

    public void setURI(String uri) {
        URI home = null;
        try {
            home = new URI("http://www-pw.physics.uiowa.edu/das/das2Server");
        } catch (URISyntaxException ex) {
            Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        URISplit split = URISplit.parse(uri);
        if (split.file == null || split.file.equals("file:///")) {
            split.resourceUri = home;
        }
        List<URI> servers = new ArrayList();
        servers.add(home);
        try {
            servers.add(new URI("http://cassini.physics.uiowa.edu/das/das2Server"));
        } catch (URISyntaxException ex) {
            Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!split.resourceUri.equals(home)) {
            servers.add(split.resourceUri);
        }
        serverURL = DataSetURI.fromUri(split.resourceUri);
        Map<String, String> params = URISplit.parseParams(split.params);
        dataSetId = params.remove("dataset");
        if (dataSetId != null && dataSetId.startsWith("/")) {
            dataSetId = dataSetId.substring(1);
        }
        String startTime = params.remove("start_time");
        String endTime = params.remove("end_time");
        if (startTime != null && endTime != null) {
            Datum t1 = TimeUtil.createValid(startTime);
            Datum t2 = TimeUtil.createValid(endTime);
            DatumRange dr = new DatumRange(t1, t2);
            timeRangeTextField.setText(dr.toString());
        } else {
            timeRangeTextField.setText(DEFAULT_TIMERANGE);
        }
        String interval = params.remove("interval");
        if (interval != null) {
            tcaTextField.setText(interval);
        }
        String item = params.remove("item");
        if (item != null) {
            tcaItem.setText(item);
        }
        StringBuilder paramsStr = new StringBuilder();
        for (Entry<String, String> e : params.entrySet()) {
            if (e.getKey().startsWith("arg_")) {
                paramsStr.append(e.getValue()).append("\n");
            } else {
                paramsStr.append(e.getKey()).append("=").append(e.getValue()).append("\n");
            }
        }
        ReaderParamsTextArea.setText(paramsStr.toString());
        updateDas2ServersImmediately();
        this.das2ServerComboBox.setSelectedItem(split.resourceUri);
        jTree1.setModel(waitTreeModel());
        RequestProcessor.invokeLater(getDataSetsRunnable());
    }

    TreeModel waitTreeModel() {
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("updating, please wait...");
        return new javax.swing.tree.DefaultTreeModel(treeNode1);
    }

    private void updateTree(TreeModel model) {
        jTree1.setModel(model);
        if (dataSetId != null) selectDataSetId();
    }

    Runnable getDataSetsRunnable() {
        Runnable run = new Runnable() {

            public void run() {
                String ss = serverURL;
                try {
                    DasServer server = DasServer.create(new URL(ss));
                    final TreeModel model;
                    if (discoveryCb.isSelected()) {
                        model = server.getDataSetListWithDiscovery();
                    } else {
                        model = server.getDataSetList();
                    }
                    SwingUtilities.invokeLater(new Runnable() {

                        public void run() {
                            updateTree(model);
                        }
                    });
                } catch (DasException ex) {
                    Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
                    javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Error connecting to " + ss + ", \n" + ex);
                    jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
                } catch (MalformedURLException ex) {
                    Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
                    DasApplication.getDefaultApplication().getExceptionHandler().handle(ex);
                }
            }
        };
        return run;
    }

    private void selectDataSetId() {
        String[] ss = dataSetId.split("/");
        TreeNode[] oo = new TreeNode[ss.length + 1];
        oo[0] = (TreeNode) jTree1.getModel().getRoot();
        for (int i = 1; i < oo.length; i++) {
            for (int j = 0; j < oo[i - 1].getChildCount(); j++) {
                DefaultMutableTreeNode kid = (DefaultMutableTreeNode) oo[i - 1].getChildAt(j);
                if (kid.getUserObject().equals(ss[i - 1])) {
                    oo[i] = kid;
                    break;
                }
            }
            if (oo[i] == null) {
                return;
            }
        }
        final TreePath tp = new TreePath(oo);
        Runnable run = new Runnable() {

            public void run() {
                jTree1.setSelectionPath(tp);
                jTree1.scrollPathToVisible(tp);
            }
        };
        SwingUtilities.invokeLater(run);
    }

    public String getURI() {
        TreePath tp = jTree1.getSelectionPath();
        if (tp == null) {
            return "vap+das2server:" + serverURL + "?";
        }
        Object[] tp0 = tp.getPath();
        DatumRange timeRange = null;
        try {
            timeRange = DatumRangeUtil.parseTimeRange(timeRangeTextField.getText());
        } catch (ParseException ex) {
            Logger.getLogger(Das2ServerDataSourceEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        String dataSetId = "";
        if (tp0.length > 1) {
            dataSetId = (String) ((DefaultMutableTreeNode) tp0[1]).getUserObject();
            for (int i = 2; i < tp0.length; i++) dataSetId += "/" + (String) ((DefaultMutableTreeNode) tp0[i]).getUserObject();
        }
        LinkedHashMap<String, String> map = new LinkedHashMap();
        String readerParams = ReaderParamsTextArea.getText();
        String[] ss = readerParams.split("\n");
        int iargc = 0;
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i].trim();
            if (s.length() == 0) continue;
            String[] ss2 = s.split("=", -2);
            if (ss2.length == 1) {
                map.put("arg_" + iargc, ss2[0]);
                iargc++;
            } else {
                map.put(ss2[0], ss2[1]);
            }
        }
        String params = URISplit.formatParams(map);
        String result = "vap+das2server:" + serverURL + "?" + "dataset=" + dataSetId + "&start_time=" + timeRange.min() + "&end_time=" + timeRange.max();
        String tcaInterval = tcaTextField.getText().trim();
        if (!tcaInterval.equals("")) {
            result += "&interval=" + tcaInterval;
        }
        if (!tcaItem.getText().trim().equals("")) {
            result += "&item=" + tcaItem.getText().trim();
        }
        if (params.length() > 0) result = result + "&" + params;
        return result;
    }

    /**
     * call this before prepare.
     * @param expert
     */
    public void setExpertMode(boolean expert) {
        this.discoveryCb.setSelected(!expert);
    }
}
