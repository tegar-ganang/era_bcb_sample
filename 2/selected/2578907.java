package newgen.presentation.cataloguing;

import newgen.presentation.*;
import javax.swing.*;
import java.util.*;
import org.jdom.*;
import org.jdom.output.*;
import org.jdom.input.*;

/**
 *
 * @author  Siddarth1
 */
public class AddSubField extends javax.swing.JDialog {

    /** Creates new form NewGenInternalFrame */
    public AddSubField() {
        initComponents();
        newgen.presentation.NewGenMain.getAppletInstance().applyOrientation(this);
        this.setModal(true);
        dlm1 = new DefaultListModel();
        dlm2 = new DefaultListModel();
        this.liavailable.setModel(dlm1);
        this.liInEditor.setModel(dlm2);
        this.setSize(450, 240);
        this.setLocation(NewGenMain.getAppletInstance().getLocation(450, 240));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private static void clear() {
        thisScreen.dlm1.clear();
        thisScreen.dlm2.clear();
    }

    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        liavailable = new javax.swing.JList();
        badd = new javax.swing.JButton();
        bremove = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        liInEditor = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        tftag = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        bok = new javax.swing.JButton();
        bhelp = new javax.swing.JButton();
        bcsh = new javax.swing.JButton();
        bcancel = new javax.swing.JButton();
        bexit = new javax.swing.JButton();
        setTitle(NewGenMain.getAppletInstance().getMyResource().getBundle("Administration").getString("AddSubField"));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));
        jPanel2.setLayout(new java.awt.GridBagLayout());
        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        jLabel1.setText(NewGenMain.getAppletInstance().getMyResource().getBundle("Administration").getString("Available"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabel1, gridBagConstraints);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 131));
        jScrollPane1.setViewportView(liavailable);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        jPanel2.add(jScrollPane1, gridBagConstraints);
        badd.setMnemonic('a');
        badd.setText(NewGenMain.getAppletInstance().getMyResource().getBundle("Administration").getString("AddRight"));
        badd.setPreferredSize(new java.awt.Dimension(97, 26));
        badd.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        jPanel2.add(badd, gridBagConstraints);
        bremove.setMnemonic('r');
        bremove.setText(NewGenMain.getAppletInstance().getMyResource().getBundle("Administration").getString("RemoveLeft"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        jPanel2.add(bremove, gridBagConstraints);
        jLabel2.setText(NewGenMain.getAppletInstance().getMyResource().getBundle("Administration").getString("InEditor"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabel2, gridBagConstraints);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(100, 131));
        jScrollPane2.setViewportView(liInEditor);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        jPanel2.add(jScrollPane2, gridBagConstraints);
        jLabel3.setText(NewGenMain.getAppletInstance().getMyResource().getBundle("Administration").getString("Tag"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 0.3;
        jPanel2.add(jLabel3, gridBagConstraints);
        tftag.setColumns(15);
        tftag.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(tftag, gridBagConstraints);
        jPanel1.add(jPanel2);
        bok.setMnemonic('o');
        bok.setText(NewGenMain.getAppletInstance().getMyResource().getBundle("Administration").getString("Ok"));
        bok.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bokActionPerformed(evt);
            }
        });
        jPanel3.add(bok);
        bhelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/newgen/images/help.gif")));
        bhelp.setMnemonic('h');
        jPanel3.add(bhelp);
        bcsh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/newgen/images/helpcsh.gif")));
        jPanel3.add(bcsh);
        bcancel.setMnemonic('c');
        bcancel.setText(NewGenMain.getAppletInstance().getMyResource().getBundle("Administration").getString("Cancel"));
        bcancel.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcancelActionPerformed(evt);
            }
        });
        jPanel3.add(bcancel);
        bexit.setMnemonic('e');
        bexit.setText(NewGenMain.getAppletInstance().getMyResource().getBundle("Administration").getString("Exit"));
        jPanel3.add(bexit);
        jPanel1.add(jPanel3);
        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
        pack();
    }

    private void bcancelActionPerformed(java.awt.event.ActionEvent evt) {
        this.retcode = 1;
        for (int i = 0; i < dlm2.size(); i++) {
            String stx = dlm2.elementAt(i).toString();
            if (!dlm1.contains(stx)) dlm1.addElement(stx);
        }
        this.dlm2.clear();
        for (int i = 0; i < this.glosf.size(); i++) {
            this.dlm2.addElement(glosf.elementAt(i).toString().trim());
        }
    }

    private void bokActionPerformed(java.awt.event.ActionEvent evt) {
        this.retcode = 0;
        ArrayList tosend = new ArrayList();
        ArrayList present = new ArrayList();
        for (int i = 0; i < presentineditor.size(); i++) present.add(presentineditor.get(i));
        for (int i = 0; i < this.dlm2.size(); i++) {
            if (present.contains(dlm2.get(i))) {
                present.remove(present.indexOf(dlm2.get(i)));
            } else {
                tosend.add(dlm2.get(i));
            }
        }
        for (int i = 0; i < tosend.size(); i++) System.out.println(tosend.get(i));
        this.retarray = tosend;
        this.dispose();
    }

    private void baddActionPerformed(java.awt.event.ActionEvent evt) {
        String selecteditem = this.liavailable.getSelectedValue().toString().trim();
        System.out.println(hashtable.get(selecteditem).equals("NR") + "iiiiiiiiiiiiiiiiiiii" + this.dlm2.contains(selecteditem));
        if (hashtable.get(selecteditem).equals("NR")) {
            if (this.dlm2.contains(selecteditem)) this.showWarningMessage("Not allowed"); else {
                dlm2.addElement(selecteditem);
                dlm1.removeElement(selecteditem);
            }
        } else {
            dlm2.addElement(selecteditem);
        }
    }

    void showErrorMessage(String message) {
        newgen.presentation.NewGenMain app = newgen.presentation.NewGenMain.getAppletInstance();
        app.showErrorMessage(message);
    }

    void showInformationMessage(String message) {
        newgen.presentation.NewGenMain app = newgen.presentation.NewGenMain.getAppletInstance();
        app.showInformationMessage(message);
    }

    void showWarningMessage(String message) {
        newgen.presentation.NewGenMain app = newgen.presentation.NewGenMain.getAppletInstance();
        app.showWarningMessage(message);
    }

    void showQuestionMessage(String message) {
        newgen.presentation.NewGenMain app = newgen.presentation.NewGenMain.getAppletInstance();
        app.showQuestionMessage(message);
    }

    public void setInitialValues(String Tag, Vector subfields) {
        this.tftag.setText(Tag);
        presentineditor = new ArrayList();
        this.glosf = subfields;
        for (int i = 0; i < subfields.size(); i++) {
            this.dlm2.addElement(subfields.elementAt(i).toString().trim());
            presentineditor.add(subfields.elementAt(i).toString().trim());
        }
        String xmlreq = CataloguingXMLGenerator.getInstance().getSubFieldsRepeat("5", Tag);
        try {
            java.net.URL url = new java.net.URL(ResourceBundle.getBundle("Administration").getString("ServerURL") + ResourceBundle.getBundle("Administration").getString("ServletSubPath") + "MarcDictionaryServlet");
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            java.io.OutputStream dos = urlconn.getOutputStream();
            dos.write(xmlreq.getBytes());
            java.io.InputStream ios = urlconn.getInputStream();
            SAXBuilder saxb = new SAXBuilder();
            Document retdoc = saxb.build(ios);
            Element retroot = retdoc.getRootElement();
            hashtable = new Hashtable();
            List list = retroot.getChildren();
            System.out.println("Point of execution came here " + list.size());
            for (int i = 0; i < list.size(); i++) {
                List chilist = ((Element) list.get(i)).getChildren();
                hashtable.put(((Element) chilist.get(0)).getText().trim(), ((Element) chilist.get(1)).getText().trim());
            }
            System.out.println(hashtable);
            Enumeration keys = hashtable.keys();
            while (keys.hasMoreElements()) this.dlm1.addElement(keys.nextElement());
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public ArrayList getSetSubFields() {
        return this.retarray;
    }

    /** Getter for property retcode.
     * @return Value of property retcode.
     */
    public int getRetcode() {
        return retcode;
    }

    /** Setter for property retcode.
     * @param retcode New value of property retcode.
     */
    public void setRetcode(int retcode) {
        this.retcode = retcode;
    }

    private javax.swing.JButton badd;

    private javax.swing.JButton bcancel;

    private javax.swing.JButton bcsh;

    private javax.swing.JButton bexit;

    private javax.swing.JButton bhelp;

    private javax.swing.JButton bok;

    private javax.swing.JButton bremove;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JPanel jPanel3;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JList liInEditor;

    private javax.swing.JList liavailable;

    private javax.swing.JTextField tftag;

    private static AddSubField thisScreen = null;

    private DefaultListModel dlm1;

    private DefaultListModel dlm2;

    private java.util.Hashtable hashtable;

    private ArrayList presentineditor;

    private ArrayList retarray;

    private int retcode = 0;

    private Vector glosf;
}
