package org.lokoen.comicviewer.gui;

import java.io.*;
import java.net.*;
import java.util.*;
import javax.swing.*;
import org.lokoen.comicviewer.*;

/**
 *
 * @author  s1007
 */
public class ConfigurationDialog extends javax.swing.JDialog {

    public static final String comicSite = "http://lokoen.org/comicviewer/comics/";

    private ComicsManager comicsmanager;

    private String[] titles;

    private Comic[] comics;

    private boolean[] activated;

    /** Creates new form ConfigurationDialog */
    public ConfigurationDialog(java.awt.Frame parent, boolean modal, ComicsManager _comicsmanager) {
        super(parent, modal);
        comicsmanager = _comicsmanager;
        initComponents();
        comics = getAllComics();
        comiclist.setListData(comics);
    }

    private Comic[] getAllComics() {
        try {
            URL comicURL = new URL(comicSite + "list");
            InputStream is = comicURL.openStream();
            BufferedReader buffread = new BufferedReader(new InputStreamReader(is));
            Vector tmplist = new Vector();
            while (buffread.ready()) {
                String comic = buffread.readLine();
                tmplist.add(comic);
            }
            Comic[] list = new Comic[tmplist.size()];
            activated = new boolean[tmplist.size()];
            titles = new String[tmplist.size()];
            for (int i = 0; i < tmplist.size(); i++) {
                try {
                    URL curl = new URL(comicSite + (String) tmplist.get(i));
                    BufferedInputStream bis = new BufferedInputStream(curl.openStream());
                    Properties cprop = new Properties();
                    cprop.load(bis);
                    Comic c = new Comic(cprop, false);
                    list[i] = c;
                    titles[i] = c.getName();
                    activated[i] = comicsmanager.isLoaded(c.getName());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            for (int i = 0; i < list.length; i++) {
                System.out.println(list[i]);
            }
            return list;
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        tabpane = new javax.swing.JTabbedPane();
        comicconfigpane = new javax.swing.JPanel();
        comicspiltpane = new javax.swing.JSplitPane();
        comiclistscrollpane = new javax.swing.JScrollPane();
        comiclist = new javax.swing.JList();
        comicinfo = new javax.swing.JPanel();
        comicTitle = new javax.swing.JLabel();
        comicDescription = new javax.swing.JLabel();
        toggleActivate = new javax.swing.JToggleButton();
        appconfigpane = new javax.swing.JPanel();
        buttonpane = new javax.swing.JPanel();
        buttonOl = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        tabpane.setName("");
        comicconfigpane.setLayout(new java.awt.GridLayout(1, 1));
        comiclist.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        comiclist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {

            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                comiclistValueChanged(evt);
            }
        });
        comiclistscrollpane.setViewportView(comiclist);
        comicspiltpane.setLeftComponent(comiclistscrollpane);
        comicinfo.setLayout(new java.awt.BorderLayout());
        comicTitle.setText("Title");
        comicinfo.add(comicTitle, java.awt.BorderLayout.NORTH);
        comicDescription.setText("Description");
        comicinfo.add(comicDescription, java.awt.BorderLayout.CENTER);
        toggleActivate.setText("Activate");
        toggleActivate.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleActivateActionPerformed(evt);
            }
        });
        comicinfo.add(toggleActivate, java.awt.BorderLayout.SOUTH);
        comicspiltpane.setRightComponent(comicinfo);
        comicconfigpane.add(comicspiltpane);
        tabpane.addTab("Comics", comicconfigpane);
        tabpane.addTab("Preferences", appconfigpane);
        getContentPane().add(tabpane, java.awt.BorderLayout.CENTER);
        buttonpane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        buttonOl.setText("Ok");
        buttonOl.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOlActionPerformed(evt);
            }
        });
        buttonpane.add(buttonOl);
        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });
        buttonpane.add(buttonCancel);
        getContentPane().add(buttonpane, java.awt.BorderLayout.SOUTH);
        pack();
    }

    private void toggleActivateActionPerformed(java.awt.event.ActionEvent evt) {
        JToggleButton jt = (JToggleButton) evt.getSource();
        if (comiclist.getSelectedIndex() >= 0) activated[comiclist.getSelectedIndex()] = jt.isSelected();
    }

    private void buttonOlActionPerformed(java.awt.event.ActionEvent evt) {
        Vector tmplist = new Vector();
        for (int i = 0; i < comics.length; i++) {
            if (activated[i]) {
                tmplist.add(comics[i]);
            }
        }
        Comic[] list = new Comic[tmplist.size()];
        for (int i = 0; i < tmplist.size(); i++) {
            list[i] = (Comic) tmplist.get(i);
        }
        comicsmanager.wipeAndStore(list);
        this.dispose();
    }

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {
        this.dispose();
    }

    private void comiclistValueChanged(javax.swing.event.ListSelectionEvent evt) {
        int i = comiclist.getSelectedIndex();
        comicTitle.setText(comics[i].getName());
        comicDescription.setText(comics[i].getDescription());
        toggleActivate.setSelected(activated[i]);
    }

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {
        setVisible(false);
        dispose();
    }

    private javax.swing.JPanel appconfigpane;

    private javax.swing.JButton buttonCancel;

    private javax.swing.JButton buttonOl;

    private javax.swing.JPanel buttonpane;

    private javax.swing.JLabel comicDescription;

    private javax.swing.JLabel comicTitle;

    private javax.swing.JPanel comicconfigpane;

    private javax.swing.JPanel comicinfo;

    private javax.swing.JList comiclist;

    private javax.swing.JScrollPane comiclistscrollpane;

    private javax.swing.JSplitPane comicspiltpane;

    private javax.swing.JTabbedPane tabpane;

    private javax.swing.JToggleButton toggleActivate;
}
