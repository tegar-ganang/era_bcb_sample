package com.ssg.tools.jsonviewer;

import com.ssg.tools.jsonviewer.components.helpers.StructureTreeModel;
import com.ssg.tools.jsonxml.json.JSONParser;
import com.ssg.tools.jsonxml.xml.XMLParser;
import java.awt.Cursor;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JTree;
import javax.swing.TransferHandler;
import javax.swing.TransferHandler.TransferSupport;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author ssg
 */
public class SampleViewer2 extends javax.swing.JFrame {

    /** Creates new form SampleViewer2 */
    public SampleViewer2() {
        initComponents();
        initCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        desktopPane = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_New = new javax.swing.JMenuItem();
        jMenuItem_Open = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_Quit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jMenu1.setText("File");
        jMenuItem_New.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_New.setText("New");
        jMenuItem_New.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_NewActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_New);
        jMenuItem_Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Open.setText("Open");
        jMenuItem_Open.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_OpenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_Open);
        jMenu1.add(jSeparator1);
        jMenuItem_Quit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Quit.setText("Exit");
        jMenu1.add(jMenuItem_Quit);
        jMenuBar1.add(jMenu1);
        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);
        setJMenuBar(jMenuBar1);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1104, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE));
        pack();
    }

    private void jMenuItem_NewActionPerformed(java.awt.event.ActionEvent evt) {
        JInternalFrame jif = createObjectStructureFrame(null);
        this.desktopPane.add(jif);
        jif.moveToFront();
    }

    private void jMenuItem_OpenActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode((fc.FILES_AND_DIRECTORIES));
        fc.setMultiSelectionEnabled(true);
        fc.setCurrentDirectory(new File("."));
        int op = fc.showOpenDialog(this);
        System.out.println("action.Open: " + op + ", " + fc.getSelectedFile());
        if (op == 0 && fc.getSelectedFile() != null) {
            for (File f : fc.getSelectedFiles()) {
                try {
                    JInternalFrame jif = createObjectStructureFrame(f);
                    this.desktopPane.add(jif);
                    jif.moveToFront();
                } catch (Throwable th) {
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SampleViewer2().setVisible(true);
            }
        });
    }

    private javax.swing.JDesktopPane desktopPane;

    private javax.swing.JMenu jMenu1;

    private javax.swing.JMenu jMenu2;

    private javax.swing.JMenuBar jMenuBar1;

    private javax.swing.JMenuItem jMenuItem_New;

    private javax.swing.JMenuItem jMenuItem_Open;

    private javax.swing.JMenuItem jMenuItem_Quit;

    private javax.swing.JPopupMenu.Separator jSeparator1;

    public JInternalFrame createObjectStructureFrame(File file) {
        JInternalFrame frame = new JInternalFrame();
        frame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        frame.setSize(500, 300);
        frame.setVisible(true);
        frame.setClosable(true);
        frame.setMaximizable(true);
        frame.setIconifiable(true);
        frame.setResizable(true);
        JTree tree = new JTree();
        frame.add(tree);
        Object obj = null;
        try {
            obj = (new XMLParser()).parse(new FileReader(file));
            frame.setName(file.getName() + " (XML)");
        } catch (Throwable th1) {
            try {
                obj = (new JSONParser()).parse(new FileReader(file));
                frame.setName(file.getName() + " (JSON)");
            } catch (Throwable th2) {
            }
        }
        if (obj != null) {
            tree.setModel(new StructureTreeModel(new DefaultMutableTreeNode(obj)));
        }
        return frame;
    }

    void initCustom() {
        desktopPane.setTransferHandler(new DTH());
    }

    class DTH extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            final JTree tree = (c instanceof JTree) ? (JTree) c : null;
            return new Transferable() {

                public DataFlavor[] getTransferDataFlavors() {
                    try {
                        DataFlavor df = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType + ";class=java.lang.Object");
                        return new DataFlavor[] { df };
                    } catch (Throwable th) {
                        return null;
                    }
                }

                public boolean isDataFlavorSupported(DataFlavor flavor) {
                    return true;
                }

                public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
                    TreePath tsp = tree.getSelectionModel().getSelectionPath();
                    if (tsp != null) {
                        return tsp.getLastPathComponent();
                    } else {
                        return null;
                    }
                }
            };
        }

        @Override
        public boolean canImport(TransferSupport support) {
            return true;
        }

        @Override
        public boolean canImport(JComponent comp, DataFlavor[] transferFlavors) {
            return true;
        }

        @Override
        public boolean importData(TransferSupport support) {
            return super.importData(support);
        }

        @Override
        public boolean importData(JComponent comp, Transferable t) {
            Cursor oldCursor = comp.getCursor();
            comp.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                for (DataFlavor df : t.getTransferDataFlavors()) {
                    try {
                        if (df.isMimeTypeEqual(DataFlavor.javaJVMLocalObjectMimeType)) {
                            Object data = t.getTransferData(df);
                            if (data != null) {
                                break;
                            }
                        } else if (df.isFlavorTextType()) {
                            Object data = t.getTransferData(df);
                            if (data instanceof String) {
                                try {
                                    URL url = new URL((String) data);
                                    InputStream is = url.openStream();
                                    File file = File.createTempFile("__cache", "___");
                                    file.deleteOnExit();
                                    OutputStream os = new BufferedOutputStream(new FileOutputStream(file), 1024 * 10);
                                    byte[] buf = new byte[1024 * 4];
                                    int c = 0;
                                    while ((c = is.read(buf)) > 0) {
                                        os.write(buf, 0, c);
                                    }
                                    is.close();
                                    os.close();
                                    JInternalFrame jif = createObjectStructureFrame(null);
                                    desktopPane.add(jif);
                                    jif.moveToFront();
                                    break;
                                } catch (Throwable th) {
                                    th.printStackTrace();
                                }
                            }
                        } else {
                            Object data = t.getTransferData(df);
                            if (data instanceof List && ((List) data).size() > 0) {
                                List list = (List) data;
                                Object item = list.get(0);
                                if (item instanceof File) {
                                    JInternalFrame jif = createObjectStructureFrame(null);
                                    desktopPane.add(jif);
                                    jif.moveToFront();
                                    break;
                                }
                            }
                        }
                    } catch (UnsupportedFlavorException ufex) {
                    } catch (IOException ioex) {
                    }
                }
            } finally {
                comp.setCursor(oldCursor);
            }
            return true;
        }
    }
}
