package org.proteored.miapeapi.xml.pride.adapter;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import org.apache.log4j.Logger;
import org.proteored.miapeapi.cv.Accession;
import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.cv.ControlVocabularyTerm;
import org.proteored.miapeapi.cv.PRIDEOntology;
import org.proteored.miapeapi.cv.PSIMassSepctrometryOntology;
import org.proteored.miapeapi.cv.SeparationMethodsOntology;
import org.proteored.miapeapi.cv.UNIMODOntology;
import org.proteored.miapeapi.cv.UnitOntology;
import org.proteored.miapeapi.cv.ms.ChargeState;
import org.proteored.miapeapi.cv.ms.CollisionPressure;
import org.proteored.miapeapi.cv.ms.DissociationMethod;
import org.proteored.miapeapi.cv.ms.GasType;
import org.proteored.miapeapi.cv.ms.Instrument;
import org.proteored.miapeapi.cv.ms.InstrumentModel;
import org.proteored.miapeapi.cv.ms.InstrumentVendor;
import org.proteored.miapeapi.cv.ms.IonSourceName;
import org.proteored.miapeapi.cv.ms.MOverZ;
import org.proteored.miapeapi.cv.ms.MSFileType;
import org.proteored.miapeapi.cv.ms.MassAnalyzerType;
import org.proteored.miapeapi.cv.ms.ReflectronState;
import org.proteored.miapeapi.cv.msi.MatchedPeaks;
import org.proteored.miapeapi.cv.msi.PeptideModificationName;
import org.proteored.miapeapi.cv.msi.PrideProject;
import org.proteored.miapeapi.cv.msi.ProteinDescription;
import org.proteored.miapeapi.cv.msi.Score;
import org.proteored.miapeapi.cv.msi.ValidationType;
import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.interfaces.MiapeDocument;
import org.proteored.miapeapi.interfaces.Software;
import org.proteored.miapeapi.interfaces.ms.ActivationDissociation;
import org.proteored.miapeapi.interfaces.ms.Analyzer;
import org.proteored.miapeapi.interfaces.ms.DataAnalysis;
import org.proteored.miapeapi.interfaces.ms.Esi;
import org.proteored.miapeapi.interfaces.ms.InstrumentConfiguration;
import org.proteored.miapeapi.interfaces.ms.MSContact;
import org.proteored.miapeapi.interfaces.ms.Maldi;
import org.proteored.miapeapi.interfaces.ms.MiapeMSDocument;
import org.proteored.miapeapi.interfaces.ms.ResultingData;
import org.proteored.miapeapi.interfaces.ms.Spectrometer;
import org.proteored.miapeapi.interfaces.msi.Database;
import org.proteored.miapeapi.interfaces.msi.IdentifiedPeptide;
import org.proteored.miapeapi.interfaces.msi.IdentifiedProtein;
import org.proteored.miapeapi.interfaces.msi.IdentifiedProteinSet;
import org.proteored.miapeapi.interfaces.msi.MiapeMSIDocument;
import org.proteored.miapeapi.interfaces.msi.PeptideModification;
import org.proteored.miapeapi.interfaces.msi.PeptideScore;
import org.proteored.miapeapi.interfaces.msi.ProteinScore;
import org.proteored.miapeapi.xml.pride.adapter.mzml.SpectrumAdapter;
import org.proteored.miapeapi.xml.pride.autogenerated.AdminType;
import org.proteored.miapeapi.xml.pride.autogenerated.CvLookupType;
import org.proteored.miapeapi.xml.pride.autogenerated.DataProcessingType;
import org.proteored.miapeapi.xml.pride.autogenerated.DescriptionType;
import org.proteored.miapeapi.xml.pride.autogenerated.ExperimentCollection;
import org.proteored.miapeapi.xml.pride.autogenerated.ExperimentType;
import org.proteored.miapeapi.xml.pride.autogenerated.ExperimentType.MzData;
import org.proteored.miapeapi.xml.pride.autogenerated.ExperimentType.MzData.Description;
import org.proteored.miapeapi.xml.pride.autogenerated.ExperimentType.MzData.SpectrumList;
import org.proteored.miapeapi.xml.pride.autogenerated.ExperimentType.MzData.SpectrumList.Spectrum;
import org.proteored.miapeapi.xml.pride.autogenerated.ExperimentType.Protocol;
import org.proteored.miapeapi.xml.pride.autogenerated.ExperimentType.Protocol.ProtocolSteps;
import org.proteored.miapeapi.xml.pride.autogenerated.GelFreeIdentificationType;
import org.proteored.miapeapi.xml.pride.autogenerated.InstrumentDescriptionType;
import org.proteored.miapeapi.xml.pride.autogenerated.InstrumentDescriptionType.AnalyzerList;
import org.proteored.miapeapi.xml.pride.autogenerated.Modification;
import org.proteored.miapeapi.xml.pride.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.pride.autogenerated.ParamType;
import org.proteored.miapeapi.xml.pride.autogenerated.PeakListBinaryType;
import org.proteored.miapeapi.xml.pride.autogenerated.PeakListBinaryType.Data;
import org.proteored.miapeapi.xml.pride.autogenerated.Peptide;
import org.proteored.miapeapi.xml.pride.autogenerated.PersonType;
import org.proteored.miapeapi.xml.pride.autogenerated.PrecursorType;
import org.proteored.miapeapi.xml.pride.autogenerated.SourceFileType;
import org.proteored.miapeapi.xml.pride.autogenerated.SpectrumDescType;
import org.proteored.miapeapi.xml.pride.autogenerated.SpectrumDescType.PrecursorList;
import org.proteored.miapeapi.xml.pride.autogenerated.SpectrumSettingsType;
import org.proteored.miapeapi.xml.pride.autogenerated.SpectrumSettingsType.SpectrumInstrument;
import org.proteored.miapeapi.xml.pride.autogenerated.UserParamType;
import org.proteored.miapeapi.xml.pride.util.PrideControlVocabularyXmlFactory;
import org.proteored.miapeapi.xml.pride.util.Utils;
import org.proteored.miapeapi.xml.util.peaklistreader.TMsData;
import org.proteored.miapeapi.zip.ZipManager;
import uk.ac.ebi.jmzml.model.mzml.ReferenceableParamGroupList;
import uk.ac.ebi.jmzml.xml.io.MzMLObjectIterator;
import uk.ac.ebi.jmzml.xml.io.MzMLUnmarshaller;

/**
 * Implementation of {@link ExperimentCollection} from a {@link MiapeMSDocument} and a
 * {@link MiapeMSIDocument} object.
 * 
 * @author Salvador
 * 
 */
public class PrideXMLAdapter implements Adapter<ExperimentCollection> {

    private final MiapeMSDocument miapeMS;

    private final MiapeMSIDocument miapeMSI;

    private final ObjectFactory factory;

    private final ControlVocabularyManager cvManager;

    private final PrideControlVocabularyXmlFactory prideCvUtil;

    private static Logger log = Logger.getLogger("log4j.logger.org.proteored");

    private final boolean parseMGF;

    private ExperimentCollection xmlPRIDE;

    public PrideXMLAdapter(MiapeMSDocument miapeMS, MiapeMSIDocument miapeMSI, ControlVocabularyManager controlVocabularyUtil, boolean parseMGF) {
        this.miapeMS = miapeMS;
        this.miapeMSI = miapeMSI;
        this.factory = new ObjectFactory();
        this.cvManager = controlVocabularyUtil;
        this.parseMGF = parseMGF;
        this.prideCvUtil = new PrideControlVocabularyXmlFactory(factory, cvManager);
    }

    public ExperimentCollection adapt() {
        xmlPRIDE = factory.createExperimentCollection();
        xmlPRIDE.setVersion(PrideControlVocabularyXmlFactory.PRIDE_VERSION);
        xmlPRIDE.setExperiment(createExperiment());
        return xmlPRIDE;
    }

    private ExperimentType createExperiment() {
        ExperimentType xmlExperiment = factory.createExperimentType();
        log.info("adding MIAPE data: titles and contacts");
        if (miapeMS != null) {
            addTitleAndShortLabel(miapeMS, xmlExperiment);
        } else if (miapeMSI != null) {
            addTitleAndShortLabel(miapeMSI, xmlExperiment);
        }
        xmlExperiment.setProtocol(createProtocol());
        xmlExperiment.setMzData(createMzData());
        addGelFreeIdentifications(xmlExperiment);
        return xmlExperiment;
    }

    private void addGelFreeIdentifications(ExperimentType xmlExperiment) {
        if (miapeMSI != null) {
            final Set<IdentifiedProteinSet> identifiedProteinSets = miapeMSI.getIdentifiedProteinSets();
            if (identifiedProteinSets != null) {
                for (IdentifiedProteinSet identifiedProteinSet : identifiedProteinSets) {
                    final HashMap<String, IdentifiedProtein> identifiedProteins = identifiedProteinSet.getIdentifiedProteins();
                    if (identifiedProteins != null && identifiedProteins.size() > 0) {
                        for (String proteinAcc : identifiedProteins.keySet()) {
                            IdentifiedProtein protein = identifiedProteins.get(proteinAcc);
                            xmlExperiment.getGelFreeIdentification().add(createGelFreeIdentification(protein));
                        }
                    }
                }
            }
        }
    }

    private Protocol createProtocol() {
        Protocol protocol = factory.createExperimentTypeProtocol();
        ProtocolSteps protocolSteps = factory.createExperimentTypeProtocolProtocolSteps();
        if (this.miapeMS != null) {
            ParamType userParamList = factory.createParamType();
            prideCvUtil.addUserParamToParamType(userParamList, "MIAPE Mass Spectrometry (ID:" + this.miapeMS.getId() + ")", this.miapeMS.getName());
            protocolSteps.getStepDescription().add(userParamList);
        }
        if (this.miapeMSI != null) {
            ParamType userParamList = factory.createParamType();
            prideCvUtil.addUserParamToParamType(userParamList, "MIAPE Mass Spectrometry Informatics (ID:" + this.miapeMSI.getId() + ")", this.miapeMSI.getName());
            protocolSteps.getStepDescription().add(userParamList);
        }
        if (protocolSteps.getStepDescription().size() > 0) {
            protocol.setProtocolSteps(protocolSteps);
            protocol.setProtocolName("MIAPE Mass Spectrometry and Mass Spectrometry Informatics references");
        } else {
            protocol.setProtocolName("no protocols captured");
        }
        return protocol;
    }

    private GelFreeIdentificationType createGelFreeIdentification(IdentifiedProtein protein) {
        GelFreeIdentificationType gelFreeIdentification = factory.createGelFreeIdentificationType();
        ;
        String accession = null;
        try {
            accession = protein.getAccession().trim();
        } catch (UnsupportedOperationException ex) {
            accession = "Not assigned protein";
        }
        try {
            if (accession.contains(".")) {
                log.info("adding gelfreeidentification con version: " + accession);
                String[] tmp = accession.split(".");
                accession = tmp[0];
                log.info("adding gelfreeidentification sin version: " + accession);
                final String accVersion = tmp[1];
                log.info("adding gelfreeidentification version: " + accVersion);
                gelFreeIdentification.setAccessionVersion(accVersion);
            }
        } catch (IndexOutOfBoundsException ex) {
        }
        log.info("Adding gelFreeIndentification: " + accession);
        gelFreeIdentification.setAccession(accession);
        try {
            gelFreeIdentification.setSequenceCoverage(Double.valueOf(protein.getCoverage()) / 100);
        } catch (Exception e) {
        }
        try {
            if (protein.getScores() != null) {
                final ProteinScore proteinScore = protein.getScores().iterator().next();
                gelFreeIdentification.setScore(Double.valueOf(proteinScore.getValue()));
            }
        } catch (Exception e) {
        }
        if (miapeMSI.getInputParameters() != null) {
            if (miapeMSI.getInputParameters().iterator().next().getDatabases() != null) {
                Database database = miapeMSI.getInputParameters().iterator().next().getDatabases().iterator().next();
                gelFreeIdentification.setDatabase(database.getName());
                gelFreeIdentification.setDatabaseVersion(database.getNumVersion());
            }
        }
        if (miapeMSI.getSoftwares() != null && miapeMSI.getSoftwares().size() > 0) {
            Software software = miapeMSI.getSoftwares().iterator().next();
            gelFreeIdentification.setSearchEngine(software.getName());
        }
        addPeptides(gelFreeIdentification, protein.getIdentifiedPeptides());
        addAdditionalParameters(gelFreeIdentification, protein);
        return gelFreeIdentification;
    }

    private void addAdditionalParameters(GelFreeIdentificationType gelFreeIdentification, IdentifiedProtein protein) {
        try {
            if (gelFreeIdentification.getAdditional() == null) gelFreeIdentification.setAdditional(factory.createParamType());
            if (protein.getDescription() != null && !"".equals(protein.getDescription())) {
                prideCvUtil.addCvParamToParamType(gelFreeIdentification.getAdditional(), ProteinDescription.PSI_PROTEIN_DESCRIPTION.getTermAccession(), ProteinDescription.PSI_PROTEIN_DESCRIPTION.getPreferredName(), protein.getDescription(), ProteinDescription.PSI_PROTEIN_DESCRIPTION.getCVRef());
            }
            if (protein.getValidationStatus() != null && !"".equals(protein.getValidationStatus())) {
                prideCvUtil.addUserParamToParamType(gelFreeIdentification.getAdditional(), PrideControlVocabularyXmlFactory.VALIDATION_STATUS_TEXT, protein.getValidationStatus().toString());
            }
            if (protein.getValidationType() != null && !"".equals(protein.getValidationType())) {
                prideCvUtil.addCvParamOrUserParamToParamType(gelFreeIdentification.getAdditional(), protein.getValidationType(), protein.getValidationValue(), ValidationType.getInstance(cvManager));
            }
            if (protein.getPeaksMatchedNumber() != null && !"".equals(protein.getPeaksMatchedNumber())) {
                prideCvUtil.addCvParamToParamType(gelFreeIdentification.getAdditional(), MatchedPeaks.NUMBER_OF_MATCHED_PEAKS.getTermAccession(), MatchedPeaks.NUMBER_OF_MATCHED_PEAKS.getPreferredName(), protein.getPeaksMatchedNumber(), MatchedPeaks.NUMBER_OF_MATCHED_PEAKS.getCVRef());
            }
            if (protein.getUnmatchedSignals() != null && !"".equals(protein.getUnmatchedSignals())) {
                prideCvUtil.addCvParamToParamType(gelFreeIdentification.getAdditional(), MatchedPeaks.NUMBER_OF_UNMATCHED_PEAKS.getTermAccession(), MatchedPeaks.NUMBER_OF_UNMATCHED_PEAKS.getPreferredName(), protein.getUnmatchedSignals(), MatchedPeaks.NUMBER_OF_UNMATCHED_PEAKS.getCVRef());
            }
        } catch (UnsupportedOperationException ex) {
        }
    }

    private void addPeptides(GelFreeIdentificationType xmlProtein, List<IdentifiedPeptide> identifiedPeptides) {
        for (IdentifiedPeptide identifiedPeptide : identifiedPeptides) {
            Peptide xmlPeptide = factory.createPeptide();
            xmlPeptide.setSequence(identifiedPeptide.getSequence());
            try {
                xmlPeptide.setSpectrumReference(BigInteger.valueOf(Long.valueOf(identifiedPeptide.getSpectrumRef())));
            } catch (Exception e) {
            }
            if (xmlPeptide.getAdditional() == null) xmlPeptide.setAdditional(factory.createParamType());
            Set<PeptideScore> scores = identifiedPeptide.getScores();
            if (scores != null) {
                for (PeptideScore peptideScore : scores) {
                    ControlVocabularyTerm scoreTerm = Score.getInstance(cvManager).getCVTermByPreferredName(peptideScore.getName());
                    if (scoreTerm != null) {
                        prideCvUtil.addCvParamToParamType(xmlPeptide.getAdditional(), scoreTerm.getTermAccession(), peptideScore.getName(), peptideScore.getValue(), scoreTerm.getCVRef());
                    } else {
                        prideCvUtil.addUserParamToParamType(xmlPeptide.getAdditional(), peptideScore.getName(), peptideScore.getValue());
                    }
                }
            }
            Set<PeptideModification> modifications = identifiedPeptide.getModifications();
            if (modifications != null) {
                for (PeptideModification peptideModification : modifications) {
                    xmlPeptide.getModificationItem().add(getModification(peptideModification));
                }
            }
            xmlProtein.getPeptideItem().add(xmlPeptide);
        }
    }

    private Modification getModification(PeptideModification peptideModification) {
        Modification xmlModification = factory.createModification();
        xmlModification.setModDatabase("");
        xmlModification.setModAccession("");
        if (peptideModification == null) return xmlModification;
        if (peptideModification.getPosition() > 0) xmlModification.setModLocation(new BigInteger(Integer.valueOf(peptideModification.getPosition()).toString()));
        Double monoDelta = peptideModification.getMonoDelta();
        if (monoDelta != null) xmlModification.getModMonoDelta().add(monoDelta.toString());
        Double avgDelta = peptideModification.getAvgDelta();
        if (avgDelta != null) xmlModification.getModAvgDelta().add(avgDelta.toString());
        String replacementResidue = peptideModification.getReplacementResidue();
        String name = peptideModification.getName();
        if (name != null) {
            xmlModification.setModAccession(name);
            final ControlVocabularyTerm cvTerm = PeptideModificationName.getInstance(cvManager).getCVTermByPreferredName(name);
            if (cvTerm != null) {
                xmlModification.setModDatabase(cvTerm.getCVRef());
                xmlModification.setAdditional(prideCvUtil.addCvParamToParamType(xmlModification.getAdditional(), cvTerm.getTermAccession(), cvTerm.getPreferredName(), null, cvTerm.getCVRef()));
            } else {
                if (replacementResidue == null) {
                    xmlModification.setModDatabase(UNIMODOntology.getFullName());
                    xmlModification.setAdditional(prideCvUtil.addUserParamToParamType(xmlModification.getAdditional(), "UniMod", name));
                } else {
                    xmlModification.setModDatabase("None");
                }
            }
        }
        Double neutralLoss = peptideModification.getNeutralLoss();
        if (neutralLoss != null) {
            xmlModification.setAdditional(prideCvUtil.addCvParamOrUserParamToParamType(xmlModification.getAdditional(), PeptideModificationName.getInstance(cvManager).getCVTermByAccession(PeptideModificationName.FRAGMENT_NEUTRAL_LOSS_ACCESSION).getPreferredName(), neutralLoss.toString(), PeptideModificationName.getInstance(cvManager)));
        }
        if (replacementResidue != null) {
            xmlModification.setAdditional(prideCvUtil.addCvParamOrUserParamToParamType(xmlModification.getAdditional(), PrideControlVocabularyXmlFactory.REPLACEMENT_RESIDUE, peptideModification.getResidues() + " by " + peptideModification.getReplacementResidue(), null));
        }
        if (peptideModification.getModificationEvidence() != null && !"".equals(peptideModification.getModificationEvidence())) {
            xmlModification.setAdditional(prideCvUtil.addUserParamToParamType(xmlModification.getAdditional(), "Modification evidence", peptideModification.getModificationEvidence()));
        }
        return xmlModification;
    }

    /**
	 * Parse the MGF file located in the DataFileUri of the resultingData and add them to the
	 * spectrum List
	 * 
	 * @param spectrumList
	 * @param resultingData
	 * @return true if the MGF file have been parsed correctly or false if no (no spectra added)
	 */
    private boolean addSpectraFromMGFs(SpectrumList spectrumList, ResultingData resultingData) {
        TMsData tMsData;
        int numSpectra = 0;
        String mgfFileURL = parseURL(resultingData, "mgf");
        try {
            tMsData = new TMsData(mgfFileURL);
        } catch (Exception e) {
            log.info("Error");
            log.info(e.getMessage());
            return false;
        }
        Vector spectra = tMsData.getSpectra();
        log.info(spectra.size() + " spectra readed");
        if (spectra.size() < 1) return false;
        for (int i = 0; i < spectra.size(); i++) {
            if (i == 251) i = i;
            Spectrum xmlSpectrum = factory.createExperimentTypeMzDataSpectrumListSpectrum();
            SpectrumDescType xmlSpecDesc = factory.createSpectrumDescType();
            SpectrumSettingsType xmlSettings = factory.createSpectrumSettingsType();
            SpectrumInstrument xmlInstrument = factory.createSpectrumSettingsTypeSpectrumInstrument();
            xmlSettings.setSpectrumInstrument(xmlInstrument);
            xmlSpecDesc.setSpectrumSettings(xmlSettings);
            PrecursorList xmlPrecursorList = factory.createSpectrumDescTypePrecursorList();
            PrecursorType xmlPrecursor = factory.createPrecursorType();
            ParamType xmlActivation = factory.createParamType();
            xmlPrecursor.setActivation(xmlActivation);
            ParamType xmlIonSection = factory.createParamType();
            if (tMsData.getPepCharge(i) > 0) {
                ChargeState.getInstance(cvManager);
                ControlVocabularyTerm chargeStateTerm = ChargeState.getChargeStateTerm();
                prideCvUtil.addCvParamToParamType(xmlIonSection, chargeStateTerm.getTermAccession(), chargeStateTerm.getPreferredName(), String.valueOf(tMsData.getPepCharge(i)), chargeStateTerm.getCVRef());
            }
            MOverZ.getInstance(cvManager);
            System.out.println(i + " - mass: " + tMsData.getPepMass(i));
            ControlVocabularyTerm mOverZTerm = MOverZ.getMOverZTerm();
            prideCvUtil.addCvParamToParamType(xmlIonSection, mOverZTerm.getTermAccession(), mOverZTerm.getPreferredName(), String.valueOf(tMsData.getPepMoverZ(i)), mOverZTerm.getCVRef());
            int spectrumReference = Utils.getIntegerValue(tMsData.getSpectrumReference(i));
            log.info("SpectrumReference from tMsdata=" + spectrumReference + " and index=" + i);
            spectrumReference = i + 1;
            xmlPrecursor.setSpectrumRef(spectrumReference);
            xmlPrecursor.setIonSelection(xmlIonSection);
            xmlPrecursorList.getPrecursor().add(xmlPrecursor);
            xmlPrecursorList.setCount(1);
            xmlSpecDesc.setPrecursorList(xmlPrecursorList);
            xmlSpectrum.setId(spectrumReference);
            xmlSpectrum.setSpectrumDesc(xmlSpecDesc);
            PeakListBinaryType peakListBinaryArray = factory.createPeakListBinaryType();
            Data arrayData = factory.createPeakListBinaryTypeData();
            arrayData.setValue(tMsData.getIntensityByteArrayPFFSpectrum(i));
            arrayData.setEndian(tMsData.getMzArrayEndian(i));
            arrayData.setLength(Integer.valueOf(tMsData.getMzArrayLength(i)));
            arrayData.setPrecision(tMsData.getMzArrayPrecision(i));
            peakListBinaryArray.setData(arrayData);
            xmlSpectrum.setIntenArrayBinary(peakListBinaryArray);
            peakListBinaryArray = factory.createPeakListBinaryType();
            arrayData = factory.createPeakListBinaryTypeData();
            arrayData.setValue(tMsData.getMzByteArrayPFFSpectrum(i));
            arrayData.setEndian(tMsData.getMzArrayEndian(i));
            arrayData.setLength(Integer.valueOf(tMsData.getMzArrayLength(i)));
            arrayData.setPrecision(tMsData.getMzArrayPrecision(i));
            peakListBinaryArray.setData(arrayData);
            xmlSpectrum.setMzArrayBinary(peakListBinaryArray);
            spectrumList.getSpectrum().add(xmlSpectrum);
            numSpectra++;
        }
        spectrumList.setCount(numSpectra);
        return true;
    }

    private String parseURL(ResultingData resultingData, String extension) {
        String fileURL = resultingData.getDataFileUri();
        log.info("Receiving " + extension + " " + fileURL + " file");
        try {
            File mgfFile = this.receiveFile(fileURL, extension);
            fileURL = mgfFile.toURI().toURL().toString();
        } catch (IOException ex) {
            log.info("IOException when receiving" + extension + " file:" + ex.getMessage());
            fileURL = resultingData.getDataFileUri();
        }
        log.info("Reading " + extension + " file from the URL: " + fileURL);
        try {
            URL url = new URL(fileURL);
        } catch (MalformedURLException ex) {
            log.info("MalformedURLException when trying to create an URL from " + fileURL);
            fileURL = "file:/" + fileURL;
            log.info("Now trying with " + fileURL);
        }
        return fileURL;
    }

    /**
	 * Parse the mzML file located in the DataFileUri of the resultingData and add them to the
	 * spectrum List
	 * 
	 * @param spectrumList
	 * @param resultingData
	 * @return true if the MGF file have been parsed correctly or false if no (no spectra added)
	 */
    private boolean addSpectraFromMzML(SpectrumList spectrumList, ResultingData resultingData) {
        int numSpectra = 0;
        String mzMLFileURL = parseURL(resultingData, "mzML");
        try {
            long initTime = System.currentTimeMillis();
            MzMLUnmarshaller mzMLUnmarshaller = new MzMLUnmarshaller(new URL(mzMLFileURL));
            long finishTime = System.currentTimeMillis();
            log.info("Index created in " + (finishTime - initTime) / 1000 + " seconds");
            MzMLObjectIterator<uk.ac.ebi.jmzml.model.mzml.Spectrum> spectrumIterator = mzMLUnmarshaller.unmarshalCollectionFromXpath("/run/spectrumList/spectrum", uk.ac.ebi.jmzml.model.mzml.Spectrum.class);
            if (spectrumIterator == null) return false;
            ReferenceableParamGroupList referenceableParamGroupList = mzMLUnmarshaller.unmarshalFromXpath("/referenceableParamGroupList", ReferenceableParamGroupList.class);
            final int totalSpectra = mzMLUnmarshaller.getObjectCountForXpath("/run/spectrumList/spectrum");
            while (spectrumIterator.hasNext()) {
                uk.ac.ebi.jmzml.model.mzml.Spectrum mzMLspectrum = spectrumIterator.next();
                Spectrum prideXmlSpectrum = new SpectrumAdapter(mzMLspectrum, referenceableParamGroupList, factory, prideCvUtil).adapt();
                spectrumList.getSpectrum().add(prideXmlSpectrum);
                if (mzMLspectrum.getIndex().toString().equals("3616")) numSpectra = numSpectra;
                numSpectra++;
                log.info((numSpectra * 100) / totalSpectra + "% spectra processed");
            }
        } catch (Exception e) {
            log.info("Error");
            log.info(e.getMessage());
            return false;
        }
        spectrumList.setCount(numSpectra);
        return true;
    }

    private MzData createMzData() {
        log.info("createMzData");
        MzData mzData = factory.createExperimentTypeMzData();
        mzData.setAccessionNumber(String.valueOf(Calendar.getInstance().getTimeInMillis()));
        mzData.setVersion(PrideControlVocabularyXmlFactory.MZDATA_VERSION);
        mzData.setDescription(createDescription());
        mzData.setSpectrumList(createSpectrumList());
        addCVLookup(mzData.getCvLookup());
        return mzData;
    }

    private void addCVLookup(List<CvLookupType> cvLookup) {
        CvLookupType prideOntology = factory.createCvLookupType();
        prideOntology.setAddress(PRIDEOntology.getAddress());
        prideOntology.setCvLabel(PRIDEOntology.getCVLabel());
        prideOntology.setFullName(PRIDEOntology.getFullName());
        prideOntology.setVersion(PRIDEOntology.getVersion());
        cvLookup.add(prideOntology);
        CvLookupType psiOntology = factory.createCvLookupType();
        psiOntology.setAddress(PSIMassSepctrometryOntology.getAddress());
        psiOntology.setCvLabel(PSIMassSepctrometryOntology.getCVLabel());
        psiOntology.setFullName(PSIMassSepctrometryOntology.getFullName());
        psiOntology.setVersion(PSIMassSepctrometryOntology.getVersion());
        cvLookup.add(psiOntology);
        CvLookupType sepOntology = factory.createCvLookupType();
        sepOntology.setAddress(SeparationMethodsOntology.getAddress());
        sepOntology.setCvLabel(SeparationMethodsOntology.getCVLabel());
        sepOntology.setFullName(SeparationMethodsOntology.getFullName());
        sepOntology.setVersion(SeparationMethodsOntology.getVersion());
        cvLookup.add(sepOntology);
        CvLookupType unimodOntology = factory.createCvLookupType();
        unimodOntology.setAddress(UNIMODOntology.getAddress());
        unimodOntology.setCvLabel(UNIMODOntology.getCVLabel());
        unimodOntology.setFullName(UNIMODOntology.getFullName());
        unimodOntology.setVersion(UNIMODOntology.getVersion());
        cvLookup.add(unimodOntology);
        CvLookupType unitOntology = factory.createCvLookupType();
        unitOntology.setAddress(UnitOntology.getAddress());
        unitOntology.setCvLabel(UnitOntology.getCVLabel());
        unitOntology.setFullName(UnitOntology.getFullName());
        unitOntology.setVersion(UnitOntology.getVersion());
        cvLookup.add(unitOntology);
    }

    /**
	 * Search for a resulting data with a dataFileURI not empty and a dataFileType=MASCOT_MGF
	 * 
	 * @param resultingData
	 * @return
	 */
    private boolean hasMGFFile(ResultingData resultingData) {
        final String dataFileUri = resultingData.getDataFileUri();
        if (dataFileUri != null && !"".equals(dataFileUri)) {
            final String dataFileType = resultingData.getDataFileType();
            if (dataFileType.equals(MSFileType.getInstance(cvManager).getCVTermByAccession(MSFileType.MASCOT_MGF).getPreferredName())) return true;
        }
        return false;
    }

    /**
	 * Search for a resulting data with a dataFileURI not empty and a dataFileType=MzML
	 * 
	 * @param resultingData
	 * @return
	 */
    private boolean hasMzMLFile(ResultingData resultingData) {
        final String dataFileUri = resultingData.getDataFileUri();
        if (dataFileUri != null && !"".equals(dataFileUri)) {
            final String dataFileType = resultingData.getDataFileType();
            if (dataFileType.equals(MSFileType.getInstance(cvManager).getCVTermByAccession(MSFileType.MZML_ACC).getPreferredName())) return true;
        }
        return false;
    }

    private SpectrumList createSpectrumList() {
        SpectrumList spectrumList = factory.createExperimentTypeMzDataSpectrumList();
        if (miapeMS != null) {
            List<ResultingData> resultingDatas = miapeMS.getResultingDatas();
            if (resultingDatas != null && resultingDatas.size() > 0) {
                for (ResultingData resultingData : resultingDatas) {
                    if (hasMGFFile(resultingData)) {
                        log.info("Parse spectra from MGF");
                        addSpectraFromMGFs(spectrumList, resultingData);
                    } else {
                        if (hasMzMLFile(resultingData)) {
                            log.info("Parse spectra from mzML");
                            addSpectraFromMzML(spectrumList, resultingData);
                        }
                    }
                }
            }
        }
        spectrumList.setCount(spectrumList.getSpectrum().size());
        log.info(spectrumList.getCount() + " spectra readed");
        return spectrumList;
    }

    private Description createDescription() {
        log.info("createDescription");
        Description description = factory.createExperimentTypeMzDataDescription();
        description.setAdmin(createAdmin());
        description.setDataProcessing(createDataProcessing());
        description.setInstrument(createInstrumentDescription());
        return description;
    }

    private InstrumentDescriptionType createInstrumentDescription() {
        String spectrometerName = "Unknown";
        ParamType prideSource = null;
        AnalyzerList prideAnalyzerList = null;
        ParamType prideDetectors = factory.createParamType();
        ParamType prideAdditional = factory.createParamType();
        log.info("adding instrument");
        InstrumentDescriptionType prideInstrument = factory.createInstrumentDescriptionType();
        if (miapeMS != null) {
            Set<Spectrometer> miapeSpectrometers = miapeMS.getSpectrometers();
            if (miapeSpectrometers != null && !miapeSpectrometers.isEmpty()) {
                Spectrometer spectrometer = miapeSpectrometers.iterator().next();
                spectrometerName = spectrometer.getName();
                ControlVocabularyTerm instrumentConfigurationTerm = Instrument.getInstrumentConfigurationTerm();
                if (spectrometer.getDescription() != null && !spectrometer.getDescription().equals("")) prideCvUtil.addUserParamToParamType(prideAdditional, PrideControlVocabularyXmlFactory.DESCRIPTION, spectrometer.getDescription());
                if (spectrometer.getComments() != null && !spectrometer.getComments().equals("")) prideCvUtil.addUserParamToParamType(prideAdditional, PrideControlVocabularyXmlFactory.COMMENTS, spectrometer.getComments());
                if (spectrometer.getCustomizations() != null && !spectrometer.getCustomizations().equals("")) {
                    prideCvUtil.addCvParamToParamType(prideAdditional, instrumentConfigurationTerm.getTermAccession(), instrumentConfigurationTerm.getPreferredName(), spectrometer.getCustomizations(), instrumentConfigurationTerm.getCVRef());
                }
                final ControlVocabularyTerm instrumentModelTerm = InstrumentModel.getInstrumentModelTerm(cvManager);
                if (spectrometer.getModel() != null && !spectrometer.getModel().equals("")) prideCvUtil.addCvParamToParamType(prideAdditional, instrumentModelTerm.getTermAccession(), instrumentModelTerm.getPreferredName(), spectrometer.getModel(), instrumentModelTerm.getCVRef());
                ControlVocabularyTerm instumentVendorTerm = InstrumentVendor.getInstrumentVendorTerm();
                if (spectrometer.getManufacturer() != null && !spectrometer.getManufacturer().equals("")) prideCvUtil.addCvParamToParamType(prideAdditional, instumentVendorTerm.getTermAccession(), instumentVendorTerm.getPreferredName(), spectrometer.getManufacturer(), instumentVendorTerm.getCVRef());
                if (spectrometer.getCatalogNumber() != null && !spectrometer.getCatalogNumber().equals("")) prideCvUtil.addUserParamToParamType(prideAdditional, PrideControlVocabularyXmlFactory.CATALOG_NUMBER, spectrometer.getCatalogNumber());
                if (spectrometer.getParameters() != null && !spectrometer.getParameters().equals("")) prideCvUtil.addCvParamToParamType(prideAdditional, instrumentConfigurationTerm.getTermAccession(), instrumentConfigurationTerm.getPreferredName(), spectrometer.getParameters(), instrumentConfigurationTerm.getCVRef());
                if (spectrometer.getUri() != null && !spectrometer.getUri().equals("")) prideCvUtil.addUserParamToParamType(prideAdditional, PrideControlVocabularyXmlFactory.URI, spectrometer.getUri());
                if (spectrometer.getVersion() != null && !spectrometer.getVersion().equals("")) prideCvUtil.addUserParamToParamType(prideAdditional, PrideControlVocabularyXmlFactory.VERSION, spectrometer.getVersion());
            }
            List<InstrumentConfiguration> instrumentConfigurations = miapeMS.getInstrumentConfigurations();
            if (instrumentConfigurations != null) {
                for (InstrumentConfiguration instrumentConfiguration : instrumentConfigurations) {
                    List<Esi> miapeESIS = instrumentConfiguration.getEsis();
                    List<Maldi> maldis = instrumentConfiguration.getMaldis();
                    if ((miapeESIS != null && !miapeESIS.isEmpty()) || (maldis != null && !maldis.isEmpty())) {
                        prideSource = createSource(miapeESIS, maldis);
                    } else {
                        prideSource = createSource(null, null);
                    }
                    List<Analyzer> miapeAnalyzers = instrumentConfiguration.getAnalyzers();
                    Set<ActivationDissociation> collisionCells = instrumentConfiguration.getActivationDissociations();
                    if ((miapeAnalyzers != null && !miapeAnalyzers.isEmpty()) || (collisionCells != null && !collisionCells.isEmpty())) {
                        prideAnalyzerList = createAnalyzers(miapeAnalyzers, collisionCells);
                    } else {
                        prideAnalyzerList = createAnalyzers(null, null);
                    }
                }
            } else {
                prideSource = createSource(null, null);
                prideAnalyzerList = createAnalyzers(null, null);
            }
        } else {
            prideSource = createSource(null, null);
            prideAnalyzerList = createAnalyzers(null, null);
        }
        prideInstrument.setInstrumentName(spectrometerName);
        prideInstrument.setSource(prideSource);
        prideInstrument.setAnalyzerList(prideAnalyzerList);
        prideInstrument.setDetector(prideDetectors);
        if (!prideAdditional.getCvParamOrUserParam().isEmpty()) prideInstrument.setAdditional(prideAdditional);
        return prideInstrument;
    }

    private AnalyzerList createAnalyzers(List<Analyzer> analyzers, Set<ActivationDissociation> collisionCells) {
        ParamType analyzerParamType;
        log.info("CreateAnalyzers");
        AnalyzerList prideAnalyzerList = factory.createInstrumentDescriptionTypeAnalyzerList();
        boolean ionOpticsProcessed = false;
        boolean collisionCellsProcessed = false;
        if (analyzers != null && !analyzers.isEmpty()) {
            for (Analyzer analyzer : analyzers) {
                analyzerParamType = factory.createParamType();
                String name = analyzer.getName();
                String description = analyzer.getDescription();
                String value = null;
                if (name != null) {
                    if (name.contains("=")) {
                        String[] tmp = name.split("=");
                        name = tmp[0];
                        value = tmp[1];
                    }
                    Accession cvId = cvManager.getControlVocabularyId(name, MassAnalyzerType.getInstance(cvManager));
                    if (cvId != null) {
                        String cvRef = cvManager.getCVRef(cvId, MassAnalyzerType.getInstance(cvManager));
                        prideCvUtil.addCvParamToParamType(analyzerParamType, cvId, name, value, cvRef);
                    } else {
                        ControlVocabularyTerm cvTerm = MassAnalyzerType.getInstance(cvManager).getCVTermByAccession(MassAnalyzerType.MASS_ANALYZER_TYPE_ACCESSION);
                        if (value != null) {
                            prideCvUtil.addCvParamToParamType(analyzerParamType, cvTerm.getTermAccession(), cvTerm.getPreferredName(), name, cvTerm.getCVRef());
                        } else {
                            prideCvUtil.addUserParamToParamType(analyzerParamType, name, value);
                        }
                    }
                }
                final String reflectron = analyzer.getReflectron();
                if (reflectron != null) {
                    Accession cvId = cvManager.getControlVocabularyId(reflectron, ReflectronState.getInstance(cvManager));
                    if (cvId != null) {
                        String cvRef = cvManager.getCVRef(cvId, ReflectronState.getInstance(cvManager));
                        String refDesc = cvManager.getControlVocabularyName(cvId, ReflectronState.getInstance(cvManager));
                        prideCvUtil.addCvParamToParamType(analyzerParamType, cvId, reflectron, refDesc, cvRef);
                    } else {
                        ControlVocabularyTerm cvTerm = ReflectronState.getInstance(cvManager).getCVTermByAccession(ReflectronState.REFLECTRON_STATE_ACCESSION);
                        prideCvUtil.addCvParamToParamType(analyzerParamType, cvTerm.getTermAccession(), cvTerm.getPreferredName(), reflectron, cvTerm.getCVRef());
                    }
                }
                if (description != null) {
                    final UserParamType userParam = prideCvUtil.createUserParam("Analyzer description", description);
                    analyzerParamType.getCvParamOrUserParam().add(userParam);
                }
                if (!collisionCellsProcessed) {
                    if (collisionCells != null && !collisionCells.isEmpty()) {
                        for (ActivationDissociation collisionCell : collisionCells) {
                            analyzerParamType = factory.createParamType();
                            String collisionCellName = collisionCell.getName();
                            if (collisionCellName != null) {
                                prideCvUtil.addUserParamToParamType(analyzerParamType, PrideControlVocabularyXmlFactory.COLLISION_CELL, collisionCellName);
                            }
                            final String activationType = collisionCell.activationType();
                            if (activationType != null) {
                                ControlVocabularyTerm cvTerm = DissociationMethod.getInstance(cvManager).getCVTermByAccession(DissociationMethod.DISSOCIATION_METHOD_ACCESSION);
                                prideCvUtil.addCvParamToParamType(analyzerParamType, cvTerm.getTermAccession(), cvTerm.getPreferredName(), activationType, cvTerm.getCVRef());
                            }
                            final String gasType = collisionCell.getGasType();
                            if (gasType != null) {
                                ControlVocabularyTerm cvTerm = GasType.getInstance(cvManager).getCVTermByAccession(GasType.COLLISION_GAS);
                                prideCvUtil.addCvParamToParamType(analyzerParamType, cvTerm.getTermAccession(), cvTerm.getPreferredName(), gasType, cvTerm.getCVRef());
                            }
                            final String gasPressure = collisionCell.getGasPressure();
                            if (gasPressure != null) {
                                ControlVocabularyTerm collissionPressureCVTerm = CollisionPressure.getCollisionPressureTerm();
                                if (collissionPressureCVTerm != null) prideCvUtil.addCvParamToParamType(analyzerParamType, collissionPressureCVTerm.getTermAccession(), collissionPressureCVTerm.getPreferredName(), gasPressure, collissionPressureCVTerm.getCVRef());
                            }
                            final String gasPressureUnits = collisionCell.getPressureUnit();
                            if (gasPressureUnits != null) {
                                prideCvUtil.addUserParamToParamType(analyzerParamType, PrideControlVocabularyXmlFactory.GAS_PRESSURE_UNIT, gasPressureUnits);
                            }
                            if (!analyzerParamType.getCvParamOrUserParam().isEmpty()) {
                                prideAnalyzerList.getAnalyzer().add(analyzerParamType);
                            }
                        }
                        collisionCellsProcessed = true;
                    }
                }
                if (!analyzerParamType.getCvParamOrUserParam().isEmpty()) {
                    prideAnalyzerList.getAnalyzer().add(analyzerParamType);
                }
            }
        }
        if (prideAnalyzerList.getAnalyzer().isEmpty()) {
            analyzerParamType = factory.createParamType();
            log.info("There is not analyzers in MIAPE MS");
            prideCvUtil.addUserParamToParamType(analyzerParamType, "Unknown analyzer", null);
            prideAnalyzerList.getAnalyzer().add(analyzerParamType);
        }
        prideAnalyzerList.setCount(prideAnalyzerList.getAnalyzer().size());
        return prideAnalyzerList;
    }

    private ParamType createSource(List<Esi> esis, List<Maldi> maldis) {
        log.info("CreateSource");
        ParamType paramType = factory.createParamType();
        if (esis != null && !esis.isEmpty()) {
            for (Esi esi : esis) {
                String name = esi.getName();
                String value = "";
                if (name.contains("=")) {
                    String[] tmp = name.split("=");
                    name = tmp[0];
                    value = tmp[1];
                }
                if (IonSourceName.isMaldiFromDescription(name, cvManager) == false) {
                    ControlVocabularyTerm cvTerm = IonSourceName.getInstance(cvManager).getCVTermByPreferredName(name);
                    if (cvTerm != null) {
                        prideCvUtil.addCvParamToParamType(paramType, cvTerm.getTermAccession(), cvTerm.getPreferredName(), null, PSIMassSepctrometryOntology.getCVLabel());
                    } else {
                        if (!"".equals(value)) prideCvUtil.addUserParamToParamType(paramType, IonSourceName.ELECTROSPRAY_IONIZATION, name); else prideCvUtil.addUserParamToParamType(paramType, name, value);
                    }
                } else {
                    if (!"".equals(value)) prideCvUtil.addUserParamToParamType(paramType, IonSourceName.ELECTROSPRAY_IONIZATION, name); else prideCvUtil.addUserParamToParamType(paramType, name, value);
                }
            }
        }
        if (maldis != null && !maldis.isEmpty()) {
            for (Maldi maldi : maldis) {
                String name = maldi.getName();
                String value = "";
                if (name.contains("=")) {
                    String[] tmp = name.split(".");
                    name = tmp[0];
                    value = tmp[1];
                }
                if (IonSourceName.isMaldiFromDescription(name, cvManager)) {
                    ControlVocabularyTerm cvTerm = IonSourceName.getInstance(cvManager).getCVTermByPreferredName(name);
                    if (cvTerm != null) {
                        prideCvUtil.addCvParamToParamType(paramType, cvTerm.getTermAccession(), cvTerm.getPreferredName(), null, PSIMassSepctrometryOntology.getCVLabel());
                    } else {
                        if (!"".equals(value)) prideCvUtil.addUserParamToParamType(paramType, IonSourceName.MATRIX_ASSISTED_LASER_DESORPTION_IONIZATION, name); else prideCvUtil.addUserParamToParamType(paramType, name, value);
                    }
                } else {
                    if (!"".equals(value)) prideCvUtil.addUserParamToParamType(paramType, IonSourceName.MATRIX_ASSISTED_LASER_DESORPTION_IONIZATION, name); else prideCvUtil.addUserParamToParamType(paramType, name, value);
                }
            }
        }
        return paramType;
    }

    private DataProcessingType createDataProcessing() {
        log.info("createDataProcessing");
        DataProcessingType prideDataProcessing = factory.createDataProcessingType();
        if (miapeMS != null && miapeMS.getDataAnalysis() != null && !miapeMS.getDataAnalysis().isEmpty()) {
            DataAnalysis peakListGenerator = miapeMS.getDataAnalysis().iterator().next();
            prideDataProcessing.setSoftware(createDataProcessingSoftware(peakListGenerator));
            ParamType paramList = factory.createParamType();
            if (peakListGenerator.getCustomizations() != null && !peakListGenerator.getCustomizations().equals("")) prideCvUtil.addUserParamToParamType(paramList, PrideControlVocabularyXmlFactory.CUSTOMIZATIONS, peakListGenerator.getCustomizations());
            if (peakListGenerator.getDescription() != null && !peakListGenerator.getDescription().equals("")) prideCvUtil.addUserParamToParamType(paramList, PrideControlVocabularyXmlFactory.DESCRIPTION, peakListGenerator.getDescription());
            if (peakListGenerator.getManufacturer() != null && !peakListGenerator.getManufacturer().equals("")) prideCvUtil.addUserParamToParamType(paramList, PrideControlVocabularyXmlFactory.MANUFACTURER, peakListGenerator.getManufacturer());
            if (peakListGenerator.getCatalogNumber() != null && !peakListGenerator.getCatalogNumber().equals("")) prideCvUtil.addUserParamToParamType(paramList, PrideControlVocabularyXmlFactory.CATALOG_NUMBER, peakListGenerator.getCatalogNumber());
            if (peakListGenerator.getModel() != null && !peakListGenerator.getModel().equals("")) prideCvUtil.addUserParamToParamType(paramList, PrideControlVocabularyXmlFactory.MODEL, peakListGenerator.getModel());
            if (peakListGenerator.getParameters() != null && !peakListGenerator.getParameters().equals("")) prideCvUtil.addUserParamToParamType(paramList, PrideControlVocabularyXmlFactory.PARAMETERS, peakListGenerator.getParameters());
            if (peakListGenerator.getParametersLocation() != null && !peakListGenerator.getParametersLocation().equals("")) prideCvUtil.addUserParamToParamType(paramList, PrideControlVocabularyXmlFactory.PARAMETER_FILE_URI, peakListGenerator.getParametersLocation());
            if (peakListGenerator.getURI() != null && !peakListGenerator.getURI().equals("")) prideCvUtil.addUserParamToParamType(paramList, PrideControlVocabularyXmlFactory.URI, peakListGenerator.getURI());
            prideDataProcessing.setProcessingMethod(paramList);
        } else {
            prideDataProcessing.setSoftware(createDataProcessingSoftware(null));
        }
        return prideDataProcessing;
    }

    private org.proteored.miapeapi.xml.pride.autogenerated.DataProcessingType.Software createDataProcessingSoftware(DataAnalysis peakListGenerator) {
        org.proteored.miapeapi.xml.pride.autogenerated.DataProcessingType.Software prideSoftware = factory.createDataProcessingTypeSoftware();
        if (peakListGenerator == null) {
            prideSoftware.setName("");
            prideSoftware.setVersion("");
            return prideSoftware;
        }
        String name = peakListGenerator.getName();
        if (name != null) {
            prideSoftware.setName(name);
        } else {
            prideSoftware.setName("");
        }
        String version = peakListGenerator.getVersion();
        if (version != null) {
            prideSoftware.setVersion(version);
        } else {
            prideSoftware.setVersion("");
        }
        String comments = peakListGenerator.getComments();
        if (comments != null && !comments.equals("")) prideSoftware.setComments(comments);
        return prideSoftware;
    }

    private AdminType createAdmin() {
        MSContact msiContact = null;
        MSContact msContact = null;
        log.info("createAdmin");
        AdminType admin = factory.createAdminType();
        admin.setSampleName("Unknown");
        if (miapeMS != null) {
            msContact = miapeMS.getContact();
            if (msContact != null) admin.getContact().add(createContact(msContact));
        }
        if (miapeMSI != null) {
            msiContact = miapeMSI.getContact();
            if (msiContact != null && !compareContacts(msiContact, msContact)) admin.getContact().add(createContact(msiContact));
        }
        if (msiContact == null && msContact == null) {
            admin.getContact().add(createContact(null));
        }
        String sampleComments = null;
        if (sampleComments != null) admin.setSampleDescription(createSampleDescription(sampleComments));
        if (miapeMS != null) {
            List<ResultingData> resultingDatas = miapeMS.getResultingDatas();
            if (resultingDatas != null) admin.setSourceFile(createSourceFile(resultingDatas));
        }
        return admin;
    }

    private boolean compareContacts(MSContact msiContact, MSContact msContact) {
        if (msContact == null || msiContact == null) return false;
        if (msContact.getAddress() != null) if (!msContact.getAddress().equals(msiContact.getAddress())) return false;
        if (msContact.getCountry() != null) if (!msContact.getCountry().equals(msiContact.getCountry())) return false;
        if (msContact.getCP() != null) if (!msContact.getCP().equals(msiContact.getCP())) return false;
        if (msContact.getDepartment() != null) if (!msContact.getDepartment().equals(msiContact.getDepartment())) return false;
        if (msContact.getEmail() != null) if (!msContact.getEmail().equals(msiContact.getEmail())) return false;
        if (msContact.getFax() != null) if (!msContact.getFax().equals(msiContact.getFax())) return false;
        if (msContact.getInstitution() != null) if (!msContact.getInstitution().equals(msiContact.getInstitution())) return false;
        if (msContact.getLastName() != null) if (!msContact.getLastName().equals(msiContact.getLastName())) return false;
        if (msContact.getName() != null) if (!msContact.getName().equals(msiContact.getName())) return false;
        if (msContact.getPosition() != null) if (!msContact.getPosition().equals(msiContact.getPosition())) return false;
        if (msContact.getTelephone() != null) if (!msContact.getTelephone().equals(msiContact.getTelephone())) return false;
        return true;
    }

    private SourceFileType createSourceFile(List<ResultingData> miapeResultingDatas) {
        log.info("createSourceFile");
        SourceFileType sourceFileType = factory.createSourceFileType();
        String fileType = null;
        String fileName = "unknown";
        String filePath = "unknown";
        if (!miapeResultingDatas.isEmpty()) {
            ResultingData miapeResultingData = miapeResultingDatas.iterator().next();
            fileType = miapeResultingData.getDataFileType();
            fileName = miapeResultingData.getName();
            if (miapeResultingData.getDataFileUri() != null && !"".equals(miapeResultingData.getDataFileUri())) {
                filePath = miapeResultingData.getDataFileUri();
            } else if (miapeResultingData.getAdditionalUri() != null && !"".equals(miapeResultingData.getAdditionalUri())) {
                filePath = miapeResultingData.getAdditionalUri();
            }
        }
        sourceFileType.setNameOfFile(fileName);
        sourceFileType.setPathToFile(filePath);
        if (fileType != null && !fileType.equals("")) sourceFileType.setFileType(fileType);
        return sourceFileType;
    }

    private DescriptionType createSampleDescription(String sampleComments) {
        DescriptionType sampleDescription = factory.createDescriptionType();
        if (sampleComments != null && !sampleComments.equals("")) sampleDescription.setComment(sampleComments);
        return sampleDescription;
    }

    private PersonType createContact(MSContact miapeContact) {
        log.info("createContact");
        PersonType prideContact = factory.createPersonType();
        if (miapeContact == null) {
            prideContact.setName("");
            prideContact.setInstitution("");
            return prideContact;
        }
        String miapeContactName = miapeContact.getName();
        if (miapeContact.getLastName() != null && !miapeContact.getLastName().equals("")) miapeContactName += " " + miapeContact.getLastName();
        if (miapeContactName != null) {
            prideContact.setName(miapeContactName);
        } else {
            prideContact.setName("");
        }
        String miapeInstitution = miapeContact.getInstitution();
        if (miapeInstitution != null) {
            prideContact.setInstitution(miapeInstitution);
        } else {
            prideContact.setInstitution("");
        }
        StringBuilder contactInfo = new StringBuilder();
        if (miapeContact.getDepartment() != null && !miapeContact.getDepartment().equals("")) contactInfo.append(" Department:" + miapeContact.getDepartment());
        if (miapeContact.getPosition() != null && !miapeContact.getPosition().equals("")) contactInfo.append(" Position:" + miapeContact.getPosition());
        if (miapeContact.getAddress() != null && !miapeContact.getAddress().equals("")) contactInfo.append(" Address:" + miapeContact.getAddress());
        if (miapeContact.getCP() != null && !miapeContact.getCP().equals("")) contactInfo.append(" CP:" + miapeContact.getCP());
        if (miapeContact.getLocality() != null && !miapeContact.getLocality().equals("")) contactInfo.append(" Locality:" + miapeContact.getLocality());
        if (miapeContact.getCountry() != null && !miapeContact.getCountry().equals("")) contactInfo.append(" Country:" + miapeContact.getCountry());
        if (miapeContact.getEmail() != null && !miapeContact.getEmail().equals("")) contactInfo.append(" e-mail:" + miapeContact.getEmail());
        if (miapeContact.getTelephone() != null && !miapeContact.getTelephone().equals("")) contactInfo.append(" Telephone:" + miapeContact.getTelephone());
        if (miapeContact.getFax() != null && !miapeContact.getFax().equals("")) contactInfo.append(" Fax:" + miapeContact.getFax());
        String string = contactInfo.toString();
        if (!string.equals("")) prideContact.setContactInfo(string);
        return prideContact;
    }

    private void addTitleAndShortLabel(MiapeDocument document, ExperimentType xmlExperiment) {
        String title = "PRIDE created automatically from MIAPE information";
        String shortLabel = "PRIDE from MIAPE";
        if (document != null) {
            if (document.getProject() != null) {
                title = "PRIDE from MIAPE: " + shortLabel + " from MIAPE project " + document.getProject().getName();
            } else {
                title = "PRIDE from MIAPE: " + shortLabel;
            }
            shortLabel = document.getName();
        }
        xmlExperiment.setShortLabel(shortLabel);
        xmlExperiment.setTitle(title);
        Object projectCV = null;
        if (this.miapeMS != null && this.miapeMS.getProject() != null) projectCV = prideCvUtil.createCvParamOrUserParam("Project", this.miapeMS.getProject().getName(), PrideProject.getInstance(cvManager));
        if (this.miapeMSI != null && this.miapeMSI.getProject() != null) projectCV = prideCvUtil.createCvParamOrUserParam("Project", this.miapeMSI.getProject().getName(), PrideProject.getInstance(cvManager));
        if (projectCV != null) {
            ParamType additional = factory.createParamType();
            additional.getCvParamOrUserParam().add(projectCV);
            xmlExperiment.setAdditional(additional);
        }
    }

    private File receiveFile(String fileName, String extension) throws IOException {
        File outPutFile = File.createTempFile("temp", extension + ZipManager.getExtension(fileName));
        URL url;
        try {
            url = new URL(fileName);
        } catch (Exception ex) {
            log.info("The filename: " + fileName + " is not an URL. Trying to get from a File object");
            url = new File(fileName).toURI().toURL();
        }
        log.info("Output file: " + outPutFile.getAbsolutePath());
        BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(outPutFile));
        log.info("Retrieving File: " + fileName);
        URLConnection urlc = url.openConnection();
        BufferedInputStream is = new BufferedInputStream(urlc.getInputStream());
        ZipManager.copyInputStream(is, os);
        log.info("Finished Retriving File " + outPutFile.getAbsolutePath());
        outPutFile = ZipManager.decompressGZipFileIfNeccessary(outPutFile);
        return outPutFile;
    }
}
