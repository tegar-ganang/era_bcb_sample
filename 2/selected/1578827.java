package csa.jportal.cardset;

import csa.jportal.gui.Windowable;
import csa.jportal.card.*;
import csa.jportal.*;
import csa.jportal.config.*;
import csa.jportal.gui.StarterKit;
import javax.swing.*;
import javax.swing.event.*;
import java.util.*;
import java.awt.*;
import java.awt.image.*;
import java.net.*;
import java.io.*;

/**
 *
 * @author Malban
 */
public class CardSetImportSupportedPanel extends javax.swing.JPanel implements Windowable, Runnable {

    StarterKit msk = null;

    private JPortalView mParent = null;

    private javax.swing.JMenuItem mParentMenuItem = null;

    public static final Proxy.Type[] PROXY_TYPES = Proxy.Type.values();

    private int mProxyType = 0;

    private CardSet mLoadedCardSet = new CardSet();

    public void closing() {
    }

    public void setParentWindow(JPortalView jpv) {
        mParent = jpv;
    }

    public void setMenuItem(javax.swing.JMenuItem item) {
        mParentMenuItem = item;
        mParentMenuItem.setText("Import Gatherer-Set");
    }

    public javax.swing.JMenuItem getMenuItem() {
        return mParentMenuItem;
    }

    public javax.swing.JPanel getPanel() {
        return this;
    }

    /** Creates new form CardSetGathererImportPanel */
    public CardSetImportSupportedPanel() {
        if (mParentMenuItem != null) mParentMenuItem.setText("Import Gatherer-Set");
        initComponents();
        jTextFieldBaseUrl.setText(Configuration.getConfiguration().getGathererBaseURL());
        jPanel2.removeAll();
        String[] text = { "No Proxy", "Http Proxy", "Socks Proxy" };
        for (int i = 0; i < PROXY_TYPES.length; i++) {
            JRadioButton rb = new JRadioButton(text[i]);
            final int t = i;
            rb.addChangeListener(new ChangeListener() {

                @Override
                public void stateChanged(ChangeEvent e) {
                    if (((AbstractButton) e.getSource()).isSelected()) {
                        mProxyType = t;
                        jTextFieldProxyURL.setEnabled(mProxyType != 0);
                        jTextFieldProxyPort.setEnabled(mProxyType != 0);
                    }
                }
            });
            buttonGroup1.add(rb);
            jPanel2.add(rb);
            if (i == 0) rb.setSelected(true);
        }
    }

    public CardSet getLoadedCardset() {
        return mLoadedCardSet;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldBaseUrl = new javax.swing.JTextField();
        jTextFieldPortal = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaOut = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldProxyURL = new javax.swing.JTextField();
        jTextFieldProxyPort = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jRadioButtonPType = new javax.swing.JRadioButton();
        jLabelImage = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jCheckBoxPortal = new javax.swing.JCheckBox();
        jTextFieldPortal2 = new javax.swing.JTextField();
        jCheckBoxPortal2 = new javax.swing.JCheckBox();
        jCheckBoxPortal3 = new javax.swing.JCheckBox();
        jTextFieldPortal3 = new javax.swing.JTextField();
        jCheckBoxStarter99 = new javax.swing.JCheckBox();
        jTextFieldStarter99 = new javax.swing.JTextField();
        jCheckBoxStarter100 = new javax.swing.JCheckBox();
        jTextFieldStarter100 = new javax.swing.JTextField();
        jButtonStartImport = new javax.swing.JButton();
        jLabel1.setText("Gatherer base URL");
        jLabel1.setName("jLabel1");
        jLabel2.setText("Setname");
        jLabel2.setName("jLabel2");
        jTextFieldBaseUrl.setToolTipText("At the time of Developement it is: \"http://gatherer.wizards.com/Pages/\"");
        jTextFieldBaseUrl.setName("jTextFieldBaseUrl");
        jTextFieldPortal.setEditable(false);
        jTextFieldPortal.setText("Portal");
        jTextFieldPortal.setToolTipText("Setname as given on the Gatherer hompage");
        jTextFieldPortal.setName("jTextFieldPortal");
        jScrollPane1.setName("jScrollPane1");
        jTextAreaOut.setColumns(20);
        jTextAreaOut.setEditable(false);
        jTextAreaOut.setLineWrap(true);
        jTextAreaOut.setRows(5);
        jTextAreaOut.setWrapStyleWord(true);
        jTextAreaOut.setName("jTextAreaOut");
        jScrollPane1.setViewportView(jTextAreaOut);
        jLabel3.setText("Import status");
        jLabel3.setName("jLabel3");
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Proxy Settings"));
        jPanel1.setName("jPanel1");
        jTextFieldProxyURL.setText("Proxy Adress");
        jTextFieldProxyURL.setToolTipText("URL");
        jTextFieldProxyURL.setName("jTextFieldProxyURL");
        jTextFieldProxyPort.setText("Port Number");
        jTextFieldProxyPort.setToolTipText("Port");
        jTextFieldProxyPort.setName("jTextFieldProxyPort");
        jPanel2.setName("jPanel2");
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));
        buttonGroup1.add(jRadioButtonPType);
        jRadioButtonPType.setText("jRadioButton1");
        jRadioButtonPType.setName("jRadioButtonPType");
        jPanel2.add(jRadioButtonPType);
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE).addComponent(jTextFieldProxyURL, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jTextFieldProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE).addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jTextFieldProxyURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jTextFieldProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(73, 73, 73)));
        jLabelImage.setText("Image");
        jLabelImage.setName("jLabelImage");
        jLabel4.setText("Image cropped");
        jLabel4.setName("jLabel4");
        jCheckBoxPortal.setSelected(true);
        jCheckBoxPortal.setName("jCheckBoxPortal");
        jTextFieldPortal2.setEditable(false);
        jTextFieldPortal2.setText("Portal Second Age");
        jTextFieldPortal2.setToolTipText("Setname as given on the Gatherer hompage");
        jTextFieldPortal2.setName("jTextFieldPortal2");
        jCheckBoxPortal2.setSelected(true);
        jCheckBoxPortal2.setName("jCheckBoxPortal2");
        jCheckBoxPortal3.setSelected(true);
        jCheckBoxPortal3.setName("jCheckBoxPortal3");
        jTextFieldPortal3.setEditable(false);
        jTextFieldPortal3.setText("Portal Three Kingdoms");
        jTextFieldPortal3.setToolTipText("Setname as given on the Gatherer hompage");
        jTextFieldPortal3.setName("jTextFieldPortal3");
        jCheckBoxStarter99.setSelected(true);
        jCheckBoxStarter99.setName("jCheckBoxStarter99");
        jTextFieldStarter99.setEditable(false);
        jTextFieldStarter99.setText("Starter 1999");
        jTextFieldStarter99.setToolTipText("Setname as given on the Gatherer hompage");
        jTextFieldStarter99.setName("jTextFieldStarter99");
        jCheckBoxStarter100.setSelected(true);
        jCheckBoxStarter100.setName("jCheckBoxStarter100");
        jTextFieldStarter100.setEditable(false);
        jTextFieldStarter100.setText("Starter 2000");
        jTextFieldStarter100.setToolTipText("Setname as given on the Gatherer hompage");
        jTextFieldStarter100.setName("jTextFieldStarter100");
        jButtonStartImport.setText("Import selected");
        jButtonStartImport.setToolTipText("Imports card data and grafics");
        jButtonStartImport.setName("jButtonStartImport");
        jButtonStartImport.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartImportActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jLabel1).addGap(36, 36, 36).addComponent(jTextFieldBaseUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(jLabel2)).addContainerGap()).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addComponent(jCheckBoxPortal2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jTextFieldPortal2, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addComponent(jCheckBoxPortal).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jTextFieldPortal, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addComponent(jCheckBoxPortal3).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jTextFieldPortal3, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addComponent(jCheckBoxStarter99).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jTextFieldStarter99, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)).addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup().addComponent(jCheckBoxStarter100).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jTextFieldStarter100, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))).addGap(37, 37, 37).addComponent(jLabelImage).addGap(56, 56, 56).addComponent(jLabel4).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addComponent(jLabel3).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 585, Short.MAX_VALUE).addComponent(jButtonStartImport).addContainerGap()).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(32, 32, 32).addComponent(jLabel2)).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jTextFieldBaseUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel1)).addGap(32, 32, 32).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jTextFieldPortal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabelImage).addComponent(jLabel4)).addComponent(jCheckBoxPortal, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jTextFieldPortal2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jCheckBoxPortal2)).addGap(5, 5, 5).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jCheckBoxPortal3).addComponent(jTextFieldPortal3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jCheckBoxStarter99).addComponent(jTextFieldStarter99, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jCheckBoxStarter100).addComponent(jTextFieldStarter100, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))).addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))).addGap(6, 6, 6).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButtonStartImport).addComponent(jLabel3)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)));
    }

    private void jButtonStartImportActionPerformed(java.awt.event.ActionEvent evt) {
        new Thread(CardSetImportSupportedPanel.this).start();
        jButtonStartImport.setEnabled(false);
        if (msk != null) {
            msk.importStarting();
        }
    }

    public void startImport() {
        jButtonStartImportActionPerformed(null);
    }

    public void setStarterKit(StarterKit sk) {
        msk = sk;
    }

    public void run() {
        Proxy p = null;
        if (mProxyType == 0) p = Proxy.NO_PROXY; else {
            try {
                p = new Proxy(PROXY_TYPES[mProxyType], new InetSocketAddress(jTextFieldProxyURL.getText(), Integer.parseInt(jTextFieldProxyPort.getText())));
            } catch (Exception e) {
                e.printStackTrace();
                Configuration.getConfiguration().getDebugEntity().addLog(e, Logable.LOG_ERROR);
                return;
            }
        }
        if (jCheckBoxPortal.isSelected()) {
            mLoadedCardSet = new CardSet();
            String setName = jTextFieldPortal.getText();
            importOneSet(setName, p);
        }
        if (jCheckBoxPortal2.isSelected()) {
            mLoadedCardSet = new CardSet();
            String setName = jTextFieldPortal2.getText();
            importOneSet(setName, p);
        }
        if (jCheckBoxPortal3.isSelected()) {
            mLoadedCardSet = new CardSet();
            String setName = jTextFieldPortal3.getText();
            importOneSet(setName, p);
        }
        if (jCheckBoxStarter99.isSelected()) {
            mLoadedCardSet = new CardSet();
            String setName = jTextFieldStarter99.getText();
            importOneSet(setName, p);
        }
        if (jCheckBoxStarter100.isSelected()) {
            mLoadedCardSet = new CardSet();
            String setName = jTextFieldStarter100.getText();
            importOneSet(setName, p);
        }
        String dbg = "\nAll selected sets have been imported.\nDone.";
        jTextAreaOut.insert(dbg, jTextAreaOut.getText().length());
        jTextAreaOut.setCaretPosition(jTextAreaOut.getText().length());
        Configuration.getConfiguration().getLogEntity().addLog(dbg);
        if (msk != null) {
            msk.importFinished();
        }
    }

    private void importOneSet(String setName, Proxy p) {
        String setNameUrl = csa.util.UtilityString.replace(setName, " ", "%20");
        setName = csa.util.UtilityString.replace(setName, "\"", "");
        setName = csa.util.UtilityString.replace(setName, "'", "");
        setName = csa.util.UtilityString.replace(setName, "´", "");
        setName = csa.util.UtilityString.replace(setName, "`", "");
        setName = csa.util.UtilityString.replace(setName, ":", "");
        String base = jTextFieldBaseUrl.getText();
        mLoadedCardSet.getData().mOrigin = CardSet.GATHERER_IMPORTED;
        mLoadedCardSet.getData().mSetName = setName;
        try {
            String searcher = "Search/Default.aspx?output=spoiler&method=text&set=[%22" + setNameUrl + "%22] ";
            URL url = new URL(base + searcher);
            URLConnection conn = url.openConnection(p);
            conn.setDoOutput(true);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            boolean save = false;
            String[] dontLike = { "<tr>", "</tr>", "<td", "</td>", "<table>", "</table>" };
            int NAME = 0;
            int COST = 1;
            int TYPE = 2;
            int POW = 3;
            int TEXT = 4;
            int RARITY = 5;
            String[] textTags = { "Name:", "Cost:", "Type:", "Pow/Tgh:", "Rules Text:", "Set/Rarity:" };
            Card card = new Card();
            int currentTag = -1;
            String dbg = "";
            while ((line = rd.readLine()) != null) {
                if (line.indexOf("class=\"textspoiler\"") != -1) save = true;
                if (line.indexOf("</div>") != -1) save = false;
                if (save) {
                    boolean goOn = true;
                    for (int i = 0; i < dontLike.length; i++) {
                        if (line.indexOf(dontLike[i]) != -1) {
                            goOn = false;
                            break;
                        }
                    }
                    if (goOn) {
                        for (int i = 0; i < textTags.length; i++) {
                            if (line.indexOf(textTags[i]) != -1) {
                                currentTag = i;
                                goOn = false;
                                break;
                            }
                        }
                    }
                    if (goOn) {
                        if (NAME == currentTag) {
                            dbg = "";
                            String id = line.substring(line.indexOf("multiverseid=") + 13);
                            id = id.substring(0, id.indexOf("\""));
                            String name = line.substring(line.indexOf(">") + 1);
                            name = name.substring(0, name.indexOf("<"));
                            card = new Card();
                            card.getData().setId(id);
                            card.getData().setCardName(name);
                            card.getData().setSetName(setName);
                            dbg += "Card: " + name + "(" + id + ")\n";
                            currentTag = -1;
                        }
                        if (COST == currentTag) {
                            String cost = line.trim();
                            cost = csa.util.UtilityString.replace(cost, "G", "{G}");
                            cost = csa.util.UtilityString.replace(cost, "B", "{B}");
                            cost = csa.util.UtilityString.replace(cost, "W", "{W}");
                            cost = csa.util.UtilityString.replace(cost, "R", "{R}");
                            cost = csa.util.UtilityString.replace(cost, "U", "{U}");
                            cost = csa.util.UtilityString.replace(cost, "X", "{X}");
                            cost = csa.util.UtilityString.replace(cost, "1", "{1}");
                            cost = csa.util.UtilityString.replace(cost, "2", "{2}");
                            cost = csa.util.UtilityString.replace(cost, "3", "{3}");
                            cost = csa.util.UtilityString.replace(cost, "4", "{4}");
                            cost = csa.util.UtilityString.replace(cost, "5", "{5}");
                            cost = csa.util.UtilityString.replace(cost, "6", "{6}");
                            cost = csa.util.UtilityString.replace(cost, "7", "{7}");
                            cost = csa.util.UtilityString.replace(cost, "8", "{8}");
                            cost = csa.util.UtilityString.replace(cost, "9", "{9}");
                            card.getData().setMana(cost);
                            dbg += "Cost: " + cost + "\n";
                            currentTag = -1;
                        }
                        if (TYPE == currentTag) {
                            String type = line.trim();
                            int typeEnd = -1;
                            int subtypeStart = -1;
                            for (int i = 0; i < type.length(); i++) {
                                if (((int) (type.charAt(i))) > 250) {
                                    typeEnd = i - 1;
                                    for (int c = i; c < type.length(); c++) {
                                        if (((int) (type.charAt(c))) == 32) {
                                            subtypeStart = c;
                                            break;
                                        }
                                    }
                                    break;
                                }
                            }
                            if (typeEnd != -1) {
                                card.getData().setType(type.substring(0, typeEnd).trim());
                                dbg += "Type: " + type.substring(0, typeEnd).trim() + " ";
                            } else {
                                card.getData().setType(type);
                                dbg += "Type: " + type + " ";
                            }
                            if (subtypeStart != -1) {
                                String subType = type.substring(subtypeStart).trim();
                                card.getData().setSubtype(subType.trim());
                                dbg += "SubType: " + subType.trim() + "\n";
                            }
                            currentTag = -1;
                        }
                        if (POW == currentTag) {
                            String powerToughness = line.trim();
                            if (powerToughness.length() == 0) {
                                card.getData().setPower("");
                                card.getData().setToughness("");
                            } else {
                                powerToughness = csa.util.UtilityString.replace(powerToughness, "(", "");
                                powerToughness = csa.util.UtilityString.replace(powerToughness, ")", "");
                                String power = powerToughness.substring(0, powerToughness.indexOf("/"));
                                String toughness = powerToughness.substring(powerToughness.indexOf("/") + 1);
                                card.getData().setPower(power);
                                card.getData().setToughness(toughness);
                            }
                            dbg += "Pow/Tough: " + card.getData().getPower() + "/" + card.getData().getToughness() + "\n";
                            currentTag = -1;
                        }
                        if (TEXT == currentTag) {
                            String text = line.trim();
                            text = csa.util.UtilityString.replace(text, "<br />", " ");
                            card.addText(text);
                        }
                        if (RARITY == currentTag) {
                            dbg += "Text: " + card.getText() + "\n";
                            String r = "";
                            String rarity = line.substring(line.indexOf(setName) + setName.length());
                            int l = rarity.length();
                            if (rarity.indexOf(",") != -1) l = rarity.indexOf(",");
                            rarity = rarity.substring(0, l);
                            if (rarity.indexOf("Common") != -1) r = "C";
                            if (rarity.indexOf("Uncommon") != -1) r = "U";
                            if (rarity.indexOf("Rare") != -1) r = "R";
                            if (rarity.indexOf("Land") != -1) r = "L";
                            card.getData().setRarity(r);
                            dbg += "Rarity: " + r + "\n";
                            dbg += "----\n";
                            if (card.getType().equalsIgnoreCase("Basic Land")) {
                                if (card.getText().indexOf("{T}") == -1) card.addfText("{T}:");
                            }
                            mLoadedCardSet.addCard(card);
                            currentTag = -1;
                            synchronized (this) {
                                jTextAreaOut.insert(dbg, jTextAreaOut.getText().length());
                                jTextAreaOut.setCaretPosition(jTextAreaOut.getText().length());
                                Configuration.getConfiguration().getLogEntity().addLog(dbg);
                            }
                        }
                    }
                }
            }
            rd.close();
        } catch (Exception e) {
            e.printStackTrace();
            Configuration.getConfiguration().getDebugEntity().addLog(e, Logable.LOG_ERROR);
            return;
        }
        String dirName = "sets" + File.separator + setName;
        File dir = new File(dirName);
        if (!dir.exists()) {
            try {
                dir.mkdir();
            } catch (Throwable e) {
                e.printStackTrace();
                Configuration.getConfiguration().getDebugEntity().addLog(e, Logable.LOG_ERROR);
            }
        }
        mLoadedCardSet.getData().mImagePath = dirName;
        HashMap<String, String> imageUrls = new HashMap<String, String>();
        try {
            String secondBase = "Search/";
            String searcher = new String("Default.aspx?output=spoiler&method=visual&set=[%22" + setNameUrl + "%22] ");
            URL url = new URL(base + secondBase + searcher);
            URLConnection conn = url.openConnection(p);
            conn.setDoOutput(true);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            boolean save = false;
            while ((line = rd.readLine()) != null) {
                if (line.indexOf("class=\"visualspoiler\"") != -1) save = true;
                if (line.indexOf("</div>") != -1) save = false;
                if (save) {
                    if (line.indexOf("<img src=") != -1) {
                        line = line.substring(line.indexOf("<img src=") + "<img src=".length() + 1);
                        line = line.substring(0, line.indexOf("\""));
                        String id = line.substring(line.indexOf("=") + 1);
                        id = id.substring(0, id.indexOf("&"));
                        String imageUrl = csa.util.UtilityString.fromXML(line);
                        if (imageUrl.startsWith(".")) {
                            imageUrl = base + secondBase + imageUrl;
                        }
                        imageUrls.put(id, imageUrl);
                        synchronized (this) {
                            String dbg = "ID: " + id + " ImageUrl: " + imageUrl + " got!\n";
                            jTextAreaOut.insert(dbg, jTextAreaOut.getText().length());
                            jTextAreaOut.setCaretPosition(jTextAreaOut.getText().length() - dbg.length());
                            Configuration.getConfiguration().getLogEntity().addLog(dbg);
                        }
                    }
                }
            }
            rd.close();
        } catch (Exception e) {
            e.printStackTrace();
            Configuration.getConfiguration().getDebugEntity().addLog(e, Logable.LOG_ERROR);
        }
        BufferedInputStream in;
        BufferedOutputStream out;
        Set entries = imageUrls.entrySet();
        Iterator it = entries.iterator();
        int c = 0;
        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry) it.next();
            String imageUrl = (String) entry.getValue();
            String id = (String) entry.getKey();
            String imagePath = dirName + File.separator + id + ".jpg";
            File f = new File(imagePath);
            if (f.exists()) continue;
            try {
                in = new BufferedInputStream(new URL(imageUrl).openConnection(p).getInputStream());
                Image image = javax.imageio.ImageIO.read(in);
                Icon i = new ImageIcon(image);
                jLabelImage.setIcon(i);
                out = new BufferedOutputStream(new FileOutputStream(f));
                BufferedImage bimage = csa.util.UtilityImage.toBufferedImage(image);
                if (bimage.getHeight() != 285) {
                    BufferedImage bimageCropped = bimage.getSubimage(11, 12, 200, 285);
                    Icon iCropped = new ImageIcon(bimageCropped);
                    jLabel4.setIcon(iCropped);
                    javax.imageio.ImageIO.write(bimageCropped, "jpg", f);
                } else javax.imageio.ImageIO.write(bimage, "jpg", f);
                in.close();
                c++;
                synchronized (this) {
                    String dbg = "(" + c + "/" + imageUrls.size() + ")Image successfully saved to: " + imagePath + "\n";
                    jTextAreaOut.insert(dbg, jTextAreaOut.getText().length());
                    try {
                        jTextAreaOut.setCaretPosition(jTextAreaOut.getText().length() - dbg.length());
                    } catch (Throwable e) {
                    }
                    Configuration.getConfiguration().getLogEntity().addLog(dbg);
                }
            } catch (Exception e) {
                e.printStackTrace();
                Configuration.getConfiguration().getDebugEntity().addLog(e, Logable.LOG_ERROR);
            }
        }
        jButtonStartImport.setEnabled(true);
        Card.addImagePathForSet(setName, dirName + File.separator);
        String dbg = "Import finished!\n";
        dbg = "\nImages and set are saved.";
        jTextAreaOut.insert(dbg, jTextAreaOut.getText().length());
        jTextAreaOut.setCaretPosition(jTextAreaOut.getText().length());
        Configuration.getConfiguration().getLogEntity().addLog(dbg);
        mLoadedCardSet.getData().mClass = "MagicSets";
        mLoadedCardSet.getData().mName = setName;
        mLoadedCardSet.joinedSave();
    }

    private javax.swing.ButtonGroup buttonGroup1;

    private javax.swing.JButton jButtonStartImport;

    private javax.swing.JCheckBox jCheckBoxPortal;

    private javax.swing.JCheckBox jCheckBoxPortal2;

    private javax.swing.JCheckBox jCheckBoxPortal3;

    private javax.swing.JCheckBox jCheckBoxStarter100;

    private javax.swing.JCheckBox jCheckBoxStarter99;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JLabel jLabel4;

    private javax.swing.JLabel jLabelImage;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JRadioButton jRadioButtonPType;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JTextArea jTextAreaOut;

    private javax.swing.JTextField jTextFieldBaseUrl;

    private javax.swing.JTextField jTextFieldPortal;

    private javax.swing.JTextField jTextFieldPortal2;

    private javax.swing.JTextField jTextFieldPortal3;

    private javax.swing.JTextField jTextFieldProxyPort;

    private javax.swing.JTextField jTextFieldProxyURL;

    private javax.swing.JTextField jTextFieldStarter100;

    private javax.swing.JTextField jTextFieldStarter99;
}
