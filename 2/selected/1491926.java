package net.face2face.ui;

import javax.swing.*;
import javax.swing.event.*;
import javax.swing.text.html.*;
import javax.swing.text.*;
import java.net.*;
import java.util.*;
import java.io.*;

/**
 *
 * @author  Patrice
 */
public class TestFrame extends javax.swing.JFrame {

    /** Creates new form ConfigurationFrameFrame */
    public TestFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        jScrollPane2 = new javax.swing.JScrollPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        initHTMLPane();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jDesktopPane1.setBorder(new javax.swing.border.MatteBorder(null));
        jInternalFrame2.setClosable(true);
        jInternalFrame2.setIconifiable(true);
        jInternalFrame2.setMaximizable(true);
        jInternalFrame2.setResizable(true);
        jInternalFrame2.setTitle(java.util.ResourceBundle.getBundle("resources/messages").getString("second"));
        jInternalFrame2.setVisible(true);
        jInternalFrame2.setBounds(180, 80, 310, 160);
        jDesktopPane1.add(jInternalFrame2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jInternalFrame1.setClosable(true);
        jInternalFrame1.setIconifiable(true);
        jInternalFrame1.setMaximizable(true);
        jInternalFrame1.setResizable(true);
        jInternalFrame1.setTitle(java.util.ResourceBundle.getBundle("resources/messages").getString("test"));
        jInternalFrame1.setVisible(true);
        jInternalFrame1.setBounds(50, 80, 120, 150);
        jDesktopPane1.add(jInternalFrame1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLabel1.setText(java.util.ResourceBundle.getBundle("resources/messages").getString("test"));
        jToolBar1.add(jLabel1);
        jButton1.setText(java.util.ResourceBundle.getBundle("resources/messages").getString("test"));
        jToolBar1.add(jButton1);
        jToolBar1.setBounds(0, 0, -1, -1);
        jDesktopPane1.add(jToolBar1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jSplitPane1.setLeftComponent(jDesktopPane1);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(200, 200));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 200));
        jSplitPane1.setRightComponent(jScrollPane1);
        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);
        pack();
    }

    class Hyperactive implements HyperlinkListener {

        public void hyperlinkUpdate(HyperlinkEvent e) {
            if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                JEditorPane pane = (JEditorPane) e.getSource();
                HTMLDocument doc = (HTMLDocument) pane.getDocument();
                URL base = doc.getBase();
                printDoc(doc);
                if (e instanceof HTMLFrameHyperlinkEvent) {
                    HTMLFrameHyperlinkEvent evt = (HTMLFrameHyperlinkEvent) e;
                    HTMLDocument doc2 = (HTMLDocument) pane.getDocument();
                    doc2.processHTMLFrameHyperlinkEvent(evt);
                } else {
                    try {
                        System.out.println(e.getURL());
                        pane.setPage(e.getURL());
                    } catch (Throwable t) {
                        t.printStackTrace();
                    }
                }
            }
        }
    }

    private void initHTMLPane() {
        JTextPane htmlPane = new javax.swing.JTextPane();
        htmlPane.addHyperlinkListener(new Hyperactive());
        jScrollPane1.setViewportView(htmlPane);
        try {
            URL url = new URL("file:///E:/Project/web_sites/delormepro/index.html");
            HTMLEditorKit kit = new HTMLEditorKit();
            Document doc = kit.createDefaultDocument();
            HTMLDocument htmlDoc = (HTMLDocument) doc;
            htmlDoc.setBase(url);
            URLConnection conn = url.openConnection();
            String type = conn.getContentType();
            String enc = conn.getContentEncoding();
            InputStream in = conn.getInputStream();
            Reader reader = new InputStreamReader(in, "iso-8859-1");
            kit.read(in, htmlDoc, 0);
            Element root = htmlDoc.getDefaultRootElement();
            printDoc(htmlDoc);
            System.out.println(htmlDoc);
            htmlPane.setDocument(htmlDoc);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printDoc(HTMLDocument doc) {
        Element elems[] = doc.getRootElements();
        System.out.println("===");
        for (int i = 0; i < elems.length; i++) {
            Element elem = elems[i];
            printelem(elem, 0);
        }
        System.out.println("===" + doc.getBase());
    }

    private void printelem(Element elem, int depth) {
        for (int i = 0; i < depth; i++) {
            System.out.print("_");
        }
        System.out.print(elem.getName());
        AttributeSet attrs = elem.getAttributes();
        Enumeration enums = attrs.getAttributeNames();
        while (enums.hasMoreElements()) {
            Object key = enums.nextElement();
            if (!key.toString().equals("name")) System.out.print(";" + key.toString() + "=" + attrs.getAttribute(key));
        }
        System.out.println();
        for (int i = 0; i < elem.getElementCount(); i++) {
            Element elem2 = elem.getElement(i);
            printelem(elem2, depth + 1);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        TestEnum test = TestEnum.Un;
        Object testObj = test;
        if (testObj instanceof Enum) {
            System.out.println("ok");
            Class testClass = testObj.getClass();
            System.out.println(testClass.getName());
            Object objs[] = testClass.getEnumConstants();
            for (Object obj : objs) {
                System.out.println(obj);
            }
        }
    }

    enum TestEnum {

        Un, deux, trois
    }

    ;

    private javax.swing.JButton jButton1;

    private javax.swing.JDesktopPane jDesktopPane1;

    private javax.swing.JInternalFrame jInternalFrame1;

    private javax.swing.JInternalFrame jInternalFrame2;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JSplitPane jSplitPane1;

    private javax.swing.JToolBar jToolBar1;
}
