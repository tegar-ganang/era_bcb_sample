package consumercredit;

import java.net.URL;
import java.net.URLConnection;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.jws.WebService;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

/**
 * This class was generated by Apache CXF 2.1.4 Sun May 10 03:47:01 CEST 2009
 * Generated source version: 2.1.4
 * 
 */
@WebService(endpointInterface = "consumercredit.WSCurrencyExchange", serviceName = "WSCurrencyExchangeService")
public class WSCurrencyExchangeImpl implements WSCurrencyExchange {

    private String[] currencies = null;

    private String exchangeRateDate = null;

    private Document xml = null;

    private void reload() {
        if (xml != null) {
            try {
                String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
                if (currentDate.equalsIgnoreCase(exchangeRateDate)) {
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        XPath xpath = null;
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            URLConnection conn = null;
            URL url = new URL("http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml");
            conn = url.openConnection();
            xml = docBuilder.parse(conn.getInputStream());
            xpath = XPathFactory.newInstance().newXPath();
            exchangeRateDate = xpath.evaluate("/Envelope/Cube/Cube/@time", xml);
            xpath = XPathFactory.newInstance().newXPath();
            NodeList currenciesNode = (NodeList) xpath.evaluate("/Envelope/Cube/Cube/Cube[@currency]", xml, XPathConstants.NODESET);
            currencies = new String[currenciesNode.getLength()];
            for (int i = 0; i < currencies.length; i++) {
                currencies[i] = currenciesNode.item(i).getAttributes().getNamedItem("currency").getTextContent();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public java.lang.String[] getCurrencies() {
        reload();
        return currencies;
    }

    public double getExchangeRate(java.lang.String to, java.lang.String from) {
        System.out.println(to);
        System.out.println(from);
        try {
            double _return = getExchangeRateFromEUR(from) / getExchangeRateFromEUR(to);
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    public double getConvertedAmount(double amount, java.lang.String from, java.lang.String to) {
        System.out.println(amount);
        System.out.println(from);
        System.out.println(to);
        try {
            double _return = amount * getExchangeRate(from, to);
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    public double getExchangeRateFromEUR(java.lang.String currency) {
        System.out.println(currency);
        try {
            if (currency == null) {
                return -1.0;
            }
            if (currency.equalsIgnoreCase("EUR")) {
                return 1.0;
            }
            reload();
            double result = -1.0;
            try {
                XPath xpath = XPathFactory.newInstance().newXPath();
                String exchangeRate = xpath.evaluate("/Envelope/Cube/Cube/Cube[@currency=\"" + currency + "\"]/@rate", xml);
                result = NumberFormat.getNumberInstance(Locale.ENGLISH).parse(exchangeRate).doubleValue();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return result;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    public java.lang.String getCountryCurrency(java.lang.String country) {
        System.out.println(country);
        try {
            String result = null;
            Locale[] locs = Locale.getAvailableLocales();
            System.out.println(locs);
            for (int i = 0; i < locs.length; i++) {
                System.out.println(i);
                if (locs[i].getDisplayCountry(Locale.ENGLISH).equalsIgnoreCase(country) || locs[i].getISO3Country().equalsIgnoreCase(country)) {
                    result = NumberFormat.getCurrencyInstance(locs[i]).getCurrency().getCurrencyCode();
                }
            }
            return result;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
}
