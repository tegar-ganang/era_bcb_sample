package org.xmlcml.cml.element;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.net.URL;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import nu.xom.Document;
import nu.xom.Element;
import nu.xom.Elements;
import nu.xom.Node;
import nu.xom.ParsingException;
import nu.xom.ValidityException;
import org.xmlcml.cml.attribute.GenericDictionaryMap;
import org.xmlcml.cml.attribute.UnitTypeAttribute;
import org.xmlcml.cml.base.CMLBuilder;
import org.xmlcml.cml.base.CMLElement;
import org.xmlcml.cml.base.CMLElements;
import org.xmlcml.cml.base.CMLException;
import org.xmlcml.cml.base.CMLRuntimeException;
import org.xmlcml.cml.interfacex.GenericDictionary;
import org.xmlcml.cml.interfacex.GenericEntry;
import org.xmlcml.cml.interfacex.IUnitList;
import org.xmlcml.cml.map.NamespaceToUnitListMap;

/**
 * user-modifiable class supporting unitList. * autogenerated from schema use as
 * a shell which can be edited
 *
 */
public class CMLUnitList extends AbstractUnitList implements GenericDictionary, IUnitList {

    /** namespaced element name.*/
    public static final String NS = C_E + TAG;

    Map<String, CMLUnit> unitMap;

    /**
	 * unitListMap associated with this unitList. allows resolution of SIUnits,
	 * etc.
	 */
    NamespaceToUnitListMap unitListMap = null;

    CMLUnitList siUnitList;

    /**
	 * contructor.
	 */
    public CMLUnitList() {
    }

    /**
	 * contructor.
	 *
	 * @param old
	 */
    public CMLUnitList(CMLUnitList old) {
        super((AbstractUnitList) old);
    }

    /**
	 * copy node .
	 *
	 * @return Node
	 */
    public Node copy() {
        return new CMLUnitList(this);
    }

    /**
	 * create new instance in context of parent, overridable by subclasses.
	 *
	 * @param parent
	 *            parent of element to be constructed (ignored by default)
	 * @return CMLUnitList
	 */
    public CMLElement makeElementInContext(Element parent) {
        return new CMLUnitList();
    }

    /**
	 * index entries by id.
	 *
	 */
    public void indexEntries() {
        Elements unitNodes = this.getChildCMLElements(CMLUnit.TAG);
        unitMap = new HashMap<String, CMLUnit>();
        for (int i = 0; i < unitNodes.size(); i++) {
            CMLUnit unit = (CMLUnit) unitNodes.get(i);
            String id = unit.getId();
            if (id != null) {
                unitMap.put(id, unit);
            }
        }
    }

    /**
	 * creates unitList from file;
	 *
	 * @param file
	 *            to create from
	 * @return the unitList or null
	 * @throws IOException
	 * @throws CMLException
	 *             if file is not a well-formed unitList
	 */
    public static CMLUnitList createUnitList(File file) throws IOException, CMLException {
        return createUnitList(file.toURL());
    }

    /**
	 * creates unitList from file;
	 *
	 * @param url
	 *            to create from
	 * @return the unitList or null
	 * @throws IOException
	 * @throws CMLException
	 *             if file is not a well-formed unitList
	 */
    public static CMLUnitList createUnitList(URL url) throws IOException, CMLException {
        Document dictDoc = null;
        InputStream in = null;
        try {
            in = url.openStream();
            dictDoc = new CMLBuilder().build(in);
        } catch (NullPointerException e) {
            e.printStackTrace();
            throw new CMLException("NULL " + e.getMessage() + S_SLASH + e.getCause() + " in " + url);
        } catch (ValidityException e) {
            throw new CMLException(S_EMPTY + e.getMessage() + S_SLASH + e.getCause() + " in " + url);
        } catch (ParsingException e) {
            e.printStackTrace();
            throw new CMLException(e, " in " + url);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        CMLUnitList dt = null;
        if (dictDoc != null) {
            Element root = dictDoc.getRootElement();
            if (root instanceof CMLUnitList) {
                dt = new CMLUnitList((CMLUnitList) root);
            } else {
            }
        }
        if (dt != null) {
            dt.indexEntries();
        }
        return dt;
    }

    /**
	 * add new unit.
	 *
	 * @param unit
	 *            to add
	 * @throws CMLRuntimeException
	 *             unit already present.
	 */
    public void addUnit(CMLUnit unit) throws CMLRuntimeException {
        String type = this.getType();
        if (type == null) {
            setType(UnitTypeAttribute.UNIT);
        } else if (!type.equals(UnitTypeAttribute.UNIT)) {
            throw new CMLRuntimeException("cannot add " + type + " to unitList/unit");
        }
        String id = unit.getId();
        if (id == null) {
            throw new CMLRuntimeException("Unit has no id");
        }
        if (getUnit(id) != null) {
            throw new CMLRuntimeException("Unit for " + id + " already present");
        }
        unitMap.put(id, unit);
        this.appendChild(unit);
    }

    /**
	 * remove Unit.
	 *
	 * @param unit
	 *            to remove, no action if not present
	 *
	 */
    public void removeUnit(CMLUnit unit) {
        if (UnitTypeAttribute.UNIT.equals(this.getType())) {
            String id = unit.getId();
            if (id != null) {
                if (getUnit(id) != null) {
                    unitMap.remove(unit);
                    unit.detach();
                }
            }
        }
    }

    /**
	 * get Entry by id.
	 *
	 * @deprecated inherited method; use getUnit instead
	 * @param id
	 *            the entryId (null if absent)
	 * @return entry
	 */
    public GenericEntry getGenericEntry(String id) {
        return (getUnit(id));
    }

    /**
	 * get Unit by id.
	 *
	 * @param id
	 *            the entryId (null if absent)
	 * @return entry
	 */
    public CMLUnit getUnit(String id) {
        this.indexEntries();
        return (unitMap == null) ? null : unitMap.get(id);
    }

    /**
	 * creates a unitList or unitTypeList dictionary from a file. the file must
	 * contain a root unitList/unit or unitTypeList/unitType element with unit
	 * children. This seems to duplicate CMLUnitList.createUnitList(File)
	 *
	 * @param file
	 * @throws IOException
	 * @return dictionary of type CMLUnitList or CMLUnitTypeList
	 */
    public GenericDictionary createDictionary(File file) throws IOException {
        return createDictionary(file.toURL());
    }

    /**
	 * creates a unitList or unitTypeList dictionary from a file. the file must
	 * contain a root unitList/unit or unitTypeList/unitType element with unit
	 * children. This seems to duplicate CMLUnitList.createUnitList(File)
	 *
	 * @param url
	 * @throws IOException
	 * @return dictionary of type CMLUnitList or CMLUnitTypeList
	 */
    public GenericDictionary createDictionary(URL url) throws IOException {
        Document dictDoc = CMLDictionary.createDictionary0(url);
        GenericDictionary dt = null;
        if (dictDoc != null) {
            Element root = dictDoc.getRootElement();
            if (root instanceof CMLUnitList) {
                dt = new CMLUnitList((CMLUnitList) root);
            } else if (root instanceof CMLUnitTypeList) {
                dt = new CMLUnitTypeList((CMLUnitTypeList) root);
            } else {
                throw new CMLRuntimeException("Expected CMLUnitList root element in (" + url + "), found: " + root.getClass().getName() + S_SLASH + root.getLocalName());
            }
        }
        if (dt != null) {
            dt.indexEntries();
        }
        return dt;
    }

    /**
	 * create dictionaryMap. currently returns null.
	 *
	 * @deprecated returns null
	 * @param file -
	 *            normally a directory?
	 * @param useSubdirectories
	 * @return unitListMap
	 */
    public GenericDictionaryMap createDictionaryMap(File file, boolean useSubdirectories) {
        return null;
    }

    /**
	 * writes units dictionary as HTML.
	 *
	 * @param w
	 *            writer
	 * @throws IOException
	 */
    public void writeHTML(Writer w) throws IOException {
        CMLElements<CMLUnit> units = this.getUnitElements();
        writeHTMLHeader(w);
        Map<String, CMLUnit> idMap = new HashMap<String, CMLUnit>();
        for (CMLUnit unit : units) {
            idMap.put(unit.getId(), unit);
        }
        String[] ss = idMap.keySet().toArray(new String[0]);
        Arrays.sort(ss);
        for (String s : ss) {
            CMLUnit unit = idMap.get(s);
            w.write("<tr>");
            if (unit == null) {
                w.write("NULL");
            } else {
                unit.writeHTML(w);
            }
            w.write("</tr>");
        }
        writeHTMLFooter(w);
    }

    private void writeHTMLHeader(Writer w) throws IOException {
        w.write("<html>\n");
        w.write("<h1> Units dictionary: " + this.getTitle() + "</h1>");
        w.write("<p>namespace: <b>" + this.getNamespace() + "</b></p>\n");
        w.write("<table border='1'>\n");
        CMLUnit.writeHTMLTableHeader(w);
    }

    private void writeHTMLFooter(Writer w) throws IOException {
        w.write("</table>\n");
        w.write("</html>\n");
    }

    /**
	 * associate SI UnitList with this.
	 *
	 * @param siUnitList
	 *            to associate
	 */
    public void setSIUnitList(CMLUnitList siUnitList) {
        this.siUnitList = siUnitList;
    }

    /**
	 * gets associated SI unitList. sets unitListMap and then calls
	 * getSIUnitList()
	 *
	 * @param unitListMap
	 *            to set
	 * @return the unitList
	 */
    public CMLUnitList getSIUnitList(NamespaceToUnitListMap unitListMap) {
        if (siUnitList == null) {
            this.setUnitListMap(unitListMap);
        }
        return this.getSIUnitList();
    }

    /**
	 * gets associated SI unitList. requires either siUnitList or unitListMap to
	 * be set uses siNamespace and unitListMap to find SI units dictionary. if
	 * found, sets the SIUnitList to this.
	 *
	 * @return the unitList
	 */
    public CMLUnitList getSIUnitList() {
        if (siUnitList == null) {
            String siNamespace = this.getSiNamespace();
            if (siNamespace != null) {
                if (unitListMap == null) {
                    throw new CMLRuntimeException("getSIUnitList requires unitListMap ");
                }
                siUnitList = (CMLUnitList) unitListMap.getDictionary(siNamespace);
                if (siUnitList != null) {
                    this.setSIUnitList(siUnitList);
                }
            }
        }
        return siUnitList;
    }

    /**
	 * is this an SIUnitList. compare this.siNamespace with its namespace
	 *
	 * @return true if has siNamespace and this agrees with its namespace
	 */
    public boolean isSIUnitList() {
        boolean isSI = false;
        String siNamespace = this.getSiNamespace();
        if (siNamespace != null) {
            isSI = siNamespace.equals(this.getNamespace());
        }
        return isSI;
    }

    /**
	 * associates a unitListMap with this unitList. necessary to resolve
	 * parentSI and unitTypes.
	 *
	 * @param unitListMap
	 *            of namespace->unitList
	 */
    public void setUnitListMap(NamespaceToUnitListMap unitListMap) {
        this.unitListMap = unitListMap;
    }

    /**
	 * gets unitListMap associated with this unitList. necessary to resolve
	 * parentSI and unitTypes.
	 *
	 * @return unitListMap of namespace->unitList or null
	 */
    public NamespaceToUnitListMap getUnitListMap() {
        return this.unitListMap;
    }

    /**
	 * get number of child CMLUnits.
	 *
	 * @return number of units
	 */
    public int size() {
        return this.getUnitElements().size();
    }
}
