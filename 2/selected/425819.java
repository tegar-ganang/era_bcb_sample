package com.ssg.tools.jsonviewer;

import com.ssg.tools.jsonviewer.components.helpers.ComparatorDocumentWriter;
import com.ssg.tools.jsonviewer.components.helpers.ComparatorDocumentWriter.ComparatorHighlight;
import com.ssg.tools.jsonviewer.components.JSONViewerPanel;
import com.ssg.tools.jsonviewer.components.helpers.StructureContent;
import com.ssg.tools.jsonviewer.components.helpers.StructureDocumentWriter;
import com.ssg.tools.jsonviewer.components.helpers.StructureStyles;
import com.ssg.tools.jsonviewer.components.helpers.StructureTreeModel;
import com.ssg.tools.jsonxml.Comparer;
import com.ssg.tools.jsonxml.Comparer.COMPARE_STATUS;
import com.ssg.tools.jsonxml.Comparer.ComparatorContext;
import com.ssg.tools.jsonxml.Comparer.ComparatorPair;
import com.ssg.tools.jsonxml.Formatter;
import com.ssg.tools.jsonxml.Parser;
import com.ssg.tools.jsonxml.dump.DumpFormat;
import com.ssg.tools.jsonxml.json.JSONFormatterContext;
import com.ssg.tools.jsonxml.json.JSONParser;
import com.ssg.tools.jsonxml.json.JSONParserContext;
import com.ssg.tools.jsonxml.common.ParserContext;
import com.ssg.tools.jsonxml.json.ReflectiveJSONParser;
import com.ssg.tools.jsonxml.xml.ReflectiveXMLParser;
import com.ssg.tools.jsonxml.common.FormatterContext;
import com.ssg.tools.jsonxml.xml.XMLFormatterContext;
import com.ssg.tools.jsonxml.xml.XMLParser;
import com.ssg.tools.jsonxml.xml.XMLParserContext;
import com.ssg.tools.jsonxml.common.Formats;
import com.ssg.tools.jsonxml.common.ReflectiveBuilder;
import com.ssg.tools.jsonxml.common.Utilities;
import com.ssg.tools.jsonxml.common.Utilities.Pair;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.lang.reflect.Field;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.EventObject;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.AbstractButton;
import javax.swing.DropMode;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JRadioButton;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.TransferHandler;
import javax.swing.TransferHandler.TransferSupport;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.text.Position;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.ExpandVetoException;
import javax.swing.tree.TreeCellEditor;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author ssg
 */
public class SampleViewer extends javax.swing.JFrame {

    /** Creates new form SampleViewer */
    public SampleViewer() {
        initComponents();
        initCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        buttonGroupFormat = new javax.swing.ButtonGroup();
        buttonGroupCompareMode = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTree2 = new javax.swing.JTree();
        jScrollPaneSwitches = new javax.swing.JScrollPane();
        jPanelSwitches = new javax.swing.JPanel();
        jRadioButtonJSON = new javax.swing.JRadioButton();
        jRadioButtonXML = new javax.swing.JRadioButton();
        jRadioButtonDump = new javax.swing.JRadioButton();
        jCheckBoxIndented = new javax.swing.JCheckBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jCheckBoxIdentity = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jCheckBoxCOMPARE = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jSplitPane1.setDividerLocation(351);
        jSplitPane1.setDividerSize(2);
        jScrollPane2.setViewportView(jTextPane1);
        jSplitPane1.setRightComponent(jScrollPane2);
        jSplitPane2.setDividerLocation(300);
        jSplitPane2.setDividerSize(2);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jTree1.setEditable(true);
        jScrollPane3.setViewportView(jTree1);
        jSplitPane2.setTopComponent(jScrollPane3);
        jScrollPane4.setViewportView(jTree2);
        jSplitPane2.setRightComponent(jScrollPane4);
        jSplitPane1.setLeftComponent(jSplitPane2);
        jScrollPaneSwitches.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneSwitches.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jPanelSwitches.setMaximumSize(new java.awt.Dimension(32767, 47));
        jPanelSwitches.setMinimumSize(new java.awt.Dimension(0, 47));
        buttonGroupFormat.add(jRadioButtonJSON);
        jRadioButtonJSON.setSelected(true);
        jRadioButtonJSON.setText("JSON");
        jRadioButtonJSON.setRolloverEnabled(false);
        jRadioButtonJSON.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonJSONActionPerformed(evt);
            }
        });
        buttonGroupFormat.add(jRadioButtonXML);
        jRadioButtonXML.setText("XML");
        jRadioButtonXML.setRolloverEnabled(false);
        buttonGroupFormat.add(jRadioButtonDump);
        jRadioButtonDump.setText("Dump");
        jRadioButtonDump.setRolloverEnabled(false);
        jCheckBoxIndented.setSelected(true);
        jCheckBoxIndented.setText("indented");
        jCheckBoxIndented.setRolloverEnabled(false);
        buttonGroupCompareMode.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("ordered");
        jRadioButton1.setRolloverEnabled(false);
        buttonGroupCompareMode.add(jRadioButton2);
        jRadioButton2.setText("unordered");
        jRadioButton2.setRolloverEnabled(false);
        buttonGroupCompareMode.add(jRadioButton3);
        jRadioButton3.setText("multi-match");
        jRadioButton3.setRolloverEnabled(false);
        jCheckBoxIdentity.setText("identity");
        jCheckBoxIdentity.setRolloverEnabled(false);
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jCheckBoxCOMPARE.setText("COMPARE");
        jCheckBoxCOMPARE.setRolloverEnabled(false);
        jCheckBoxCOMPARE.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCOMPAREActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout jPanelSwitchesLayout = new javax.swing.GroupLayout(jPanelSwitches);
        jPanelSwitches.setLayout(jPanelSwitchesLayout);
        jPanelSwitchesLayout.setHorizontalGroup(jPanelSwitchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelSwitchesLayout.createSequentialGroup().addGap(8, 8, 8).addComponent(jRadioButtonJSON).addComponent(jRadioButtonXML).addComponent(jRadioButtonDump).addGap(18, 18, 18).addComponent(jCheckBoxIndented).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jCheckBoxCOMPARE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jRadioButton1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jRadioButton2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jRadioButton3).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jCheckBoxIdentity).addContainerGap(338, Short.MAX_VALUE)));
        jPanelSwitchesLayout.setVerticalGroup(jPanelSwitchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelSwitchesLayout.createSequentialGroup().addGroup(jPanelSwitchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanelSwitchesLayout.createSequentialGroup().addContainerGap().addGroup(jPanelSwitchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jRadioButtonJSON).addComponent(jRadioButtonXML).addGroup(jPanelSwitchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jRadioButtonDump).addComponent(jCheckBoxIndented).addComponent(jRadioButton1).addComponent(jRadioButton2).addComponent(jRadioButton3).addComponent(jCheckBoxIdentity, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE).addComponent(jCheckBoxCOMPARE)))).addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)).addContainerGap()));
        jScrollPaneSwitches.setViewportView(jPanelSwitches);
        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);
        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);
        setJMenuBar(jMenuBar1);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPaneSwitches, javax.swing.GroupLayout.DEFAULT_SIZE, 951, Short.MAX_VALUE).addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 951, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jScrollPaneSwitches, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)));
        pack();
    }

    private void jRadioButtonJSONActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void jCheckBoxCOMPAREActionPerformed(java.awt.event.ActionEvent evt) {
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                JFrame frame = new SampleViewer();
                frame.setVisible(true);
            }
        });
    }

    private javax.swing.ButtonGroup buttonGroupCompareMode;

    private javax.swing.ButtonGroup buttonGroupFormat;

    private javax.swing.JCheckBox jCheckBoxCOMPARE;

    private javax.swing.JCheckBox jCheckBoxIdentity;

    private javax.swing.JCheckBox jCheckBoxIndented;

    private javax.swing.JMenu jMenu1;

    private javax.swing.JMenu jMenu2;

    private javax.swing.JMenuBar jMenuBar1;

    private javax.swing.JPanel jPanelSwitches;

    private javax.swing.JRadioButton jRadioButton1;

    private javax.swing.JRadioButton jRadioButton2;

    private javax.swing.JRadioButton jRadioButton3;

    private javax.swing.JRadioButton jRadioButtonDump;

    private javax.swing.JRadioButton jRadioButtonJSON;

    private javax.swing.JRadioButton jRadioButtonXML;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JScrollPane jScrollPane3;

    private javax.swing.JScrollPane jScrollPane4;

    private javax.swing.JScrollPane jScrollPaneSwitches;

    private javax.swing.JSeparator jSeparator1;

    private javax.swing.JSplitPane jSplitPane1;

    private javax.swing.JSplitPane jSplitPane2;

    private javax.swing.JTextPane jTextPane1;

    private javax.swing.JTree jTree1;

    private javax.swing.JTree jTree2;

    public final List<File> _files = new ArrayList<File>();

    private Object _object;

    private Object _objectA;

    private Object _objectB;

    JSONViewerPanel _comparatorPanel = new JSONViewerPanel();

    ComparatorDocumentWriter _comparatorWriter = null;

    ReflectiveBuilder _reflectiveBuilder = new ReflectiveBuilder();

    Formats _formats = new Formats();

    void initTree(JComponent tree, Object obj) {
        if (tree instanceof JTree) {
            if (tree.equals(jTree1)) {
                setObjectA(obj);
            } else {
                setObjectB(obj);
            }
            TreeModel tm = new StructureTreeModel(new DefaultMutableTreeNode(obj), _reflectiveBuilder, _formats);
            ((JTree) tree).setModel(tm);
            try {
                jTextPane1.getHighlighter().removeAllHighlights();
                _comparatorPanel.getLeft().getHighlighter().removeAllHighlights();
                _comparatorPanel.getRight().getHighlighter().removeAllHighlights();
            } catch (Throwable th) {
                th.printStackTrace(System.out);
            }
        }
    }

    void initTextArea(Object obj) {
        jScrollPane2.setViewportView(jTextPane1);
        boolean indented = jCheckBoxIndented.isSelected();
        FormatterContext format = null;
        ParserContext parserContext = null;
        Parser parser = null;
        for (AbstractButton btn : Collections.list(buttonGroupFormat.getElements())) {
            if (btn.isSelected()) {
                if (btn.getText().contains("JSON")) {
                    format = new JSONFormatterContext(indented);
                    parserContext = new JSONParserContext();
                    parser = new JSONParser();
                } else if (btn.getText().contains("XML")) {
                    format = new XMLFormatterContext(indented);
                    parserContext = new XMLParserContext();
                    parser = new XMLParser();
                } else if (btn.getText().contains("Dump")) {
                    format = new DumpFormat(indented);
                }
            }
        }
        if (format == null) {
            format = new JSONFormatterContext(indented);
        }
        setObject(obj);
        StructureStyles styles = new StructureStyles();
        StructureContent content = new StructureContent(getObject(), format, parserContext, parser);
        StructureDocumentWriter sw = new StructureDocumentWriter(styles, content);
        sw.setFormat(format);
        try {
            Formatter.toFormattedString((Writer) sw, obj, "", format, false);
        } catch (IOException ioex) {
        }
        jTextPane1.setDocument(sw.getDocument());
    }

    void initTextArea(Object a, Object b) {
        jScrollPane2.setViewportView(_comparatorPanel);
        boolean indented = true;
        final ComparatorContext context = new ComparatorContext();
        for (AbstractButton btn : Collections.list(buttonGroupCompareMode.getElements())) {
            if (btn.isSelected()) {
                String mode = btn.getText();
                if ("ordered".equals(mode)) {
                    context.setUnorderedLists(false);
                    context.setCheckMultiMatch(false);
                } else if ("unordered".equals(mode)) {
                    context.setUnorderedLists(true);
                    context.setCheckMultiMatch(false);
                } else if ("mutli-match".equals(mode)) {
                    context.setUnorderedLists(true);
                    context.setCheckMultiMatch(true);
                }
            }
        }
        FormatterContext format = null;
        for (AbstractButton btn : Collections.list(buttonGroupFormat.getElements())) {
            if (btn.isSelected()) {
                if (btn.getText().contains("JSON")) {
                    format = new JSONFormatterContext(indented) {

                        @Override
                        public Collection<String> filteredKeys(Map obj) {
                            Collection<String> result = super.filteredKeys(obj);
                            if (context.isUnorderedLists() || context.isCheckMultiMatch()) {
                                Collections.sort((List) result);
                            }
                            return result;
                        }
                    };
                } else if (btn.getText().contains("XML")) {
                    format = new XMLFormatterContext(indented) {

                        @Override
                        public Collection<String> filteredKeys(Map obj) {
                            Collection<String> result = super.filteredKeys(obj);
                            if (context.isUnorderedLists() || context.isCheckMultiMatch()) {
                                Collections.sort((List) result);
                            }
                            return result;
                        }
                    };
                } else if (btn.getText().contains("Dump")) {
                    format = new DumpFormat(indented) {

                        @Override
                        public Collection<String> filteredKeys(Map obj) {
                            Collection<String> result = super.filteredKeys(obj);
                            if (context.isUnorderedLists() || context.isCheckMultiMatch()) {
                                Collections.sort((List) result);
                            }
                            return result;
                        }
                    };
                }
            }
        }
        if (format == null) {
            format = new JSONFormatterContext(indented) {

                @Override
                public Collection<String> filteredKeys(Map obj) {
                    Collection<String> result = super.filteredKeys(obj);
                    if (context.isUnorderedLists() || context.isCheckMultiMatch()) {
                        Collections.sort((List) result);
                    }
                    return result;
                }
            };
        }
        setObjectA(a);
        setObjectB(b);
        final JTextPane paneA = _comparatorPanel.getLeft();
        final JTextPane paneB = _comparatorPanel.getRight();
        int depth = 100;
        Comparer comparer = new Comparer();
        ComparatorPair result = comparer.compare(context, a, b, depth);
        StructureStyles styles = new StructureStyles();
        ComparatorDocumentWriter sw = new ComparatorDocumentWriter(styles, result);
        _comparatorWriter = sw;
        sw.setFormat(format);
        sw.setProcessA(true);
        try {
            Formatter.toFormattedString((Writer) sw, a, "", format, false);
        } catch (IOException ioex) {
        }
        sw.setProcessA(false);
        try {
            Formatter.toFormattedString((Writer) sw, b, "", format, false);
        } catch (IOException ioex) {
        }
        sw.setProcessA(true);
        paneA.setDocument(sw.getDocumentA());
        paneB.setDocument(sw.getDocumentB());
        DocumentListener dl = new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                showHighlights(_comparatorWriter.createLineComparisonHighlights(), paneA.getDocument());
            }

            public void removeUpdate(DocumentEvent e) {
                showHighlights(_comparatorWriter.createLineComparisonHighlights(), paneA.getDocument());
            }

            public void changedUpdate(DocumentEvent e) {
                showHighlights(_comparatorWriter.createLineComparisonHighlights(), paneA.getDocument());
            }
        };
        paneA.getDocument().addDocumentListener(dl);
        paneB.getDocument().addDocumentListener(dl);
        if (1 == 0) {
            try {
                System.out.println("\n\n------------ document A:\n" + sw.getDocumentA().getText(0, sw.getDocumentA().getLength()));
                System.out.println("\n\n------------ document B:\n" + sw.getDocumentB().getText(0, sw.getDocumentB().getLength()));
            } catch (Throwable th) {
            }
        }
        List<ComparatorHighlight> highlights = sw.synchAB(jCheckBoxIdentity.isSelected());
        showHighlights(highlights, sw.getDocumentA());
        _comparatorPanel.repaint();
    }

    private boolean _highlighterBusy = false;

    public void showHighlights(List<ComparatorHighlight> highlights, Object a) {
        if (_highlighterBusy) {
            return;
        }
        _highlighterBusy = true;
        try {
            JTextPane paneA = _comparatorPanel.getLeft();
            JTextPane paneB = _comparatorPanel.getRight();
            paneA.getHighlighter().removeAllHighlights();
            paneB.getHighlighter().removeAllHighlights();
            for (ComparatorHighlight hc : highlights) {
                JTextPane textPane = (hc.getDocument().equals(a)) ? paneA : paneB;
                try {
                    textPane.getHighlighter().addHighlight(hc.getPos(), hc.getPos() + hc.getLen(), hc.getHighlight());
                } catch (Throwable th) {
                    th.printStackTrace();
                }
            }
            _comparatorPanel.invalidate();
            _comparatorPanel.repaint();
        } finally {
            _highlighterBusy = false;
        }
    }

    /**
     * Tries to load data as XML or JSON. On success returns true otherwise - false.
     */
    public boolean loadData(JComponent comp, String title, File file) {
        if (file != null) {
            try {
                Reader r = new FileReader(file);
                Parser parser = new ReflectiveXMLParser();
                ParserContext parserContext = new XMLParserContext();
                parserContext.setReflectiveBuilder(_reflectiveBuilder);
                Object obj = parser.parse(r, parserContext);
                if (obj != null) {
                    Map m = new HashMap();
                    m.put(title, obj);
                    initTree(comp, m);
                }
                return true;
            } catch (Throwable th) {
                System.out.println(getClass().getSimpleName() + ".loadData: FAILED to load as XML: " + th);
            }
            try {
                Reader r = new FileReader(file);
                Parser parser = new ReflectiveJSONParser();
                ParserContext parserContext = new JSONParserContext();
                parserContext.setReflectiveBuilder(_reflectiveBuilder);
                Object obj = parser.parse(r, parserContext);
                if (obj != null) {
                    Map m = new HashMap();
                    m.put(title, obj);
                    initTree(comp, m);
                }
                return true;
            } catch (Throwable th) {
                System.out.println(getClass().getSimpleName() + ".loadData: FAILED to load as JSON: " + th);
            }
        }
        return false;
    }

    void initCustom() {
        jScrollPane2.setViewportView(_comparatorPanel);
        jScrollPane2.setViewportView(jTextPane1);
        jTree1.setDragEnabled(true);
        jTree1.setDropMode(DropMode.ON);
        initTree(jTree1, sampleData());
        initTree(jTree2, sampleData());
        TransferHandler th = new TransferHandler() {

            @Override
            public int getSourceActions(JComponent c) {
                return COPY;
            }

            @Override
            protected Transferable createTransferable(JComponent c) {
                final JTree tree = (c instanceof JTree) ? (JTree) c : null;
                return new Transferable() {

                    public DataFlavor[] getTransferDataFlavors() {
                        try {
                            DataFlavor df = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType + ";class=java.lang.Object");
                            return new DataFlavor[] { df };
                        } catch (Throwable th) {
                            return null;
                        }
                    }

                    public boolean isDataFlavorSupported(DataFlavor flavor) {
                        return true;
                    }

                    public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
                        TreePath tsp = tree.getSelectionModel().getSelectionPath();
                        if (tsp != null) {
                            return tsp.getLastPathComponent();
                        } else {
                            return null;
                        }
                    }
                };
            }

            @Override
            public boolean canImport(TransferSupport support) {
                return true;
            }

            @Override
            public boolean canImport(JComponent comp, DataFlavor[] transferFlavors) {
                return true;
            }

            @Override
            public boolean importData(TransferSupport support) {
                return super.importData(support);
            }

            @Override
            public boolean importData(JComponent comp, Transferable t) {
                Cursor oldCursor = comp.getCursor();
                comp.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                try {
                    for (DataFlavor df : t.getTransferDataFlavors()) {
                        try {
                            if (df.isMimeTypeEqual(DataFlavor.javaJVMLocalObjectMimeType)) {
                                Object data = t.getTransferData(df);
                                if (data != null) {
                                    initTree(comp, data);
                                    break;
                                }
                            } else if (df.isFlavorTextType()) {
                                Object data = t.getTransferData(df);
                                if (data instanceof String) {
                                    try {
                                        URL url = new URL((String) data);
                                        InputStream is = url.openStream();
                                        File file = File.createTempFile("__cache", "___");
                                        file.deleteOnExit();
                                        OutputStream os = new BufferedOutputStream(new FileOutputStream(file), 1024 * 10);
                                        byte[] buf = new byte[1024 * 4];
                                        int c = 0;
                                        while ((c = is.read(buf)) > 0) {
                                            os.write(buf, 0, c);
                                        }
                                        is.close();
                                        os.close();
                                        if (loadData(comp, url.toString(), file)) {
                                            _files.clear();
                                            _files.add(file);
                                            break;
                                        }
                                    } catch (Throwable th) {
                                        th.printStackTrace();
                                    }
                                }
                            } else {
                                Object data = t.getTransferData(df);
                                if (data instanceof List && ((List) data).size() > 0) {
                                    List list = (List) data;
                                    Object item = list.get(0);
                                    if (item instanceof File) {
                                        if (loadData(comp, ((File) item).getAbsolutePath(), (File) item)) {
                                            _files.clear();
                                            _files.add((File) item);
                                            break;
                                        }
                                    }
                                }
                            }
                        } catch (UnsupportedFlavorException ufex) {
                        } catch (IOException ioex) {
                        }
                    }
                } finally {
                    comp.setCursor(oldCursor);
                }
                return true;
            }
        };
        jTree1.setTransferHandler(th);
        jTree2.setTransferHandler(th);
        TreeSelectionListener tsl = new TreeSelectionListener() {

            public void valueChanged(TreeSelectionEvent e) {
                Object a = null;
                Object b = null;
                Object c = null;
                JTree tree = (JTree) e.getSource();
                TreeSelectionModel tsm = tree.getSelectionModel();
                for (TreePath tp : tsm.getSelectionPaths()) {
                    if (tp.getPathCount() > 0) {
                        if (a == null) {
                            a = tp;
                        } else if (b == null) {
                            b = tp;
                        } else {
                            c = tp;
                        }
                    }
                }
                if (c != null) {
                    return;
                }
                if (a != null) {
                    a = ((TreePath) a).getPathComponent(((TreePath) a).getPathCount() - 1);
                    if (a instanceof DefaultMutableTreeNode) {
                        a = ((DefaultMutableTreeNode) a).getUserObject();
                    }
                }
                if (b != null) {
                    b = ((TreePath) b).getPathComponent(((TreePath) b).getPathCount() - 1);
                    if (b instanceof DefaultMutableTreeNode) {
                        b = ((DefaultMutableTreeNode) b).getUserObject();
                    }
                }
                if (b != null) {
                    try {
                        if (a instanceof StructureTreeModel.PairInTree) {
                            a = ((StructureTreeModel.PairInTree) a).getB();
                        }
                        if (b instanceof StructureTreeModel.PairInTree) {
                            b = ((StructureTreeModel.PairInTree) b).getB();
                        }
                        setObjectA(a);
                        setObjectB(b);
                        if (jCheckBoxCOMPARE.isSelected()) {
                            initTextArea(getObjectA(), getObjectB());
                        } else {
                            setObject(b);
                            initTextArea(getObject());
                        }
                    } catch (Throwable th) {
                        th.printStackTrace();
                    }
                } else {
                    try {
                        if (a instanceof StructureTreeModel.PairInTree) {
                            a = ((StructureTreeModel.PairInTree) a).getB();
                        }
                        setObject(a);
                        if (tree.equals(jTree1)) {
                            setObjectA(a);
                        } else {
                            setObjectB(a);
                        }
                        if (jCheckBoxCOMPARE.isSelected()) {
                            initTextArea(getObjectA(), getObjectB());
                        } else {
                            initTextArea(getObject());
                        }
                    } catch (Throwable th) {
                        th.printStackTrace();
                    }
                }
            }
        };
        jTree1.addTreeSelectionListener(tsl);
        jTree2.addTreeSelectionListener(tsl);
        TreeCellEditor tce1 = new DefaultTreeCellEditor(jTree1, new DefaultTreeCellRenderer()) {

            @Override
            public boolean isCellEditable(EventObject event) {
                JTree tree = (JTree) event.getSource();
                Object obj = tree.getSelectionPath().getLastPathComponent();
                if (obj instanceof DefaultMutableTreeNode) {
                    obj = ((DefaultMutableTreeNode) obj).getUserObject();
                }
                return Utilities.isScalarOrString(obj);
            }
        };
        TreeCellEditor tce2 = new DefaultTreeCellEditor(jTree1, new DefaultTreeCellRenderer());
        jTree1.setCellEditor(tce1);
        jTree2.setCellEditor(tce2);
        TreeManipulator tm = new TreeManipulator();
        jTree1.addTreeWillExpandListener(tm);
        jTree1.addKeyListener(tm);
        ChangeListener buttonChangeListener = new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
                JComponent comp = (JComponent) e.getSource();
                Cursor oldCursor = comp.getCursor();
                if (e.getSource() instanceof JCheckBox || (e.getSource() instanceof JRadioButton && ((JRadioButton) e.getSource()).isSelected())) {
                    try {
                        comp.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        if (!jCheckBoxCOMPARE.isSelected()) {
                            initTextArea(getObject());
                        } else {
                            initTextArea(getObjectA(), getObjectB());
                        }
                    } finally {
                        comp.setCursor(oldCursor);
                    }
                }
            }
        };
        jCheckBoxIndented.addChangeListener(buttonChangeListener);
        for (AbstractButton b : Collections.list(buttonGroupFormat.getElements())) {
            b.addChangeListener(buttonChangeListener);
        }
        jCheckBoxCOMPARE.addChangeListener(buttonChangeListener);
        jCheckBoxIdentity.addChangeListener(buttonChangeListener);
        for (AbstractButton b : Collections.list(buttonGroupCompareMode.getElements())) {
            b.addChangeListener(buttonChangeListener);
        }
        KeyListener kl = new KeyListener() {

            boolean _flag = false;

            public void keyTyped(KeyEvent e) {
            }

            public void keyPressed(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
            }
        };
        jTextPane1.addKeyListener(kl);
        jTextPane1.addCaretListener(new CaretListener() {

            public void caretUpdate(CaretEvent e) {
                JTextPane pane = (JTextPane) e.getSource();
                try {
                    Field gc = pane.getDocument().getClass().getSuperclass().getDeclaredField("data");
                    gc.setAccessible(true);
                    if (gc.get(pane.getDocument()) instanceof StructureContent) {
                        StructureContent c = (StructureContent) gc.get(pane.getDocument());
                        List<Pair<Object, Pair<Position, Position>>> lst = c.findObjectsForPosition(pane.getCaretPosition());
                        System.out.println("\nCaret position: " + pane.getCaretPosition());
                        for (Pair<Object, Pair<Position, Position>> p : lst) {
                            System.out.println("  " + p.getB().getA().getOffset() + "-" + p.getB().getB().getOffset() + " : " + p.getA());
                        }
                        pane.getHighlighter().removeAllHighlights();
                        if (!lst.isEmpty()) {
                            Pair<Object, Pair<Position, Position>> p = lst.get(0);
                            System.out.println("\nPositions info:\n" + c.dumpObjectPositions(p.getA()));
                            pane.getHighlighter().addHighlight(p.getB().getA().getOffset() + 1, p.getB().getB().getOffset() + 1, (new StructureStyles()).getHighlighter(COMPARE_STATUS.mismatch));
                            pane.invalidate();
                            pane.repaint();
                        }
                    }
                } catch (Throwable th) {
                    th.printStackTrace(System.out);
                }
            }
        });
        kl = new KeyListener() {

            boolean _flag = false;

            public void keyTyped(KeyEvent e) {
            }

            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == 82 && e.isControlDown() && !_flag) {
                    _flag = true;
                }
            }

            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == 82 && e.isControlDown() && _flag) {
                    _flag = false;
                    showHighlights(_comparatorWriter.createLineComparisonHighlights(), _comparatorPanel.getLeft().getDocument());
                }
            }
        };
        _comparatorPanel.getLeft().addKeyListener(kl);
        _comparatorPanel.getRight().addKeyListener(kl);
        _comparatorPanel.getLeft().setMinimumSize(new Dimension(0, 0));
        _comparatorPanel.getRight().setMinimumSize(new Dimension(0, 0));
    }

    Object sampleData() {
        String resource = getClass().getName().replace(".", "/");
        resource = resource.substring(0, resource.lastIndexOf('/') + 1);
        resource = "com/ssg/tools/jsonviewer/components/";
        resource = resource + "SampleData2.xml";
        Object obj = new LinkedHashMap();
        try {
            obj = (new XMLParser()).parse(Utilities.getReaderForResource(resource));
        } catch (Throwable th) {
            th.printStackTrace();
        }
        if (obj instanceof Map) {
            Map map = (Map) obj;
            map.put("A", new Date());
            map.put("Z", new ZZZ());
            map.put("Z2", new ZZZ());
            ZZZ z3 = new ZZZ();
            ZZZ z4 = new ZZZ();
            z4.setChild(z3);
            map.put("Z4", z4);
            List a = new ArrayList();
            List b = new ArrayList();
            a.add("aaa");
            b.add("aaa");
            a.add("bbb");
            b.add("bbb");
            a.add(1.0);
            b.add(1L);
            b.add(1.0);
            b.add((double) 1.0);
            b.add(1);
            b.add((byte) 1);
            b.add((char) 1);
            b.add(1, "ccc");
            map.put("listA", a);
            map.put("listB", b);
        }
        return obj;
    }

    /**
     * @return the _objectA
     */
    public Object getObjectA() {
        return _objectA;
    }

    /**
     * @param objectA the _objectA to set
     */
    public void setObjectA(Object objectA) {
        this._objectA = objectA;
    }

    /**
     * @return the _objectB
     */
    public Object getObjectB() {
        return _objectB;
    }

    /**
     * @param objectB the _objectB to set
     */
    public void setObjectB(Object objectB) {
        this._objectB = objectB;
    }

    /**
     * @return the _object
     */
    public Object getObject() {
        return _object;
    }

    /**
     * @param object the _object to set
     */
    public void setObject(Object object) {
        this._object = object;
    }

    public class ZZZ {

        private String s = "fgjtkrtul,rul";

        private Long l = 234567L;

        private Integer i = 123;

        private Byte b = 2;

        private Double d = 345636.3573;

        private Date dt = new Date(Math.round(Math.random()));

        private ZZZ child;

        private List<String> _keywords = new ArrayList<String>();

        {
            for (int i = 0; i < 4; i++) {
                _keywords.add("keyword " + i);
            }
        }

        /**
         * @return the s
         */
        public String getS() {
            return s;
        }

        /**
         * @param s the s to set
         */
        public void setS(String s) {
            this.s = s;
        }

        /**
         * @return the l
         */
        public Long getL() {
            return l;
        }

        /**
         * @param l the l to set
         */
        public void setL(Long l) {
            this.l = l;
        }

        /**
         * @return the i
         */
        public Integer getI() {
            return i;
        }

        /**
         * @param i the i to set
         */
        public void setI(Integer i) {
            this.i = i;
        }

        /**
         * @return the b
         */
        public Byte getB() {
            return b;
        }

        /**
         * @param b the b to set
         */
        public void setB(Byte b) {
            this.b = b;
        }

        /**
         * @return the d
         */
        public Double getD() {
            return d;
        }

        /**
         * @param d the d to set
         */
        public void setD(Double d) {
            this.d = d;
        }

        /**
         * @return the dt
         */
        public Date getDt() {
            return dt;
        }

        /**
         * @param dt the dt to set
         */
        public void setDt(Date dt) {
            this.dt = dt;
        }

        /**
         * @return the child
         */
        public ZZZ getChild() {
            return child;
        }

        /**
         * @param child the child to set
         */
        public void setChild(ZZZ child) {
            this.child = child;
        }

        /**
         * @return the _keywords
         */
        public List<String> getKeywords() {
            return _keywords;
        }

        /**
         * @param keywords the _keywords to set
         */
        public void setKeywords(List<String> keywords) {
            this._keywords = keywords;
        }
    }

    /**
     * Tree manipulator provides shortcuts for automating expanding/collapsing 
     */
    public class TreeManipulator implements TreeWillExpandListener, KeyListener {

        private transient volatile int _lastKeyPressed = -1;

        private transient volatile boolean _inProcess = false;

        public void treeWillExpand(TreeExpansionEvent event) throws ExpandVetoException {
            if (_inProcess) {
                return;
            }
            try {
                _inProcess = true;
                JTree tree = (JTree) event.getSource();
                expandAll((JTree) event.getSource(), event.getPath(), true);
            } finally {
                _inProcess = false;
            }
        }

        public void treeWillCollapse(TreeExpansionEvent event) throws ExpandVetoException {
            if (_inProcess) {
                return;
            }
            try {
                _inProcess = true;
                expandAll((JTree) event.getSource(), event.getPath(), false);
            } finally {
                _inProcess = false;
            }
        }

        private void expandAll(JTree tree, TreePath parent, boolean expand) {
            int minIdx = tree.getRowForPath(parent);
            int maxIdx = minIdx + 1;
            int level = parent.getPathCount();
            int maxLevel = level + 1;
            int subLevels = 1;
            if (_lastKeyPressed >= 49 && _lastKeyPressed < 60) {
                subLevels = _lastKeyPressed - 48;
                maxLevel = level + subLevels;
            } else if (_lastKeyPressed == 48) {
                subLevels = 0;
                maxLevel = level + 100;
            }
            TreePath lastTP = tree.getPathForRow(maxIdx);
            try {
                TreePath nextTP = lastTP;
                while (lastTP.getPathCount() > level) {
                    lastTP = nextTP;
                    maxIdx++;
                    nextTP = tree.getPathForRow(maxIdx);
                }
            } catch (Throwable th) {
            }
            if (expand) {
                int i = minIdx;
                while ((lastTP == null || !lastTP.equals(tree.getPathForRow(i))) && i < tree.getRowCount()) {
                    if (tree.getPathForRow(i).getPathCount() < maxLevel) {
                        tree.expandRow(i);
                    }
                    i++;
                }
            } else {
                int i = maxIdx - 1;
                int toLevel = level + subLevels - 1;
                while (!parent.equals(tree.getPathForRow(i))) {
                    int rl = tree.getPathForRow(i).getPathCount();
                    if (rl > toLevel) {
                        tree.collapseRow(i);
                    }
                    i--;
                }
                if (toLevel < level) {
                    tree.collapseRow(minIdx);
                }
            }
        }

        public void keyTyped(KeyEvent e) {
        }

        public void keyPressed(KeyEvent e) {
            if (_inProcess) {
                return;
            }
            if ((e.isControlDown() || e.isAltDown()) && e.getKeyCode() >= 48 && e.getKeyCode() < 59) {
                _lastKeyPressed = e.getKeyCode();
                JTree tree = (JTree) e.getSource();
                for (TreePath tp : tree.getSelectionPaths()) {
                    expandAll(tree, tp, e.isControlDown());
                }
                _lastKeyPressed = 0;
            } else if (e.getKeyCode() >= 48 && e.getKeyCode() < 59) {
                _lastKeyPressed = e.getKeyCode();
            }
        }

        public void keyReleased(KeyEvent e) {
            if (e.getKeyCode() != 0 && e.getKeyCode() == _lastKeyPressed) {
                _lastKeyPressed = 0;
            }
        }
    }
}
