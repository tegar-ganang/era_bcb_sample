package enyarok.client.gui;

import enyarok.client.*;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
import marauroa.common.game.RPObject;
import org.apache.log4j.Logger;

/**
 *
 * @author  daedalus
 */
public class AccountPanel extends javax.swing.JPanel {

    private static final Logger logger = Logger.getLogger(AccountPanel.class);

    private String badPasswordReason;

    /** Creates new form AccountPanel */
    public AccountPanel() {
        initComponents();
        nameField.setDocument(new LetterDocument());
    }

    /** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        serverField = new javax.swing.JTextField();
        portField = new javax.swing.JTextField();
        createButton = new javax.swing.JButton();
        mailField = new javax.swing.JTextField();
        password1Field = new javax.swing.JPasswordField();
        password2Field = new javax.swing.JPasswordField();
        nameField = new javax.swing.JTextField();
        serverLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        password1Label = new javax.swing.JLabel();
        password2Label = new javax.swing.JLabel();
        mailLabel = new javax.swing.JLabel();
        setPreferredSize(new java.awt.Dimension(250, 250));
        serverField.setText("enyarok.game-host.org");
        portField.setText("4214");
        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        serverLabel.setText("Server:");
        portLabel.setText("Port:");
        nameLabel.setText("Username:");
        password1Label.setText("Password:");
        password2Label.setText("Retype:");
        mailLabel.setText("eMail:");
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(mailLabel, javax.swing.GroupLayout.Alignment.TRAILING).addComponent(password2Label, javax.swing.GroupLayout.Alignment.TRAILING).addComponent(password1Label, javax.swing.GroupLayout.Alignment.TRAILING).addComponent(nameLabel, javax.swing.GroupLayout.Alignment.TRAILING).addComponent(portLabel, javax.swing.GroupLayout.Alignment.TRAILING).addComponent(serverLabel, javax.swing.GroupLayout.Alignment.TRAILING)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(serverField, javax.swing.GroupLayout.Alignment.TRAILING).addComponent(createButton, javax.swing.GroupLayout.Alignment.TRAILING).addComponent(nameField, javax.swing.GroupLayout.Alignment.TRAILING).addComponent(portField, javax.swing.GroupLayout.Alignment.TRAILING).addComponent(password2Field, javax.swing.GroupLayout.Alignment.TRAILING).addComponent(password1Field, javax.swing.GroupLayout.Alignment.TRAILING).addComponent(mailField, javax.swing.GroupLayout.Alignment.TRAILING)).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(serverField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(serverLabel)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(portLabel)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(nameLabel)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(password2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(password1Label)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(password1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(password2Label)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(mailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(mailLabel)).addGap(18, 18, 18).addComponent(createButton).addContainerGap()));
    }

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {
        Client client = Client.get();
        final boolean ok = checkFields();
        if (!ok) {
            return;
        }
        try {
            client.connect(serverField.getText(), new Integer(portField.getText()));
            client.createAccount(nameField.getText(), new String(password1Field.getPassword()), mailField.getText());
            client.login(nameField.getText(), new String(password1Field.getPassword()));
            RPObject character = new RPObject();
            client.createCharacter(nameField.getText(), character);
            client.chooseCharacter(nameField.getText());
            ChatFrame chat = ChatFrame.get();
            chat.setVisible(true);
            MainScreen.get().setVisible(false);
            MainScreen.get().dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(MainScreen.get(), e.getMessage(), "Warning", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
        }
    }

    /**
	 * Runs field checks, to, ex. confirm the passwords correct, etc.
	 * @return if no error found
	 */
    private boolean checkFields() {
        final String password = new String(password1Field.getPassword());
        final String passwordretype = new String(password2Field.getPassword());
        if (!password.equals(passwordretype)) {
            JOptionPane.showMessageDialog(MainScreen.get(), "The passwords do not match. Please retype both.", "Password Mismatch", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        final boolean valPass = validatePassword(nameField.getText(), password);
        if (!valPass) {
            if (badPasswordReason != null) {
                final int i = JOptionPane.showOptionDialog(MainScreen.get(), badPasswordReason, "Bad Password", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, null, 1);
                if (i == 0) {
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }
        final String email = mailField.getText();
        if (isInvalid(email)) {
            final String text = "The email you entered appears to be invalid.\n" + "You must provide a recover a lost password. Are you sure this email is correct? ";
            final int i = JOptionPane.showOptionDialog(MainScreen.get(), text, "Invalid Email", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, null, 1);
            if (i != 0) {
                return false;
            }
        }
        return true;
    }

    private boolean isInvalid(final String email) {
        return !email.contains("@") || !email.contains(".") || (email.length() <= 5);
    }

    public boolean validatePassword(final String username, final String password) {
        if (password.length() > 5) {
            boolean allNumbers = true;
            try {
                Integer.parseInt(password);
            } catch (final Exception e) {
                allNumbers = false;
            }
            if (allNumbers) {
                badPasswordReason = "You have used only numbers in your password. This is not a good security practice.\n" + " Are you sure that you want to use this password?";
            }
            boolean hasUsername = false;
            if (password.contains(username)) {
                hasUsername = true;
            }
            if (!hasUsername) {
                final int min_user_length = 3;
                for (int i = 1; i < username.length(); i++) {
                    final String subuser = username.substring(0, username.length() - i);
                    if (subuser.length() <= min_user_length) {
                        break;
                    }
                    if (password.contains(subuser)) {
                        hasUsername = true;
                        break;
                    }
                }
                if (!hasUsername) {
                    for (int i = 0; i < username.length(); i++) {
                        final String subuser = username.substring(i);
                        if (subuser.length() <= min_user_length) {
                            break;
                        }
                        if (password.contains(subuser)) {
                            hasUsername = true;
                            break;
                        }
                    }
                }
            }
            if (hasUsername) {
                badPasswordReason = "You have used your username or a derivitive of your username in your password. This is a bad security practice.\n" + " Are you sure that you want to use this password?";
                return false;
            }
        } else {
            final String text = "The password you provided is too short. It must be at least 6 characters long.";
            if (isVisible()) {
                JOptionPane.showMessageDialog(MainScreen.get(), text);
            } else {
                logger.warn(text);
            }
            return false;
        }
        return true;
    }

    private static class LetterDocument extends PlainDocument {

        private static final long serialVersionUID = -5123268875802709841L;

        @Override
        public void insertString(final int offs, final String str, final AttributeSet a) throws BadLocationException {
            boolean ok = true;
            for (int i = str.length() - 1; i >= 0; i--) {
                final char chr = str.charAt(i);
                if ((chr < 'a') || (chr > 'z')) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                super.insertString(offs, str, a);
            } else {
                Toolkit.getDefaultToolkit().beep();
            }
        }
    }

    private javax.swing.JButton createButton;

    private javax.swing.JTextField mailField;

    private javax.swing.JLabel mailLabel;

    private javax.swing.JTextField nameField;

    private javax.swing.JLabel nameLabel;

    private javax.swing.JPasswordField password1Field;

    private javax.swing.JLabel password1Label;

    private javax.swing.JPasswordField password2Field;

    private javax.swing.JLabel password2Label;

    private javax.swing.JTextField portField;

    private javax.swing.JLabel portLabel;

    private javax.swing.JTextField serverField;

    private javax.swing.JLabel serverLabel;
}
