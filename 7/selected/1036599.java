package src.transcriptome_analysis.SNP_Detection;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.NoSuchElementException;
import src.lib.Histogram;
import src.lib.IterableIterator;
import src.lib.ioInterfaces.Log_Buffer;
import src.lib.ioInterfaces.SnpIterator;
import src.lib.objects.SNPLine;

/**
 * This program uses the snps reports (X.snps) generated by the
 * Transcriptome.java program, to compare known vs unknown snps, and provide a
 * histogram report.
 * @author Genome Sciences Centre
 * @version $Revision: 348 $
 */
public class snpReport {

    public static final String SVNID = "$Id: snpReport.java 348 2008-09-18 19:30:00Z apfejes $";

    private static final int hs_size_small = 101;

    private static final int hs_size_large = 1001;

    private static Log_Buffer LB = null;

    private static Histogram KnownSNPsP = new Histogram(LB, hs_size_small, 0, hs_size_small, false);

    private static Histogram UnknownSNPsP = new Histogram(LB, hs_size_small, 0, hs_size_small, false);

    private static Histogram AllSNPsP = new Histogram(LB, hs_size_small, 0, hs_size_small, false);

    private static Histogram KnownSNPsC = new Histogram(LB, hs_size_large, 0, hs_size_large, false);

    private static Histogram UnknownSNPsC = new Histogram(LB, hs_size_large, 0, hs_size_large, false);

    private static Histogram AllSNPsC = new Histogram(LB, hs_size_large, 0, hs_size_large, false);

    private static String output_path = null;

    private snpReport() {
    }

    /**
	 * Function to write out reports on the whole transcriptome SNP profiles
	 */
    private static void write_SNP_report() {
        BufferedWriter report_file = null;
        try {
            report_file = new BufferedWriter(new FileWriter(output_path + "Transcriptome.snp.report"));
            report_file.write("Known Snps%:\n");
            KnownSNPsP.print_bins(report_file);
            report_file.write("Unknown Snps%:" + "\n");
            UnknownSNPsP.print_bins(report_file);
            report_file.write("All Snps%:" + "\n");
            AllSNPsP.print_bins(report_file);
            report_file.write("Known SnpsC:\n");
            KnownSNPsC.print_bins(report_file);
            report_file.write("Unknown SnpsC:" + "\n");
            UnknownSNPsC.print_bins(report_file);
            report_file.write("All SnpsC:" + "\n");
            AllSNPsC.print_bins(report_file);
            report_file.close();
        } catch (IOException io) {
            LB.error("Message thrown by Java environment (may be null):" + io.getMessage());
            LB.error("Can't write bias files");
            LB.die();
        }
    }

    public static void main(String[] args) {
        System.out.println("This file is currently unsupported - Log Buffer has not been integrated.");
        System.exit(0);
        output_path = args[0];
        if (output_path.charAt(output_path.length() - 1) != '/') {
            output_path += '/';
        }
        String[] files = new String[args.length - 1];
        for (int i = 0; i < files.length; i++) {
            files[i] = args[i + 1];
        }
        float tmp_percent = 0;
        for (String file : files) {
            SnpIterator SI = new SnpIterator(LB, file);
            System.out.println("Processing file: " + file);
            try {
                for (SNPLine snp : new IterableIterator<SNPLine>(SI)) {
                    tmp_percent = ((float) snp.get_observed() / (float) snp.get_coverage()) * 100;
                    if (snp.get_type().equalsIgnoreCase("known")) {
                        KnownSNPsP.bin_value(tmp_percent);
                        KnownSNPsC.bin_value(snp.get_observed());
                    } else {
                        UnknownSNPsP.bin_value(tmp_percent);
                        UnknownSNPsC.bin_value(snp.get_observed());
                    }
                    AllSNPsP.bin_value(tmp_percent);
                    AllSNPsC.bin_value(snp.get_observed());
                }
            } catch (NoSuchElementException nsee) {
                continue;
            }
        }
        write_SNP_report();
    }
}
