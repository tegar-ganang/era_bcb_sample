package chequeredflag.gui.track;

import chequeredflag.gui.*;
import java.io.*;
import chequeredflag.data.track.*;
import javax.swing.*;
import javax.swing.event.InternalFrameListener;
import javax.swing.event.InternalFrameEvent;
import java.util.prefs.Preferences;

public class TrackWindow extends javax.swing.JInternalFrame implements InternalFrameListener {

    private Track currentTrack;

    private TrackTreeSelector treeWindow;

    private TrackGraphicalViewer mapWindow;

    private MainGUI appFrame;

    private String fileName;

    private boolean closingWindow;

    public TrackWindow(Track selectedTrack, String trackFileName, MainGUI origContainer) {
        super("Track File: " + trackFileName);
        fileName = trackFileName;
        initComponents();
        setContentPane(trackEditorWindow);
        currentTrack = selectedTrack;
        appFrame = origContainer;
        treeWindow = new TrackTreeSelector(trackEditorWindow, this);
        mapWindow = new TrackGraphicalViewer();
        mapWindow.setTrack(currentTrack);
        treeWindow.setTrack(currentTrack);
        treeWindow.populateTree();
        trackEditorPane.setLeftComponent(treeWindow);
        trackEditorPane.setRightComponent(mapWindow);
        treeWindow.setVisible(true);
        mapWindow.setVisible(true);
        addInternalFrameListener(this);
        closingWindow = false;
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    }

    public void internalFrameClosing(InternalFrameEvent e) {
        closeTrack();
    }

    public void closeTrack() {
        if (closingWindow == false) {
            int selectionOption = JOptionPane.showConfirmDialog(this, "Are you sure you want to close this track?", "Close Track", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (selectionOption == JOptionPane.YES_OPTION) {
                try {
                    closingWindow = true;
                    this.setClosed(true);
                } catch (Exception errorReport) {
                }
            }
        }
    }

    public void internalFrameClosed(InternalFrameEvent e) {
    }

    public void internalFrameOpened(InternalFrameEvent e) {
    }

    public void internalFrameIconified(InternalFrameEvent e) {
    }

    public void internalFrameDeiconified(InternalFrameEvent e) {
    }

    public void internalFrameActivated(InternalFrameEvent e) {
    }

    public void internalFrameDeactivated(InternalFrameEvent e) {
    }

    public void positionWindows() {
        int windowX = trackEditorWindow.getWidth();
        int windowY = trackEditorWindow.getHeight();
        trackEditorPane.setBounds(0, 0, windowX, windowY);
        trackEditorPane.setDividerLocation(0.42);
        trackEditorPane.updateUI();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        trackEditorWindow = new javax.swing.JDesktopPane();
        trackEditorPane = new javax.swing.JSplitPane();
        trackMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveTrackItem = new javax.swing.JMenuItem();
        saveTrackAsItem = new javax.swing.JMenuItem();
        closeTrackItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        removeTrack = new javax.swing.JMenuItem();
        removePit = new javax.swing.JMenuItem();
        removeLine = new javax.swing.JMenuItem();
        getContentPane().setLayout(new java.awt.FlowLayout());
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {

            public void componentResized(java.awt.event.ComponentEvent evt) {
                windowResize(evt);
            }
        });
        trackEditorPane.setBounds(0, 0, -1, -1);
        trackEditorWindow.add(trackEditorPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        getContentPane().add(trackEditorWindow);
        fileMenu.setText("File");
        saveTrackItem.setText("Save Track...");
        saveTrackItem.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTrackItem(evt);
            }
        });
        fileMenu.add(saveTrackItem);
        saveTrackAsItem.setText("Save Track As...");
        saveTrackAsItem.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTrackAs(evt);
            }
        });
        fileMenu.add(saveTrackAsItem);
        closeTrackItem.setText("Close Track");
        closeTrackItem.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeTrackItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeTrackItem);
        trackMenuBar.add(fileMenu);
        toolsMenu.setText("Tools");
        removeTrack.setText("Remove All Track Segments");
        removeTrack.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllTrack(evt);
            }
        });
        toolsMenu.add(removeTrack);
        removePit.setText("Remove All Pit Segments");
        removePit.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllPit(evt);
            }
        });
        toolsMenu.add(removePit);
        removeLine.setText("Remove All Best Line Segments");
        removeLine.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllLine(evt);
            }
        });
        toolsMenu.add(removeLine);
        trackMenuBar.add(toolsMenu);
        setJMenuBar(trackMenuBar);
        pack();
    }

    private void removeAllLine(java.awt.event.ActionEvent evt) {
        int selectionOption = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove all best line segments?", "Clear Best Line", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (selectionOption == JOptionPane.YES_OPTION) {
            treeWindow.deleteAllSegments(2);
        }
    }

    private void removeAllPit(java.awt.event.ActionEvent evt) {
        int selectionOption = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove all pit segments?", "Clear Pit Segments", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (selectionOption == JOptionPane.YES_OPTION) {
            treeWindow.deleteAllSegments(1);
        }
    }

    private void removeAllTrack(java.awt.event.ActionEvent evt) {
        int selectionOption = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove all track segments?", "Clear Track Segments", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (selectionOption == JOptionPane.YES_OPTION) {
            treeWindow.deleteAllSegments(0);
        }
    }

    private void closeTrackItemActionPerformed(java.awt.event.ActionEvent evt) {
        closeTrack();
    }

    public void updateTrackMap() {
        mapWindow.redrawTrackMap();
    }

    public void highlightSection(int sectionType, int segmentNo) {
        mapWindow.selectedSegment(sectionType, segmentNo);
    }

    private void saveTrackItem(java.awt.event.ActionEvent evt) {
        File trackFile = new File(fileName);
        currentTrack.save(trackFile);
    }

    private void saveTrackAs(java.awt.event.ActionEvent evt) {
        boolean cancelCalled = false;
        String selectedFileName = new String();
        FileDialog fileDialog = new FileDialog(appFrame, true);
        try {
            selectedFileName = fileDialog.showSaveDialog();
        } catch (Exception exceptionError) {
            cancelCalled = true;
        }
        if (cancelCalled == false) {
            if (selectedFileName.toLowerCase().endsWith(".dat") == false) {
                selectedFileName = selectedFileName + ".DAT";
            }
            File fileTest = new File(selectedFileName);
            if (fileTest.exists() == true) {
                JOptionPane.showMessageDialog(this, "The filename you have provided already exists. Please try again.", "Filename already exists", JOptionPane.ERROR_MESSAGE);
            } else {
                File trackFile = new File(selectedFileName);
                currentTrack.save(trackFile);
            }
        }
    }

    private void windowResize(java.awt.event.ComponentEvent evt) {
        positionWindows();
    }

    private javax.swing.JMenuItem closeTrackItem;

    private javax.swing.JMenu fileMenu;

    private javax.swing.JMenuItem removeLine;

    private javax.swing.JMenuItem removePit;

    private javax.swing.JMenuItem removeTrack;

    private javax.swing.JMenuItem saveTrackAsItem;

    private javax.swing.JMenuItem saveTrackItem;

    private javax.swing.JMenu toolsMenu;

    private javax.swing.JSplitPane trackEditorPane;

    private javax.swing.JDesktopPane trackEditorWindow;

    private javax.swing.JMenuBar trackMenuBar;
}
