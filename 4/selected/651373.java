package org.eledge.domain.auto;

import java.util.List;
import org.eledge.domain.Course;
import org.eledge.domain.DiscussionBoardEntry;
import org.eledge.domain.EledgeDataObject;
import org.eledge.domain.User;
import org.eledge.domain.participants.GenericParticipant;

/**
 * Class _DiscussionBoardForum was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DiscussionBoardForum extends EledgeDataObject {

    public static final String ALLOW_STUDENT_DELETES_PROPERTY = "allowStudentDeletes";

    public static final String ALLOW_STUDENT_THREADS_PROPERTY = "allowStudentThreads";

    public static final String COURSE_SECTION_PROPERTY = "courseSection";

    public static final String EDITS_MODERATED_PROPERTY = "editsModerated";

    public static final String MODERATED_PROPERTY = "moderated";

    public static final String NAME_PROPERTY = "name";

    public static final String SEND_EMAIL_NOTIFICATIONS_PROPERTY = "sendEmailNotifications";

    public static final String COURSE_PROPERTY = "course";

    public static final String MESSAGES_PROPERTY = "messages";

    public static final String MODERATORS_PROPERTY = "moderators";

    public static final String PARTICIPANT_LIST_PROPERTY = "participantList";

    public static final String ID_PK_COLUMN = "ID";

    public void setAllowStudentDeletes(Boolean allowStudentDeletes) {
        writeProperty("allowStudentDeletes", allowStudentDeletes);
    }

    public Boolean getAllowStudentDeletes() {
        return (Boolean) readProperty("allowStudentDeletes");
    }

    public void setAllowStudentThreads(Boolean allowStudentThreads) {
        writeProperty("allowStudentThreads", allowStudentThreads);
    }

    public Boolean getAllowStudentThreads() {
        return (Boolean) readProperty("allowStudentThreads");
    }

    public void setCourseSection(String courseSection) {
        writeProperty("courseSection", courseSection);
    }

    public String getCourseSection() {
        return (String) readProperty("courseSection");
    }

    public void setEditsModerated(Boolean editsModerated) {
        writeProperty("editsModerated", editsModerated);
    }

    public Boolean getEditsModerated() {
        return (Boolean) readProperty("editsModerated");
    }

    public void setModerated(Boolean moderated) {
        writeProperty("moderated", moderated);
    }

    public Boolean getModerated() {
        return (Boolean) readProperty("moderated");
    }

    public void setName(String name) {
        writeProperty("name", name);
    }

    public String getName() {
        return (String) readProperty("name");
    }

    public void setSendEmailNotifications(Boolean sendEmailNotifications) {
        writeProperty("sendEmailNotifications", sendEmailNotifications);
    }

    public Boolean getSendEmailNotifications() {
        return (Boolean) readProperty("sendEmailNotifications");
    }

    public void setCourse(Course course) {
        setToOneTarget("course", course, true);
    }

    public Course getCourse() {
        return (Course) readProperty("course");
    }

    public void addToMessages(DiscussionBoardEntry obj) {
        addToManyTarget("messages", obj, true);
    }

    public void removeFromMessages(DiscussionBoardEntry obj) {
        removeToManyTarget("messages", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DiscussionBoardEntry> getMessages() {
        return (List<DiscussionBoardEntry>) readProperty("messages");
    }

    public void addToModerators(User obj) {
        addToManyTarget("moderators", obj, true);
    }

    public void removeFromModerators(User obj) {
        removeToManyTarget("moderators", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<User> getModerators() {
        return (List<User>) readProperty("moderators");
    }

    public void addToParticipantList(GenericParticipant obj) {
        addToManyTarget("participantList", obj, true);
    }

    public void removeFromParticipantList(GenericParticipant obj) {
        removeToManyTarget("participantList", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<GenericParticipant> getParticipantList() {
        return (List<GenericParticipant>) readProperty("participantList");
    }
}
