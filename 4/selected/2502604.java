package reports.Advanced;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.JTextComponent;
import reports.utility.SimpleCombobBoxItem;

/**
 *
 * @author naresh
 */
public class PrepareCustomizedList extends javax.swing.JInternalFrame {

    File createFile = null;

    /** Creates new form PrepareCustomizedList */
    public PrepareCustomizedList() {
        initComponents();
        this.setSize(600, 450);
        this.setLocation(160, 110);
        String[] cols = { "Column Name", "visible" };
        dtm = new javax.swing.table.DefaultTableModel(cols, 0) {

            public boolean isCellEditable(int r, int c) {
                if (c == 1) {
                    return true;
                } else {
                    return false;
                }
            }

            public Class getColumnClass(int columnIndex) {
                return getValueAt(0, columnIndex).getClass();
            }
        };
        jTable1.setModel(dtm);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getColumnModel().getColumn(0).setMinWidth(400);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(400);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(400);
        jTable1.getColumnModel().getColumn(1).setMinWidth(100);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(100);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
        this.setColumns();
        this.getFilters();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbFilter = new javax.swing.JComboBox();
        cbSubfilter = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        bnUp = new javax.swing.JButton();
        bnDown = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        tfGenerateFile = new javax.swing.JTextField();
        bnLocateFile = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel6 = new javax.swing.JPanel();
        bnOk = new javax.swing.JButton();
        bnCancel = new javax.swing.JButton();
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Prepare Customized List");
        setPreferredSize(new java.awt.Dimension(533, 627));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));
        jPanel1.setMinimumSize(new java.awt.Dimension(131, 54));
        jPanel1.setPreferredSize(new java.awt.Dimension(131, 70));
        jPanel1.setLayout(new java.awt.GridBagLayout());
        jLabel1.setText("Filter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jLabel1, gridBagConstraints);
        jLabel1.getAccessibleContext().setAccessibleName(null);
        jLabel2.setText("Subfilter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jLabel2, gridBagConstraints);
        cbFilter.setEditable(true);
        cbFilter.setMaximumRowCount(20);
        cbFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "none" }));
        cbFilter.setPreferredSize(new java.awt.Dimension(254, 27));
        cbFilter.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFilterActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel1.add(cbFilter, gridBagConstraints);
        cbSubfilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "none" }));
        cbSubfilter.setPreferredSize(new java.awt.Dimension(254, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 0);
        jPanel1.add(cbSubfilter, gridBagConstraints);
        getContentPane().add(jPanel1);
        jPanel2.setPreferredSize(new java.awt.Dimension(600, 80));
        jPanel2.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanel2);
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Columns"));
        jPanel3.setPreferredSize(new java.awt.Dimension(533, 429));
        jPanel3.setLayout(new java.awt.BorderLayout());
        jPanel7.setMinimumSize(new java.awt.Dimension(25, 25));
        jPanel7.setPreferredSize(new java.awt.Dimension(402, 402));
        jPanel7.setLayout(new java.awt.BorderLayout());
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null } }, new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
        jTable1.setCellSelectionEnabled(true);
        jTable1.setDragEnabled(true);
        jTable1.setPreferredSize(new java.awt.Dimension(471, 402));
        jScrollPane1.setViewportView(jTable1);
        jPanel7.add(jScrollPane1, java.awt.BorderLayout.CENTER);
        jPanel3.add(jPanel7, java.awt.BorderLayout.CENTER);
        jPanel8.setMinimumSize(new java.awt.Dimension(50, 58));
        jPanel8.setPreferredSize(new java.awt.Dimension(80, 58));
        jPanel8.setLayout(new java.awt.GridBagLayout());
        bnUp.setText("Up");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel8.add(bnUp, gridBagConstraints);
        bnDown.setText("Down");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel8.add(bnDown, gridBagConstraints);
        jPanel3.add(jPanel8, java.awt.BorderLayout.EAST);
        getContentPane().add(jPanel3);
        jPanel4.setPreferredSize(new java.awt.Dimension(600, 60));
        jLabel3.setText("Generate Report to File :");
        jPanel4.add(jLabel3);
        tfGenerateFile.setColumns(15);
        jPanel4.add(tfGenerateFile);
        bnLocateFile.setText("....");
        bnLocateFile.setMaximumSize(new java.awt.Dimension(50, 29));
        bnLocateFile.setPreferredSize(new java.awt.Dimension(50, 29));
        bnLocateFile.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnLocateFileActionPerformed(evt);
            }
        });
        jPanel4.add(bnLocateFile);
        getContentPane().add(jPanel4);
        jPanel5.setPreferredSize(new java.awt.Dimension(600, 40));
        jPanel5.setLayout(new java.awt.BorderLayout());
        jProgressBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jProgressBar1.setPreferredSize(new java.awt.Dimension(350, 18));
        jPanel5.add(jProgressBar1, java.awt.BorderLayout.CENTER);
        getContentPane().add(jPanel5);
        jPanel6.setPreferredSize(new java.awt.Dimension(600, 80));
        bnOk.setText("Ok");
        jPanel6.add(bnOk);
        bnCancel.setText("Cancel");
        bnCancel.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnCancelActionPerformed(evt);
            }
        });
        jPanel6.add(bnCancel);
        getContentPane().add(jPanel6);
    }

    public void getFilters() {
        cbFilter.removeAllItems();
        cbFilter.addItem(new SimpleCombobBoxItem(0, "Accession series"));
        cbFilter.addItem(new SimpleCombobBoxItem(1, "Budget allocation"));
        cbFilter.addItem(new SimpleCombobBoxItem(2, "Budget head"));
        cbFilter.addItem(new SimpleCombobBoxItem(3, "Classification number"));
        cbFilter.addItem(new SimpleCombobBoxItem(4, "Complete"));
        cbFilter.addItem(new SimpleCombobBoxItem(5, "Course"));
        cbFilter.addItem(new SimpleCombobBoxItem(6, "Datewise"));
        cbFilter.addItem(new SimpleCombobBoxItem(7, "Department"));
    }

    public Vector getColumnNames() {
        Vector columns = new Vector();
        columns.addElement("Title");
        columns.addElement("Author");
        columns.addElement("Edition");
        columns.addElement("ISBN");
        columns.addElement("Publisher place");
        columns.addElement("Publisher name");
        columns.addElement("Publication year");
        columns.addElement("Physical description");
        columns.addElement("Accession number");
        columns.addElement("Barcode");
        columns.addElement("Material type");
        columns.addElement("Shelving location");
        columns.addElement("Call number");
        columns.addElement("Status");
        columns.addElement("MRP price");
        columns.addElement("Discount");
        columns.addElement("Invoice number");
        columns.addElement("Invoice date");
        columns.addElement("vendor");
        return columns;
    }

    public void setColumns() {
        Vector columns = this.getColumnNames();
        for (int i = 0; i < columns.size(); i++) {
            Object[] row = new Object[2];
            row[0] = columns.get(i).toString();
            row[1] = new Boolean(false);
            dtm.addRow(row);
        }
    }

    private void cbFilterActionPerformed(java.awt.event.ActionEvent evt) {
        if (cbFilter.getSelectedIndex() == 0) {
            cbSubfilter.removeAllItems();
            cbSubfilter.addItem(new SimpleCombobBoxItem(0, "Bibliographic level and material type"));
            cbSubfilter.addItem(new SimpleCombobBoxItem(1, "Complete"));
            cbSubfilter.addItem(new SimpleCombobBoxItem(2, "Datewise"));
            cbSubfilter.addItem(new SimpleCombobBoxItem(3, "Range and date"));
            cbSubfilter.addItem(new SimpleCombobBoxItem(4, "Range of Accession numbers"));
        } else if (cbFilter.getSelectedIndex() == 1) {
            cbSubfilter.removeAllItems();
            cbSubfilter.addItem(new SimpleCombobBoxItem(0, "Budget allocation and date"));
        } else if (cbFilter.getSelectedIndex() == 2) {
            cbSubfilter.removeAllItems();
            cbSubfilter.addItem(new SimpleCombobBoxItem(0, "Budget head name and date"));
        } else if (cbFilter.getSelectedIndex() == 3) {
            cbSubfilter.removeAllItems();
            cbSubfilter.addItem(new SimpleCombobBoxItem(0, "Starts with"));
            cbSubfilter.addItem(new SimpleCombobBoxItem(1, "Date and starts with"));
            cbSubfilter.addItem(new SimpleCombobBoxItem(2, "Range and starts with"));
        } else if (cbFilter.getSelectedIndex() == 4) {
            cbSubfilter.removeAllItems();
            cbSubfilter.addItem(new SimpleCombobBoxItem(0, "Complete"));
        } else if (cbFilter.getSelectedIndex() == 5) {
            cbSubfilter.removeAllItems();
            cbSubfilter.addItem(new SimpleCombobBoxItem(0, "Complete"));
            cbSubfilter.addItem(new SimpleCombobBoxItem(1, "Course name and date"));
            cbSubfilter.addItem(new SimpleCombobBoxItem(2, "Course name and range"));
        } else if (cbFilter.getSelectedIndex() == 6) {
            cbSubfilter.removeAllItems();
            cbSubfilter.addItem(new SimpleCombobBoxItem(0, "Datewise"));
        } else if (cbFilter.getSelectedIndex() == 7) {
            cbSubfilter.removeAllItems();
            cbSubfilter.addItem(new SimpleCombobBoxItem(0, "Complete"));
            cbSubfilter.addItem(new SimpleCombobBoxItem(1, "Department name and date"));
            cbSubfilter.addItem(new SimpleCombobBoxItem(2, "Department name and range"));
        }
    }

    private void bnCancelActionPerformed(java.awt.event.ActionEvent evt) {
        this.dispose();
    }

    private void bnLocateFileActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser chooser = new JFileChooser(new File(System.getProperty("user.home")));
        chooser.setFileFilter(new FileFilter() {

            public String getDescription() {
                return ".csv";
            }

            @Override
            public boolean accept(File file) {
                boolean status = false;
                try {
                    String fileName = file.getName().toLowerCase();
                    status = fileName.endsWith(".csv");
                } catch (Exception e) {
                }
                return status;
            }
        });
        int i = chooser.showSaveDialog(this);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (i == JFileChooser.APPROVE_OPTION) {
            String file = chooser.getSelectedFile().toString();
            StringTokenizer str = new StringTokenizer(file, ".");
            if (str.countTokens() <= 2) {
                if (str.countTokens() == 1) {
                    createFile = new File(chooser.getSelectedFile().toString() + ".csv");
                    if (createFile.exists()) {
                        int cnt = JOptionPane.showConfirmDialog(this, "This file already exists ! Are you sure \n you want to over write it.", "check", JOptionPane.OK_CANCEL_OPTION);
                        if (cnt == 0) {
                            tfGenerateFile.setText(createFile.toString());
                        } else {
                            createFile = null;
                            tfGenerateFile.setText("");
                        }
                    } else {
                        tfGenerateFile.setText(createFile.toString());
                    }
                } else {
                    str.nextToken();
                    String s1 = str.nextToken(".");
                    if (s1.equalsIgnoreCase("csv")) {
                        createFile = new File(chooser.getSelectedFile().toString());
                        if (createFile.exists()) {
                            int cnt = JOptionPane.showConfirmDialog(this, "This file already exists ! Are you sure \n you want to over write it.", "check", JOptionPane.OK_CANCEL_OPTION);
                            if (cnt == 0) {
                                tfGenerateFile.setText(createFile.toString());
                            } else {
                                createFile = null;
                                tfGenerateFile.setText("");
                            }
                        } else {
                            tfGenerateFile.setText(createFile.toString());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "The given file is not in .csv format \n Please create .csv extension.", "check", JOptionPane.CANCEL_OPTION);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "The given file name is not correct \n Please create a new file.", "check", JOptionPane.YES_OPTION);
            }
        } else {
            tfGenerateFile.setText("");
        }
        try {
            if (createFile != null) {
                OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(tfGenerateFile.getText()), "UTF8");
                osw.flush();
                osw.close();
                jProgressBar1.setString("File is created.");
            } else {
                JOptionPane.showMessageDialog(null, "Please select the file to generate the data.", "check", JOptionPane.YES_OPTION);
            }
        } catch (Exception exp) {
            exp.getStackTrace();
        }
    }

    private javax.swing.JButton bnCancel;

    private javax.swing.JButton bnDown;

    private javax.swing.JButton bnLocateFile;

    private javax.swing.JButton bnOk;

    private javax.swing.JButton bnUp;

    private javax.swing.JComboBox cbFilter;

    private javax.swing.JComboBox cbSubfilter;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JPanel jPanel3;

    private javax.swing.JPanel jPanel4;

    private javax.swing.JPanel jPanel5;

    private javax.swing.JPanel jPanel6;

    private javax.swing.JPanel jPanel7;

    private javax.swing.JPanel jPanel8;

    private javax.swing.JProgressBar jProgressBar1;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JTable jTable1;

    private javax.swing.JTextField tfGenerateFile;

    DefaultTableModel dtm = null;
}
