package hermesserver.com.HGUI;

import hermesserver.com.HGUI.menuPanels.PasswordPanel;
import hermesserver.com.HGUI.menuPanels.RoomConfigPanel;
import hermesserver.com.HGUI.util.HMenuOption;
import hermesserver.com.HGUI.renderers.HMenuOptionRenderer;
import hkernell.com.HServer.HServer;
import java.awt.AWTException;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.Point;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.channels.FileChannel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author jomartinez
 */
public class HermesServer extends javax.swing.JFrame {

    private TrayIcon trayIcon;

    private HServer server;

    private Point location;

    /** Creates new form HermesServer */
    public HermesServer() throws FileNotFoundException, IOException {
        RandomAccessFile randomFile = new RandomAccessFile("lock.lk", "rw");
        FileChannel channel = randomFile.getChannel();
        if (channel.tryLock() != null) {
            initComponents();
            setSize(547, 380);
            SSpliter.setSize(getSize());
            server = new HServer();
            if (SystemTray.isSupported()) {
                SystemTray tray = SystemTray.getSystemTray();
                Image icon = new javax.swing.ImageIcon(getClass().getResource("/hermesserver/com/HImages/hermes.jpg")).getImage();
                PopupMenu popup = new PopupMenu();
                MenuItem startItem = new MenuItem("Start");
                startItem.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        server.start(14888);
                    }
                });
                popup.add(startItem);
                MenuItem stopItem = new MenuItem("Stop");
                stopItem.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        server.stop();
                    }
                });
                popup.add(stopItem);
                MenuItem restartItem = new MenuItem("Restart");
                popup.add(restartItem);
                ActionListener showAcction = new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        setState(0);
                    }
                };
                MenuItem closeItem = new MenuItem("Close");
                closeItem.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        confirmeClosing();
                    }
                });
                popup.add(closeItem);
                trayIcon = new TrayIcon(icon, "Hermes-server", popup);
                trayIcon.setImageAutoSize(true);
                trayIcon.addActionListener(showAcction);
                try {
                    tray.add(trayIcon);
                } catch (AWTException e) {
                    System.err.println("Problem with adding icon to tray.");
                }
            }
            setLocationRelativeTo(null);
            setVisible(true);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        SSpliter = new javax.swing.JSplitPane();
        PLeftPanel = new javax.swing.JPanel();
        SOptionList = new javax.swing.JScrollPane();
        LOption = new javax.swing.JList();
        BClose = new javax.swing.JButton();
        BMinimize = new javax.swing.JButton();
        TBMenu = new javax.swing.JToolBar();
        BStart = new javax.swing.JButton();
        BStop = new javax.swing.JButton();
        BRestart = new javax.swing.JButton();
        BJoin = new javax.swing.JButton();
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Hermes-Server");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/hermesserver/com/HImages/hermes.jpg")).getImage());
        setResizable(false);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {

            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        getContentPane().setLayout(null);
        SSpliter.setDividerLocation(105);
        SSpliter.setDividerSize(1);
        SSpliter.setMaximumSize(new java.awt.Dimension(106, 25));
        SSpliter.setPreferredSize(new java.awt.Dimension(106, 25));
        SSpliter.setRightComponent(RoomConfigPanel.getInstance());
        SSpliter.getLeftComponent().setMinimumSize(SSpliter.getLeftComponent().getSize());
        SSpliter.getLeftComponent().setMaximumSize(SSpliter.getLeftComponent().getSize());
        PLeftPanel.setMaximumSize(new java.awt.Dimension(100, 100));
        LOption.addListSelectionListener(new javax.swing.event.ListSelectionListener() {

            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                LOptionValueChanged(evt);
            }
        });
        SOptionList.setViewportView(LOption);
        LOption.setCellRenderer(new HMenuOptionRenderer());
        DefaultListModel lm = new DefaultListModel();
        ImageIcon roomImage = new javax.swing.ImageIcon(getClass().getResource("/hermesserver/com/HImages/room.gif"));
        lm.addElement(new HMenuOption(roomImage, "Sala", RoomConfigPanel.getInstance()));
        lm.addElement(new HMenuOption(new javax.swing.ImageIcon(getClass().getResource("/hermesserver/com/HImages/passwords.gif")), "Contraseñas", PasswordPanel.getInstance()));
        lm.addElement(new HMenuOption(new javax.swing.ImageIcon(getClass().getResource("/hermesserver/com/HImages/linking.gif")), "Interconexión", new JPanel()));
        LOption.setModel(lm);
        LOption.setSelectedIndex(0);
        javax.swing.GroupLayout PLeftPanelLayout = new javax.swing.GroupLayout(PLeftPanel);
        PLeftPanel.setLayout(PLeftPanelLayout);
        PLeftPanelLayout.setHorizontalGroup(PLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(SOptionList, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE));
        PLeftPanelLayout.setVerticalGroup(PLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(SOptionList, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE));
        SSpliter.setLeftComponent(PLeftPanel);
        getContentPane().add(SSpliter);
        SSpliter.setBounds(0, 39, 550, 340);
        BClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hermesserver/com/HImages/close.png")));
        BClose.setDoubleBuffered(true);
        BClose.setMargin(new java.awt.Insets(0, 0, 0, 0));
        BClose.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/hermesserver/com/HImages/close_over.png")));
        BClose.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCloseActionPerformed(evt);
            }
        });
        getContentPane().add(BClose);
        BClose.setBounds(527, 0, 20, 17);
        BMinimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hermesserver/com/HImages/minimize.png")));
        BMinimize.setDoubleBuffered(true);
        BMinimize.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/hermesserver/com/HImages/minimize_over.png")));
        BMinimize.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMinimizeActionPerformed(evt);
            }
        });
        getContentPane().add(BMinimize);
        BMinimize.setBounds(510, 0, 16, 16);
        TBMenu.setFloatable(false);
        TBMenu.setRollover(true);
        TBMenu.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                TBMenuMousePressed(evt);
            }
        });
        TBMenu.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseDragged(java.awt.event.MouseEvent evt) {
                TBMenuMouseDragged(evt);
            }
        });
        BStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hermesserver/com/HImages/start.png")));
        BStart.setContentAreaFilled(false);
        BStart.setFocusable(false);
        BStart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BStart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        TBMenu.add(BStart);
        BStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hermesserver/com/HImages/stop.png")));
        BStop.setContentAreaFilled(false);
        BStop.setFocusable(false);
        BStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        TBMenu.add(BStop);
        BRestart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hermesserver/com/HImages/restart.png")));
        BRestart.setContentAreaFilled(false);
        BRestart.setFocusable(false);
        BRestart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BRestart.setPreferredSize(new java.awt.Dimension(39, 39));
        BRestart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        TBMenu.add(BRestart);
        BJoin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hermesserver/com/HImages/join.png")));
        BJoin.setContentAreaFilled(false);
        BJoin.setFocusable(false);
        BJoin.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BJoin.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        TBMenu.add(BJoin);
        getContentPane().add(TBMenu);
        TBMenu.setBounds(0, 0, 550, 40);
        pack();
    }

    private void confirmeClosing() {
        int option = JOptionPane.showConfirmDialog(null, "Realmente quiere salir de Hermes-Server?", "Hermes-Server", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            if (SystemTray.isSupported()) {
                SystemTray tray = SystemTray.getSystemTray();
                tray.remove(trayIcon);
                System.exit(0);
            }
        }
    }

    private void LOptionValueChanged(javax.swing.event.ListSelectionEvent evt) {
        JPanel p = ((HMenuOption) LOption.getSelectedValue()).getPanel();
        SSpliter.setRightComponent(p);
    }

    private void BCloseActionPerformed(java.awt.event.ActionEvent evt) {
        confirmeClosing();
    }

    private void BMinimizeActionPerformed(java.awt.event.ActionEvent evt) {
        setVisible(false);
    }

    private void TBMenuMouseDragged(java.awt.event.MouseEvent evt) {
        if (location == null) {
            return;
        }
        Point newPoint = evt.getPoint();
        int difX = (int) (newPoint.getX() - location.getX());
        int difY = (int) (newPoint.getY() - location.getY());
        setLocation((int) getLocation().getX() + difX, (int) getLocation().getY() + difY);
    }

    private void TBMenuMousePressed(java.awt.event.MouseEvent evt) {
        location = evt.getPoint();
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {
    }

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {
        if (evt.getOldState() == 0 && evt.getNewState() == 1) {
            setVisible(false);
        } else if (evt.getOldState() == 1 && evt.getNewState() == 0) {
            setVisible(true);
        }
        System.out.println("Old: " + evt.getOldState() + " New: " + evt.getNewState());
    }

    private javax.swing.JButton BClose;

    private javax.swing.JButton BJoin;

    private javax.swing.JButton BMinimize;

    private javax.swing.JButton BRestart;

    private javax.swing.JButton BStart;

    private javax.swing.JButton BStop;

    private javax.swing.JList LOption;

    private javax.swing.JPanel PLeftPanel;

    private javax.swing.JScrollPane SOptionList;

    private javax.swing.JSplitPane SSpliter;

    private javax.swing.JToolBar TBMenu;
}
