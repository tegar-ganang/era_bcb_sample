package hogs.tools;

import hogs.common.HogsConstants;
import hogs.common.InternalException;
import hogs.common.PathFinder;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import java.nio.channels.FileChannel;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.ButtonModel;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.colorchooser.AbstractColorChooserPanel;

/**
 * @author wpijewsk
 * 
 * Displays the user's currently customized taunts, then allows them to change
 * their taunts and save the changes. The Controller class will load the file
 * generated by this program and use the preferences specified in the .hogsrc
 * file.
 */
public class HogsCustomizer extends JFrame {

    private static final long serialVersionUID = 3762812688530682935L;

    private String[] m_currenttaunts;

    private JTextField[] m_textfields;

    private String m_filename;

    private boolean m_inverted;

    private Color m_color;

    private JColorChooser m_chooser;

    public static void main(String[] args) {
        new HogsCustomizer();
    }

    public HogsCustomizer() {
        m_filename = PathFinder.getCustsFile();
        m_currenttaunts = new String[10];
        m_textfields = new JTextField[10];
        m_color = new Color(255, 255, 255);
        boolean exists = (new File(m_filename)).exists();
        m_inverted = false;
        m_chooser = new JColorChooser();
        AbstractColorChooserPanel[] panels = m_chooser.getChooserPanels();
        m_chooser.removeChooserPanel(panels[0]);
        m_chooser.removeChooserPanel(panels[2]);
        m_chooser.setPreviewPanel(new JPanel());
        Reader reader = null;
        if (exists) {
            try {
                reader = new FileReader(m_filename);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            Object[] options = { "Yes", "No, Thanks" };
            int n = JOptionPane.showOptionDialog(this, "You do not have a customization file in your home directory.\n                 " + "Would you like to create one?", "Hogs Customization", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
            if (n == 0) {
                try {
                    FileChannel srcChannel = new FileInputStream(HogsConstants.CUSTS_TEMPLATE).getChannel();
                    FileChannel dstChannel = new FileOutputStream(m_filename).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    System.exit(0);
                }
            } else {
                System.exit(0);
            }
            try {
                reader = new FileReader(m_filename);
            } catch (FileNotFoundException e1) {
                e1.printStackTrace();
                System.exit(0);
            }
        }
        try {
            readFromFile(reader);
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(0);
        }
        Box mainpanel = Box.createVerticalBox();
        mainpanel.add(buildTauntsPanel());
        mainpanel.add(buildMouseStylePanel());
        mainpanel.add(Box.createVerticalStrut(10));
        mainpanel.add(buildColorPanel());
        mainpanel.add(Box.createVerticalStrut(10));
        mainpanel.add(buildButtonsPanel());
        mainpanel.add(Box.createVerticalStrut(10));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(mainpanel);
        this.pack();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - (this.getWidth() / 2), dim.height / 2 - (this.getHeight() / 2));
        this.setTitle("Hogs Customizer");
        this.setVisible(true);
    }

    private void readFromFile(Reader reader) throws NumberFormatException, IOException, InternalException {
        String str;
        BufferedReader br = new BufferedReader(reader);
        while ((str = br.readLine()) != null) {
            if (str.equals("Taunts")) {
                for (int i = 0; i < 9; i++) {
                    str = br.readLine();
                    String[] tokens = str.split(":");
                    if (tokens.length != 2) {
                        throw new InternalException("Malformed taunt");
                    }
                    int num = Integer.parseInt(tokens[0].trim());
                    m_currenttaunts[num] = tokens[1].trim();
                }
            } else if (str.equals("Controls")) {
                str = br.readLine();
                String[] tokens = str.split(":");
                if (tokens.length != 2) {
                    throw new InternalException("Malformed mouse control");
                }
                m_inverted = Boolean.parseBoolean(tokens[1]);
            } else if (str.equals("Colors")) {
                str = br.readLine();
                String[] tokens = str.split(" ");
                m_color = new Color(Integer.parseInt(tokens[0]), Integer.parseInt(tokens[1]), Integer.parseInt(tokens[2]));
                m_chooser.setColor(m_color);
            } else {
                throw new InternalException("Malformed customization file");
            }
        }
    }

    private void saveToFile(Writer writer) {
        try {
            BufferedWriter out = new BufferedWriter(writer);
            out.write("Taunts\n");
            for (int i = 1; i < 10; i++) {
                out.write(i + " : " + m_textfields[i].getText() + "\n");
            }
            out.write("Controls\n");
            out.write("Inverted : " + m_inverted + "\n");
            out.write("Colors\n");
            m_color = m_chooser.getColor();
            out.write(m_color.getRed() + " " + m_color.getGreen() + " " + m_color.getBlue());
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Component buildTauntsPanel() {
        Box box = Box.createVerticalBox();
        box.add(Box.createVerticalStrut(10));
        for (int i = 1; i < 10; i++) {
            m_textfields[i] = new JTextField(m_currenttaunts[i]);
            Box hbox = Box.createHorizontalBox();
            hbox.add(Box.createHorizontalStrut(15));
            hbox.add(new JLabel(i + ": "));
            hbox.add(Box.createHorizontalStrut(5));
            hbox.add(m_textfields[i]);
            hbox.add(Box.createHorizontalStrut(15));
            box.add(hbox);
            box.add(Box.createVerticalStrut(10));
        }
        return box;
    }

    private Component buildButtonsPanel() {
        Box buttonBox = Box.createHorizontalBox();
        JButton save = new JButton("Save to File");
        save.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                try {
                    saveToFile(new FileWriter(m_filename));
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        });
        JButton saveandquit = new JButton("Save and Close");
        saveandquit.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                try {
                    saveToFile(new FileWriter(m_filename));
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
                System.exit(0);
            }
        });
        JButton quit = new JButton("Quit Without Saving");
        quit.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        buttonBox.add(Box.createHorizontalStrut(10));
        buttonBox.add(save);
        buttonBox.add(Box.createHorizontalStrut(10));
        buttonBox.add(quit);
        buttonBox.add(Box.createHorizontalStrut(10));
        buttonBox.add(saveandquit);
        buttonBox.add(Box.createHorizontalStrut(10));
        return buttonBox;
    }

    private Component buildMouseStylePanel() {
        Action action1 = new AbstractAction("Inverted") {

            private static final long serialVersionUID = 3256728385593291065L;

            public void actionPerformed(ActionEvent evt) {
                m_inverted = true;
            }
        };
        Action action2 = new AbstractAction("Regular") {

            private static final long serialVersionUID = 3978428035412080433L;

            public void actionPerformed(ActionEvent evt) {
                m_inverted = false;
            }
        };
        JRadioButton b1 = new JRadioButton(action1);
        JRadioButton b2 = new JRadioButton(action2);
        ButtonGroup group = new ButtonGroup();
        group.add(b1);
        group.add(b2);
        ButtonModel model = m_inverted ? b1.getModel() : b2.getModel();
        group.setSelected(model, true);
        Box panel = Box.createHorizontalBox();
        panel.add(Box.createHorizontalGlue());
        panel.add(new JLabel("Mouse Style:"));
        panel.add(Box.createHorizontalGlue());
        panel.add(b1);
        panel.add(Box.createHorizontalGlue());
        panel.add(b2);
        panel.add(Box.createHorizontalGlue());
        return panel;
    }

    private Component buildColorPanel() {
        Box panel = Box.createVerticalBox();
        panel.add(Box.createVerticalGlue());
        panel.add(new JLabel("Customize your color:") {

            private static final long serialVersionUID = 4050761589688971575L;

            public float getAlignmentX() {
                return Component.CENTER_ALIGNMENT;
            }
        });
        panel.add(Box.createVerticalGlue());
        panel.add(m_chooser);
        panel.add(Box.createVerticalGlue());
        return panel;
    }
}
