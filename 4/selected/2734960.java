package org.sourceforge.zlang.ui;

import java.awt.*;
import java.awt.FileDialog;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.*;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.sourceforge.zlang.model.IndentedWriter;
import org.sourceforge.zlang.model.ZComment;
import org.sourceforge.zlang.model.ZFile;
import org.sourceforge.zlang.model.parser.*;
import org.w3c.dom.Document;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 * Main Window.
 * 
 * @author <a href="Tim.Lebedkov@web.de">Tim Lebedkov</a>
 * @version $Id: MainFrame.java,v 1.6 2002/12/04 22:49:15 hilt2 Exp $
 */
public class MainFrame extends JFrame {

    /**
     * main()
     *
     * @param args not used
     */
    public static void main(String[] args) {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        FileDialog fd = new FileDialog(mf, "Open/create a Java file", FileDialog.LOAD);
        while (true) {
            fd.show();
            if (fd.getFile() == null || fd.getDirectory() == null) {
                System.exit(0);
            }
            String s = fd.getFile();
            if (!s.endsWith(".java")) {
                JOptionPane.showMessageDialog(mf, "Wrong file extension. Should be '.java'.");
                continue;
            }
            File f = new File(fd.getDirectory(), fd.getFile());
            if (f.exists()) {
                if (s.endsWith(".zlser")) {
                    try {
                        ObjectInputStream ois = new ObjectInputStream(new BufferedInputStream(new FileInputStream(f)));
                        Object obj = ois.readObject();
                        ois.close();
                        if (!(obj instanceof ZFile)) {
                            JOptionPane.showMessageDialog(mf, "Wrong file format.", "Error", JOptionPane.ERROR_MESSAGE);
                            continue;
                        }
                        ZFile zf = (ZFile) obj;
                        if (!ZFile.isPackageOK(zf.getPackage(), f)) {
                            JOptionPane.showMessageDialog(mf, "This file should reside in a directory named " + zf.getPackage().replace('.', File.separatorChar) + ".", "Error", JOptionPane.ERROR_MESSAGE);
                            continue;
                        }
                        zf.setFile(f);
                        mf.setZFile(zf);
                        return;
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(mf, "Error reading file. " + e.getMessage());
                        continue;
                    } catch (ClassNotFoundException e) {
                        JOptionPane.showMessageDialog(mf, "Error reading file. " + e.getMessage());
                        continue;
                    }
                } else if (s.endsWith(".java")) {
                    try {
                        ZFile zf = loadJava(new FileInputStream(f));
                        if (zf != null) {
                            mf.setZFile(zf);
                            return;
                        }
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    }
                }
            } else {
                ZFile zf = new ZFile(f);
                zf.add(new ZComment(zf, "This file was generated by Zlang\n" + "see http://zlang.sourceforge.net"));
                mf.setZFile(zf);
                return;
            }
        }
    }

    /**
     * Loads from XML
     *
     * @param f an XML file
     * @return File or null
     */
    private static ZFile loadZlang(File f) {
        try {
            DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            db.setEntityResolver(new EntityResolver() {

                public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
                    if (publicId.equals(ZFile.PUBLIC_ID)) {
                        return new InputSource(getClass().getResourceAsStream("/org/sourceforge/zlang/model/zlang.dtd"));
                    }
                    return null;
                }
            });
            Document doc = db.parse(f);
            ZFile zf = new ZFile(f);
            zf.load(doc.getDocumentElement());
            return zf;
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainFrame.getInstance(), "Error reading file: " + e.getMessage());
        } catch (ParserConfigurationException e) {
            JOptionPane.showMessageDialog(MainFrame.getInstance(), "Parser configuration error: " + e.getMessage());
        } catch (SAXException e) {
            JOptionPane.showMessageDialog(MainFrame.getInstance(), "Error parsing XML: " + e.getMessage());
        }
        return null;
    }

    /**
     * Loads from Java file
     *
     * @param is todo
     * @return File or null
     */
    public static ZFile loadJava(InputStream is) {
        try {
            JavaParser parser = new JavaParser(is);
            ASTCompilationUnit unit = parser.CompilationUnit();
            ZFile zf = new ZFile(null);
            zf.load(unit);
            return zf;
        } catch (UnsupportedOperationException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(MainFrame.getInstance(), "Error parsing file. Syntax is not yet supported. " + e.getMessage());
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(MainFrame.getInstance(), "Error parsing file. " + e.getMessage());
        }
        return null;
    }

    private static MainFrame instance;

    private ZlangTree tree;

    /**
     * Returns main frame
     *
     * @return main window
     */
    public static MainFrame getInstance() {
        if (instance == null) instance = new MainFrame();
        return instance;
    }

    /**
     * Constructor for MainFrame.
     */
    public MainFrame() {
        super("Zlang editor");
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        setSize(Toolkit.getDefaultToolkit().getScreenSize());
        tree = new ZlangTree();
        JScrollPane sp = new JScrollPane(tree);
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(sp, BorderLayout.CENTER);
        addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent ev) {
                int res = JOptionPane.showConfirmDialog(MainFrame.this, "Do you want to save changes?", "Warning", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                switch(res) {
                    case JOptionPane.YES_OPTION:
                        ZFile zf = (ZFile) tree.getModel().getRoot();
                        File f = zf.getFile();
                        String n = f.getName();
                        n = n.substring(0, n.lastIndexOf('.')) + ".java";
                        f = new File(f.getParent(), n);
                        if (f.exists()) {
                            int ret = JOptionPane.showConfirmDialog(MainFrame.getInstance(), "File " + f + " already exists.\n" + "Would you like to overwrite it?", "Overwrite?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                            if (ret == JOptionPane.NO_OPTION) return;
                        }
                        try {
                            IndentedWriter w = new IndentedWriter(new BufferedWriter(new FileWriter(f)));
                            zf.printJava(w);
                            w.close();
                        } catch (UnsupportedOperationException e) {
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(MainFrame.getInstance(), "Syntax not yet supported " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        } catch (IOException e) {
                            JOptionPane.showMessageDialog(MainFrame.getInstance(), "Error writing file " + f + " " + e.getMessage());
                        }
                        System.exit(0);
                    case JOptionPane.NO_OPTION:
                        System.exit(0);
                    case JOptionPane.CANCEL_OPTION:
                }
            }
        });
    }

    /**
     * Sets the edited file.
     *
     * @param zf Zlang file
     */
    public void setZFile(ZFile zf) {
        tree.setModel(new ZlangTreeModel(zf));
    }
}
