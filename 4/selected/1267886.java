package vmap.main;

import ims.Identification;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URL;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
import java.util.StringTokenizer;
import java.util.zip.*;
import java.text.MessageFormat;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.JDesktopPane;
import vmap.controller.Controller;
import vmap.controller.MenuBar;
import vmap.modes.ModeController;
import vmap.view.mindmapview.MapView;
import ims.LIPDate;

public class Vmap extends JFrame implements VmapMain {

    public static final String version = "0.1g";

    public URL defaultPropsURL;

    public static Properties props;

    private JScrollPane scrollPane = new JScrollPane();

    private MenuBar menuBar;

    private JLabel status;

    private Map filetypes;

    private File autoPropertiesFile;

    private File patternsFile;

    private Identification id = new Identification();

    private JDesktopPane desktop;

    Controller c;

    public Vmap() {
        super("Vmap");
        LIPDate ld = new LIPDate("imsdefault", "Create", "Creation Date");
        String propsLoc = "vmap.properties";
        defaultPropsURL = getClass().getClassLoader().getResource(propsLoc);
        File helpDir = null;
        Properties def = new Properties();
        try {
            InputStream in = defaultPropsURL.openStream();
            try {
                def.load(in);
            } catch (Exception ex) {
                System.err.println("Panic! Error while loading default properties.");
            } finally {
                in.close();
            }
            props = def;
            Properties user = new Properties(def);
            File userPropertiesFolder = new File(getVmapDirectory());
            File userProperties = new File(userPropertiesFolder, def.getProperty("userproperties"));
            autoPropertiesFile = new File(userPropertiesFolder, def.getProperty("autoproperties"));
            patternsFile = new File(userPropertiesFolder, def.getProperty("patternsfile"));
            helpDir = new File(userPropertiesFolder, def.getProperty("helpdir"));
            try {
                if (!userPropertiesFolder.exists()) {
                    userPropertiesFolder.mkdir();
                }
                System.out.println();
                System.out.println("Looking for user properties:");
                System.out.println(userProperties);
                System.out.println();
                if (userProperties.exists()) {
                    in = new FileInputStream(userProperties);
                    user.load(in);
                    System.out.println("User properties found.");
                } else {
                    String output;
                    System.out.println("User properties not found. It will be automatically created.");
                    output = new String("# automatically generated user.properties file.\n# generated by Vmap version " + version + "\n# To change an option, please remove the '#' at the front of the corresponding line and restart vmap. Otherwise, the changes are ignored.\n");
                    String userPropsLoc = "user.properties";
                    URL userPropsURL = getClass().getClassLoader().getResource(userPropsLoc);
                    InputStream inProp = userPropsURL.openStream();
                    try {
                        BufferedReader br = new BufferedReader(new InputStreamReader(inProp));
                        String line;
                        while ((line = br.readLine()) != null) {
                            output += "#" + line + "\n";
                        }
                        BufferedWriter fileout = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(userProperties)));
                        try {
                            fileout.write(output);
                            System.out.println("Done.");
                        } catch (Exception ex) {
                            System.err.println(ex);
                        } finally {
                            fileout.close();
                        }
                    } catch (Exception ex) {
                        System.err.println(ex);
                    } finally {
                        inProp.close();
                    }
                }
                if (!helpDir.exists()) {
                    System.out.print("Creating help folder...");
                    helpDir.mkdir();
                    InputStream helpZip;
                    helpZip = getClass().getClassLoader().getResourceAsStream("html/helpfiles.zip");
                    if (helpZip != null) {
                        extractZip(helpZip, helpDir);
                    }
                    System.out.println("done");
                }
            } catch (Exception ex) {
                System.err.println(ex);
            } finally {
                in.close();
            }
            Properties auto = new Properties(user);
            try {
                in = new FileInputStream(autoPropertiesFile);
                auto.load(in);
            } catch (Exception ex) {
            } finally {
                in.close();
            }
            props = auto;
        } catch (Exception ex) {
        }
        try {
            String lookAndFeel = props.getProperty("lookandfeel");
            if (lookAndFeel.equals("windows")) {
                System.out.println("\nattempting to set windows look+feel");
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            } else if (lookAndFeel.equals("motif")) {
                System.out.println("\nattempting to set motif look+feel");
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
            } else if (lookAndFeel.equals("mac")) {
                UIManager.setLookAndFeel("javax.swing.plaf.mac.MacLookAndFeel");
            } else if (lookAndFeel.equals("metal")) {
                System.out.println("\nattempting to set metal look+feel");
                UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            } else if (lookAndFeel.equals("nothing")) {
            } else {
                System.out.println("Default (System) Look & Feel: " + UIManager.getSystemLookAndFeelClassName());
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            }
        } catch (Exception ex) {
            System.err.println("Unable to set Look & Feel.");
        }
        ImageIcon icon = new ImageIcon(getResource("images/VmapWindowIcon.png"));
        setIconImage(icon.getImage());
        getContentPane().setLayout(new BorderLayout());
        c = new Controller(this);
        if (Tools.safeEquals(getProperty("antialiasEdges"), "true")) {
            c.setAntialiasEdges(true);
        }
        if (Tools.safeEquals(getProperty("antialiasAll"), "true")) {
            c.setAntialiasAll(true);
        }
        c.setHelpDir(helpDir);
        menuBar = new MenuBar(c);
        setJMenuBar(menuBar);
        int win_width = Integer.parseInt(props.getProperty("appwindow_width", "0"));
        int win_height = Integer.parseInt(props.getProperty("appwindow_height", "0"));
        win_width = (win_width > 0) ? win_width : 640;
        win_height = (win_height > 0) ? win_height : 440;
        getRootPane().setPreferredSize(new Dimension(win_width, win_height));
        getContentPane().add(scrollPane, BorderLayout.CENTER);
        status = new JLabel();
        getContentPane().add(status, BorderLayout.SOUTH);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent e) {
                c.quit.actionPerformed(new ActionEvent(this, 0, "quit"));
            }

            public void windowActivated(WindowEvent e) {
                if ((getView() != null) && (getView().getSelected() != null)) {
                    getView().getSelected().requestFocus();
                }
            }
        });
        SwingUtilities.updateComponentTreeUI(this);
        c.changeToMode(getProperty("initial_mode"));
    }

    public boolean isApplet() {
        return false;
    }

    public File getPatternsFile() {
        return patternsFile;
    }

    public Container getViewport() {
        return scrollPane.getViewport();
    }

    public String getVmapVersion() {
        return version;
    }

    public int getWinHeight() {
        return getRootPane().getHeight();
    }

    public int getWinWidth() {
        return getRootPane().getWidth();
    }

    public int getWinState() {
        return getExtendedState();
    }

    public URL getResource(String name) {
        return getClass().getClassLoader().getResource(name);
    }

    public String getProperty(String key) {
        return props.getProperty(key);
    }

    public void setProperty(String key, String value) {
        props.setProperty(key, value);
    }

    public String getVmapDirectory() {
        return System.getProperty("user.home") + System.getProperty("file.separator") + getProperty("properties_folder");
    }

    public void saveProperties() {
        try {
            OutputStream out = new FileOutputStream(autoPropertiesFile);
            props.store(out, null);
            out.close();
        } catch (Exception ex) {
        }
    }

    public MapView getView() {
        return c.getView();
    }

    public Controller getController() {
        return c;
    }

    public void setView(MapView view) {
        scrollPane.setViewportView(view);
        if (view != null) view.setAutoscrolls(true);
    }

    public MenuBar getVmapMenuBar() {
        return menuBar;
    }

    public void out(String msg) {
        status.setText(msg);
    }

    public void err(String msg) {
        status.setText(msg);
    }

    /**
     * Open url in WWW browser. This method hides some differences between operating systems.
     */
    public void openDocument(URL url) throws Exception {
        String osName = System.getProperty("os.name");
        if (osName.substring(0, 3).equals("Win")) {
            String propertyString = new String("default_browser_command_windows");
            if (osName.indexOf("9") != -1 || osName.indexOf("Me") != -1) {
                propertyString += "_9x";
            } else {
                propertyString += "_nt";
            }
            String browser_command = new String();
            String command = new String();
            try {
                Object[] messageArguments = { url.toString() };
                MessageFormat formatter = new MessageFormat(getProperty(propertyString));
                browser_command = formatter.format(messageArguments);
                if (url.getProtocol().equals("file")) {
                    command = "rundll32 url.dll,FileProtocolHandler " + Tools.urlGetFile(url);
                } else if (url.toString().startsWith("mailto:")) {
                    command = "rundll32 url.dll,FileProtocolHandler " + url.toString();
                } else {
                    command = browser_command;
                }
                Runtime.getRuntime().exec(command);
            } catch (IOException x) {
                c.errorMessage("Could not invoke browser.\n\nVmap excecuted the following statement on a command line:\n\"" + command + "\".\n\nYou may look at the user or default property called '" + propertyString + "'.");
                System.err.println("Caught: " + x);
            }
        } else if (osName.startsWith("Mac OS")) {
            String urlString = url.toString();
            String browser_command = new String();
            try {
                if (url.getProtocol().equals("file")) {
                    urlString = urlString.replace('\\', '/').replaceAll(" ", "%20");
                }
                Object[] messageArguments = { urlString, urlString };
                MessageFormat formatter = new MessageFormat(getProperty("default_browser_command_mac"));
                browser_command = formatter.format(messageArguments);
                Runtime.getRuntime().exec(browser_command);
            } catch (IOException ex2) {
                c.errorMessage("Could not invoke browser.\n\nVmap excecuted the following statement on a command line:\n\"" + browser_command + "\".\n\nYou may look at the user or default property called 'default_browser_command_mac'.");
                System.err.println("Caught: " + ex2);
            }
        } else {
            String browser_command = new String();
            try {
                String correctedUrl = new String(url.toExternalForm());
                Object[] messageArguments = { correctedUrl, url.toString() };
                MessageFormat formatter = new MessageFormat(getProperty("default_browser_command_other_os"));
                browser_command = formatter.format(messageArguments);
                Runtime.getRuntime().exec(browser_command);
            } catch (IOException ex2) {
                c.errorMessage("Could not invoke browser.\n\nVmap excecuted the following statement on a command line:\n\"" + browser_command + "\".\n\nYou may look at the user or default property called 'default_browser_command_other_os'.");
                System.err.println("Caught: " + ex2);
            }
        }
    }

    private String transpose(String input, char findChar, String replaceString) {
        String res = new String();
        for (int i = 0; i < input.length(); ++i) {
            char d = input.charAt(i);
            if (d == findChar) res += replaceString; else res += d;
        }
        return res;
    }

    public void setWaitingCursor(boolean waiting) {
        if (waiting) {
            getRootPane().getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            getRootPane().getGlassPane().setVisible(true);
        } else {
            getRootPane().getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            getRootPane().getGlassPane().setVisible(false);
        }
    }

    private String getProgramForFile(String type) {
        if (filetypes == null) {
            filetypes = new HashMap();
            String raw = getProperty("filetypes");
            if (raw == null || raw.equals("")) {
                return "";
            }
            StringTokenizer tokens = new StringTokenizer(raw, ",");
            while (tokens.hasMoreTokens()) {
                StringTokenizer pair = new StringTokenizer(tokens.nextToken(), ":");
                String key = pair.nextToken().trim().toLowerCase();
                String value = pair.nextToken().trim();
                filetypes.put(key, value);
            }
        }
        return (String) filetypes.get(type.trim().toLowerCase());
    }

    /**Returns the ResourceBundle with the current language*/
    public ResourceBundle getResources() {
        String lang = getProperty("language");
        lang = "en";
        try {
            InputStream in = getClass().getClassLoader().getResource("Resources_" + lang + ".properties").openStream();
            PropertyResourceBundle resources = new PropertyResourceBundle(in);
            in.close();
            return resources;
        } catch (Exception ex) {
            System.err.println("Error loading Resources");
            return null;
        }
    }

    public java.util.logging.Logger getLogger(String forClass) {
        return java.util.logging.Logger.getLogger(forClass);
    }

    private void extractZip(InputStream in, File todir) throws IOException, FileNotFoundException {
        File z = new File(todir, "newzip.zip");
        FileOutputStream out = new FileOutputStream(z);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        out.close();
        ZipFile zf = new ZipFile(z);
        Tools.unpackZip(zf, todir);
    }

    public static void main(String[] args) {
        Vmap frame = new Vmap();
        frame.c.checkJavaVersion();
        ModeController ctrl = frame.c.getMode().getModeController();
        boolean fileLoaded = false;
        for (int i = 0; i < args.length; i++) {
            if (args[i].toLowerCase().endsWith(".xml")) {
                if (!Tools.isAbsolutePath(args[i])) {
                    args[i] = System.getProperty("user.dir") + System.getProperty("file.separator") + args[i];
                }
                try {
                    ctrl.load(new File(args[i]));
                    fileLoaded = true;
                } catch (Exception ex) {
                    System.err.println("File " + args[i] + "not found error");
                }
            }
        }
        if (!fileLoaded && frame.getProperty("onStartIfNotSpecified") != null) {
            frame.c.getLastOpenedList().open(frame.getProperty("onStartIfNotSpecified"));
        }
        frame.pack();
        try {
            if (frame.getView() != null) {
                frame.getView().moveToRoot();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (Tools.safeEquals(frame.getProperty("toolbarVisible"), "false")) {
            frame.c.setToolbarVisible(false);
        }
        if (Tools.safeEquals(frame.getProperty("leftToolbarVisible"), "false")) {
            frame.c.setLeftToolbarVisible(false);
        }
        frame.setVisible(true);
        int win_state = Integer.parseInt(Vmap.props.getProperty("appwindow_state", "0"));
        win_state = ((win_state & ICONIFIED) != 0) ? NORMAL : win_state;
        frame.setExtendedState(win_state);
    }
}
