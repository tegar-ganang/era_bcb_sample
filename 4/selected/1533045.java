package org.wcb.gui.forms.wizard;

import org.wcb.gui.component.JXTitlePanel;
import org.wcb.model.vo.hibernate.FAA8710ApplicationBO;
import org.jdesktop.swingx.border.DropShadowBorder;
import org.apache.commons.lang.StringUtils;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.JTextField;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JLabel;
import javax.swing.BorderFactory;
import java.awt.Color;
import java.awt.BorderLayout;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import java.util.Date;
import com.toedter.calendar.JDateChooser;

/**
 * <small>
 * <p/>
 * Copyright (C)  2006  wbogaardt.
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * <p/>
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 * <p/>
 * $File:  $ <br>
 * $Change:  $ submitted by $Author: wbogaardt $ at $DateTime: Oct 26, 2006 2:43:12 PM $ <br>
 * </small>
 *
 * @author wbogaardt
 *        Step 3 is personal airman information.
 */
public class Step3of8710Wizard extends JXTitlePanel implements ItemListener {

    /**
     * Creates new instance of the wizard page.
     */
    public Step3of8710Wizard() {
        super("Step 3 of 6 - Citizenship/Airmen records", new Color(0x3779ff));
        Border shadow = new DropShadowBorder(Color.BLACK, 1, 5, .3f, 15, true, true, true, true);
        setBorder(new CompoundBorder(shadow, getBorder()));
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        yesCitizenRb = new JRadioButton("USA", true);
        yesCitizenRb.addItemListener(this);
        noCitizenRb = new JRadioButton("Other", false);
        noCitizenRb.addItemListener(this);
        specifyCitizenshipTf = new JTextField(20);
        yesCertificateRb = new JRadioButton("Yes", false);
        yesCertificateRb.addItemListener(this);
        noCertificateRb = new JRadioButton("No", true);
        noCertificateRb.addItemListener(this);
        yesUnderstandEnglishRb = new JRadioButton("Yes", true);
        noUnderstandEnglishRb = new JRadioButton("No", false);
        certificateGradeTf = new JTextField(20);
        certificateNumberTf = new JTextField(20);
        certificateIssueDate = new JDateChooser();
        setLayout(new BorderLayout());
        add(getCitizenshipPanel(), BorderLayout.NORTH);
        add(getCertificatePanel(), BorderLayout.CENTER);
        this.enableCitizenship(false);
        this.enablePilotCertificate(false);
    }

    /**
     * Create the citizenship display panel.
     * @return Citizenship question panel.
     */
    private JPanel getCitizenshipPanel() {
        JPanel citizenshipPanel = new JPanel();
        citizenshipPanel.setLayout(new GridBagLayout());
        citizenshipPanel.setBorder(BorderFactory.createTitledBorder("Citizenship"));
        ButtonGroup groupCitizen = new ButtonGroup();
        groupCitizen.add(yesCitizenRb);
        groupCitizen.add(noCitizenRb);
        ButtonGroup groupUnderstandEnglish = new ButtonGroup();
        groupUnderstandEnglish.add(yesUnderstandEnglishRb);
        groupUnderstandEnglish.add(noUnderstandEnglishRb);
        GridBagConstraints gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        citizenshipPanel.add(new JLabel("Citizenship"), gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        citizenshipPanel.add(yesCitizenRb, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        citizenshipPanel.add(noCitizenRb, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        citizenshipPanel.add(specifyCitizenLabel, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        citizenshipPanel.add(specifyCitizenshipTf, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        citizenshipPanel.add(new JLabel("Do you read, write and understand English?"), gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        citizenshipPanel.add(yesUnderstandEnglishRb, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        citizenshipPanel.add(noUnderstandEnglishRb, gridBagConstraints);
        return citizenshipPanel;
    }

    /**
     * Create certification questionair panel.
     * @return Display panel with pilot certificate information.
     */
    private JPanel getCertificatePanel() {
        JPanel certificatePanel = new JPanel();
        certificatePanel.setLayout(new java.awt.GridBagLayout());
        certificatePanel.setBorder(BorderFactory.createTitledBorder("Previous Certificates"));
        ButtonGroup group = new ButtonGroup();
        group.add(yesCertificateRb);
        group.add(noCertificateRb);
        GridBagConstraints gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        certificatePanel.add(yesCertificateRb, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        certificatePanel.add(noCertificateRb, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        certificatePanel.add(pilotGradeLabel, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        certificatePanel.add(certificateGradeTf, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        certificatePanel.add(certificateLabel, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        certificatePanel.add(certificateNumberTf, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        certificatePanel.add(dateIssuedLabel, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        certificatePanel.add(certificateIssueDate, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        certificatePanel.add(new JLabel("Do you now hold, or have you ever held an FAA Pilot Certificate?"), gridBagConstraints);
        return certificatePanel;
    }

    /**
     * Item state change event listener to disable or enable display objects.
     * Changes detect for radio button objects to enable or disable a field.
     * @param evt The item listening event.
     */
    public void itemStateChanged(ItemEvent evt) {
        Object item = evt.getItem();
        if (item.equals(yesCertificateRb)) {
            this.enablePilotCertificate(true);
        }
        if (item.equals(noCertificateRb)) {
            this.enablePilotCertificate(false);
        }
        if (item.equals(yesCitizenRb)) {
            this.enableCitizenship(false);
        }
        if (item.equals(noCitizenRb)) {
            this.enableCitizenship(true);
        }
    }

    /**
     * Load the faa 8710 bo application. This is when someone
     * has already filled out a prior application we want the fields to be
     * prefilled.
     * @param app The database business object to allow the form to be prefilled.
     */
    public void loadApplicant(FAA8710ApplicationBO app) {
        if (StringUtils.trimToNull(app.getCertificateNumber()) != null) {
            enablePilotCertificate(true);
            yesCertificateRb.setSelected(true);
            certificateGradeTf.setText(app.getGradePilotCertificate());
            certificateNumberTf.setText(app.getCertificateNumber());
            certificateIssueDate.setDate(app.getCertificateIssued());
        }
    }

    /**
     * This sets all the necessary fields to be
     * enabled or disabled based on user selecting
     * yes a US citizen or no.
     * @param bVals true enables all the fields
     */
    private void enableCitizenship(boolean bVals) {
        specifyCitizenshipTf.setEnabled(bVals);
        specifyCitizenLabel.setEnabled(bVals);
    }

    /**
     * This enables or disables all the certificate
     * fields based on user selecting yes or no on the
     * form.
     * @param bVal true enables all the fields
     */
    private void enablePilotCertificate(boolean bVal) {
        certificateGradeTf.setEnabled(bVal);
        certificateNumberTf.setEnabled(bVal);
        certificateIssueDate.setEnabled(bVal);
        certificateLabel.setEnabled(bVal);
        pilotGradeLabel.setEnabled(bVal);
        dateIssuedLabel.setEnabled(bVal);
    }

    /**
     * Some logic to return if the user selected us
     * citizen or other country.
     * @return True if USA and false for other.
     */
    public boolean isCitizen() {
        return yesCitizenRb.isSelected();
    }

    /**
     * If isCitizen is false then get the specified country
     * of citizen ship.
     * @return  Specified country of citizenship.
     */
    public String specifyCitizenship() {
        if (!isCitizen()) {
            return specifyCitizenshipTf.getText();
        }
        return "";
    }

    /**
     * Applicant understands english.
     * @return boolean understand english question.
     */
    public boolean isUnderstandEnglish() {
        return yesUnderstandEnglishRb.isSelected();
    }

    /**
     * If the applicant has a previous pilot certificate
     * return true.
     * @return True has had a pilot certificate, false if none.
     */
    public boolean isCertifiedPilot() {
        return yesCertificateRb.isSelected();
    }

    /**
     * If the applicant has a pilot's license or previous one
     * isCertifiedPilot() get the certificate grade.
     * @return The grade of the previous license
     */
    public String getCertificateGrade() {
        if (isCertifiedPilot()) {
            return certificateGradeTf.getText();
        }
        return "";
    }

    /**
     * If the applicant has a pilot's license or previous one
     * isCertifiedPilot() get the certificate number.
     * @return The certificate number
     */
    public String getCertificateNumber() {
        if (isCertifiedPilot()) {
            return certificateNumberTf.getText();
        }
        return "";
    }

    /**
     * If the applicant has a pilot's license or previous one
     * isCertifiedPilot() get the isssue date of the certificate.
     * @return date previous certificate was issued.
     */
    public Date getCertificateIssuedDate() {
        return certificateIssueDate.getDate();
    }

    private JTextField certificateGradeTf;

    private JTextField certificateNumberTf;

    private JDateChooser certificateIssueDate;

    private JRadioButton noCertificateRb;

    private JRadioButton noCitizenRb;

    private JTextField specifyCitizenshipTf;

    private JRadioButton yesCertificateRb;

    private JRadioButton yesCitizenRb;

    private JRadioButton yesUnderstandEnglishRb;

    private JRadioButton noUnderstandEnglishRb;

    private JLabel certificateLabel = new JLabel("Certificate Number");

    private JLabel pilotGradeLabel = new JLabel("Grade Pilot Certificate");

    private JLabel dateIssuedLabel = new JLabel("Date Issued");

    private JLabel specifyCitizenLabel = new JLabel("Specify");
}
