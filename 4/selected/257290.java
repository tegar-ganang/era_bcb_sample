package com.anaxima.eslink.tools.sasdoc;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;
import com.anaxima.eslink.tools.ToolsPlugin;
import com.anaxima.eslink.tools.sasdoc.elements.AbstractElement;
import com.anaxima.eslink.tools.sasdoc.elements.AttributeInformation;
import com.anaxima.eslink.tools.sasdoc.elements.MethodInformation;
import com.anaxima.eslink.tools.sasdoc.elements.MethodParameter;
import com.anaxima.eslink.tools.sasdoc.elements.PackageInformation;
import com.anaxima.eslink.tools.sasdoc.elements.SasBaseInformation;
import com.anaxima.eslink.tools.sasdoc.elements.SclClassInformation;

/**
 * Erzeugung der HTML-Dateien.
 * 
 * @author Thomas Vater
 */
public class HtmlOutput {

    private static com.anaxima.eslink.tools.log.ILogger log = ToolsPlugin.getLogger();

    /**
	 * Frame Namen: links oben, Liste der Libraries.
	 */
    public static final String LIBLIST_FRAME = "libListFrame";

    /**
	 * Frame Namen: links unten, Liste der Elemente.
	 */
    public static final String CLASSLIST_FRAME = "classListFrame";

    /**
	 * Frame Namen: rechts, Elementebeschreibung.
	 */
    public static final String DOC_FRAME = "docFrame";

    /**
	 * Image-Prefix f�r Top-Frames.
	 */
    public static final String IMG_FRAMES = "images/";

    /**
	 * Basisverzeichnis f�r die Ausgabe.
	 */
    private String _baseDir;

    /**
	 * Verweis auf das <code>ClassDoc</code> Objekt.
	 */
    private ClassDoc _classDocRef = null;

    /**
	 * Konstruktor mit Basisverzeichnis.
	 */
    public HtmlOutput(String argBaseDir, ClassDoc argClassDoc) {
        _baseDir = argBaseDir;
        _classDocRef = argClassDoc;
    }

    /**
	 * Filereferenz relativ zum Basisverzeichnis erzeugen und
	 * sicherstellen, dass das Elternverzeichnis auch existiert. 
	 */
    private File _getFileRef(String argDir) {
        File f = new File(new File(_baseDir), argDir);
        File parent = f.getParentFile();
        if (!parent.exists()) parent.mkdirs();
        return f;
    }

    /**
	 * Erzeugen eines Standart-Headers.
	 *
	 * @param	argOut
	 * 			Ausgabekanal.
	 * 
	 * @param	argTitle
	 * 			Titel f�r den TITLE-Tag.
	 * 
	 * @param	argLevel
	 * 			Angabe der Verzeichnistiefe f�r Link auf css.
	 */
    private void _putHeader(PrintWriter argOut, String argTitle, int argLevel) {
        String cssLevel = AbstractElement.getLevelPrefix(argLevel);
        argOut.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\">");
        argOut.println("<HTML>");
        argOut.println("<HEAD>");
        argOut.println("<!-- Generated by anaxima SASDOC on " + new Date() + "-->");
        argOut.println("<TITLE>");
        argOut.println(argTitle);
        argOut.println("</TITLE>");
        argOut.println("<LINK REL =\"stylesheet\" TYPE=\"text/css\" HREF=\"" + cssLevel + "stylesheet.css\" TITLE=\"Style\">");
        argOut.println("<SCRIPT type=\"text/javascript\">");
        argOut.println("function windowTitle() {");
        argOut.println("  parent.document.title=\"" + argTitle + "\";");
        argOut.println("}");
        argOut.println("</SCRIPT>");
        argOut.println("</HEAD>");
    }

    /**
	 * Erzeugen eines Standart-Footers.
	 *
	 * @param	argOut
	 * 			Ausgabekanal.
	 */
    private void _putFooter(PrintWriter argOut) {
        argOut.println("</HTML>");
    }

    /**
	 * Erzeuge Leereichen
	 *
	 * @param	argOut
	 * 			Ausgabekanal.
	 * 
	 * @param	argAmount
	 * 			Anzahl der zu erzeugenden Leerzeichen.
	 */
    private void _putSpaces(PrintWriter argOut, int argAmount) {
        for (int i = 0; i < argAmount; i++) argOut.print(" ");
    }

    /**
	 * Kopiermethode f�r Standart-Ressourcen.
	 * 
	 * @param	argSource
	 * 			Name der zu kopierenden Resource.
	 * 
	 * @param	argTarget
	 * 			Zieldatei der Resource in Ausgabe.
	 */
    private void _copyResources(String argSource, String argTarget) throws IOException {
        File outRef = _getFileRef(argTarget);
        OutputStream out = new FileOutputStream(outRef);
        InputStream in = this.getClass().getResourceAsStream(argSource);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        out.close();
    }

    /**
	 * Erzeugt Methoden-Dateils f�r die �bergebene Liste.
	 * 
	 * @param	argOut
	 * 			Ausgabekanal.
	 * 
	 * @param	argTitle
	 * 			�berschrift f�r den erzeugten Abschnitt.
	 * 
	 * @param	argClassInfo
	 * 			Einh�llende Klasse.
	 * 
	 * @param	argList
	 * 			Liste der Methoden.
	 */
    private void _writeMethodDetails(PrintWriter argOut, String argTitle, SclClassInformation argClassInfo, MethodInformation[] argList) {
        if (argList.length == 0) return;
        PackageInformation pInfo = argClassInfo.getParentPackage();
        String thisFileRef = argClassInfo.getFileRef(pInfo.getDepth(), "html");
        argOut.println("<A NAME=\"method_detail\"><!-- --></A>");
        argOut.println("<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">");
        argOut.println("<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">");
        argOut.println("<TD COLSPAN=1><FONT SIZE=\"+2\">");
        argOut.println("<B>" + argTitle + "</B></FONT></TD>");
        argOut.println("</TR></TABLE>");
        MethodParameter[] methParms;
        String methName;
        String methSig;
        String methDecl;
        String methRef;
        SclType retType;
        boolean reachedOptional = false;
        int indent = 0;
        for (int i = 0; i < argList.length; i++) {
            methName = argList[i].getDeclaredName();
            methSig = argList[i].getSignature();
            methRef = thisFileRef + "#" + methSig;
            argOut.println("<A NAME=\"" + methSig + "\"><!-- --></A>");
            argOut.println("<H3>" + methName + "</H3>");
            methDecl = "<b>" + methName + "</b>: " + argList[i].getScope().toString() + " method  ";
            indent = methName.length() + 2 + argList[i].getScope().toString().length() + 9;
            argOut.println("<PRE>");
            argOut.print(methDecl);
            methParms = argList[i].getParameters();
            reachedOptional = false;
            for (int p = 0; p < methParms.length; p++) {
                if (p > 0) {
                    argOut.println("");
                    _putSpaces(argOut, indent);
                }
                if (!reachedOptional && methParms[p].isOptional()) {
                    reachedOptional = true;
                    argOut.print("<span class=\"Keyword\">optional=</span> ");
                    indent += 10;
                }
                argOut.print(methParms[p].getDeclaredName());
                argOut.print(" : " + _classDocRef.getTypeLink(methParms[p].getType(), pInfo.getDepth()));
            }
            retType = argList[i].getReturnType();
            if (!retType.isVoidType()) {
                if (methParms.length > 0) {
                    argOut.println();
                    _putSpaces(argOut, indent - (reachedOptional ? 10 : 0));
                }
                argOut.print("<span class=\"Keyword\">return=</span> " + _classDocRef.getTypeLink(retType, pInfo.getDepth()));
            }
            argOut.println("</PRE>");
            argOut.println("<DL>");
            argOut.println("<DD>" + argList[i].getComment().getFormattedText(_classDocRef, argClassInfo, pInfo.getDepth()));
            argOut.println("</DL>");
            argOut.println("<HR>");
        }
    }

    /**
	 * Erzeuge Eintrag in �bersicht mit passendem Icon.
	 *  
	 * @param	argOut
	 * 			Ausgabekanal.
	 * 
	 * @param	argElementInfo
	 * 			Information �ber den Eintrag
	 * 
	 * @param	argLevel
	 * 			Dateiebene in der sich die �bersicht befindet.
	 * 
	 * @throws IOException
	 */
    private void _addOverviewEntry(PrintWriter argOut, AbstractElement argElementInfo, int argLevel) throws IOException {
        PackageInformation pInfo = argElementInfo.getParentPackage();
        String name = argElementInfo.getBaseName();
        String packageName = pInfo.getName();
        String path = argElementInfo.getFileRef(argLevel, "html");
        String imgRef = AbstractElement.getLevelPrefix(argLevel) + IMG_FRAMES;
        argOut.print("<IMG SRC=\"" + imgRef + argElementInfo.getIcon() + "\">");
        argOut.print("<IMG SRC=\"" + imgRef + argElementInfo.getDecoratorIcon() + "\">");
        argOut.println("<A HREF=\"" + path + "\" title=\"class in " + packageName + "\" target=\"" + DOC_FRAME + "\">" + name + "</A>");
    }

    /**
	 * Erzeugung der Datei index.html.
	 */
    public void writeIndexHtml() throws IOException {
        File outRef = _getFileRef("index.html");
        PrintWriter out = new PrintWriter(new FileOutputStream(outRef));
        _putHeader(out, _classDocRef.getDocTitle(), 0);
        out.println("<FRAMESET cols=\"20%,80%\">");
        out.println("<FRAMESET rows=\"30%,70%\">");
        out.println("<FRAME src=\"overview-frame.html\" name=\"" + LIBLIST_FRAME + "\" title=\"All Libraries\">");
        out.println("<FRAME src=\"allclasses-frame.html\" name=\"" + CLASSLIST_FRAME + "\" title=\"All Classes\">");
        out.println("</FRAMESET>");
        out.println("<FRAME src=\"overview-summary.html\" name=\"" + DOC_FRAME + "\" title=\"Class Descriptions\" scrolling=\"yes\">");
        out.println("<NOFRAMES>");
        out.println("<H2>Frame Alert</H2>");
        out.println("<P>This document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client.");
        out.println("</NOFRAMES>");
        out.println("</FRAMESET>");
        _putFooter(out);
        out.close();
    }

    /**
	 * Erzeugung der Datei overview-frame.html.
	 * Diese Datei enth�lt die Auflistung aller Packages.
	 * 
	 * @param	argRootPackage
	 * 			Wurzel-Paket
	 * 
	 * @param	argPList
	 * 			Liste der Packages. Darf nur Elemente vom Typ {@link PackageInformation} enthalten. 
	 */
    public void writePackages(PackageInformation argRootPackage, Map argPList) throws IOException {
        File outRef = _getFileRef("overview-frame.html");
        PrintWriter out = new PrintWriter(new FileOutputStream(outRef));
        File outRefDetail = _getFileRef("overview-summary.html");
        PrintWriter outDet = new PrintWriter(new FileOutputStream(outRefDetail));
        _putHeader(out, "Alle Kataloge", 0);
        _putHeader(outDet, "�bersicht aller Kataloge", 0);
        out.println("<BODY>");
        out.println("<TABLE BORDER=\"0\" WIDTH=\"100%\" SUMMARY=\"\">");
        out.println("<TR>");
        out.println("<TD NOWRAP><FONT size=\"+1\" CLASS=\"FrameTitleFont\">");
        out.println("<B>anaxima SASDOC</B></FONT></TD>");
        out.println("</TR>");
        out.println("</TABLE>");
        out.println("<TABLE BORDER=\"0\" WIDTH=\"100%\" SUMMARY=\"\">");
        out.println("<TR>");
        out.println("<TD NOWRAP><FONT CLASS=\"FrameItemFont\"><A HREF=\"allclasses-frame.html\" target=\"" + CLASSLIST_FRAME + "\">Alle Elemente</A></FONT>");
        out.println("<P>");
        out.println("<FONT size=\"+1\" CLASS=\"FrameHeadingFont\">");
        out.println("SAS Kataloge</FONT>");
        out.println("<BR>");
        outDet.println("<HR>");
        outDet.println("<CENTER><H1>");
        outDet.println(_classDocRef.getDocTitle());
        outDet.println("</H1></CENTER>");
        if (argRootPackage != null && argRootPackage.hasPackageComment()) {
            outDet.println(argRootPackage.getPackageComment().getFormattedText(_classDocRef, null, 0));
        }
        outDet.println("<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">");
        outDet.println("<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">");
        outDet.println("<TD COLSPAN=2><FONT SIZE=\"+2\">");
        outDet.println("<B>�bersicht aller Kataloge</B></FONT></TD>");
        outDet.println("</TR>");
        String name, path, pathDet;
        PackageInformation[] pList = (PackageInformation[]) argPList.values().toArray(new PackageInformation[0]);
        Arrays.sort(pList);
        for (int i = 0; i < pList.length; i++) {
            if (pList[i].isRoot() || pList[i].getElementSize() <= 0) continue;
            name = pList[i].getName();
            path = pList[i].getRelPath() + "/package-frame.html";
            pathDet = pList[i].getRelPath() + "/package-summary.html";
            out.println("<FONT CLASS=\"FrameItemFont\"><A HREF=\"" + path + "\" target=\"" + CLASSLIST_FRAME + "\">" + name + "</A></FONT>");
            out.println("<BR>");
            writePackageOverview(pList[i]);
            outDet.println("<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">");
            outDet.println("<TD WIDTH=\"20%\"><B><A HREF=\"" + pathDet + "\">" + name + "</A></B></TD>");
            if (pList[i].hasPackageComment()) {
                outDet.println("<TD>" + pList[i].getPackageComment().getFirstSentence() + "</TD></TR>");
            } else {
                outDet.println("<TD>&nbsp;</TD></TR>");
            }
        }
        out.println("</TD></TR></TABLE>");
        out.println("<P>&nbsp;");
        out.println("</BODY>");
        outDet.println("</TABLE>");
        _putFooter(out);
        _putFooter(outDet);
        out.close();
        outDet.close();
    }

    /**
	 * Erzeugung der Datei allclasses-frame.html.
	 * Diese Datei enth�lt die Auflistung aller Elemente.
	 * 
	 * @param	argElementList
	 * 			Liste aller Datei-Elemente. Darf nur Elemente vom Typ {@link AbstractElement} enthalten. 
	 */
    public void writeElements(Map argElementList) throws IOException {
        File outRef = _getFileRef("allclasses-frame.html");
        PrintWriter out = new PrintWriter(new FileOutputStream(outRef));
        _putHeader(out, "Alle Elemente", 0);
        out.println("<BODY>");
        out.println("<BODY BGCOLOR=\"white\">");
        out.println("<FONT size=\"+1\" CLASS=\"FrameHeadingFont\">");
        out.println("<B>Alle Elemente</B></FONT>");
        out.println("<BR>");
        out.println("<TABLE BORDER=\"0\" WIDTH=\"100%\" SUMMARY=\"\">");
        out.println("<TR>");
        out.println("<TD NOWRAP><FONT CLASS=\"FrameItemFont\">");
        AbstractElement[] allElements = (AbstractElement[]) argElementList.values().toArray(new AbstractElement[0]);
        Arrays.sort(allElements, AbstractElement.BASENAME_COMPARATOR);
        String name, packageName, path;
        for (int i = 0; i < allElements.length; i++) {
            AbstractElement elementInfo = allElements[i];
            _addOverviewEntry(out, elementInfo, 0);
            out.println("<BR>");
            if (elementInfo instanceof SclClassInformation) {
                writeClassDoc((SclClassInformation) elementInfo);
            } else {
                writeSasBaseDoc((SasBaseInformation) elementInfo);
            }
        }
        out.println("</FONT></TD></TR>");
        out.println("</TABLE>");
        out.println("</BODY>");
        _putFooter(out);
        out.close();
    }

    /**
	 * Erzeugung der Dateien package-frame.html und package-summary.html.
	 * Diese Dateien enth�lten die Auflistung aller Elemente in einem
	 * bestimmten Package ggf. mit �bersichtskommentaren.
	 * 
	 * @param	argPInfo
	 * 			Informationen �ber das Package Katalog. 
	 */
    public void writePackageOverview(PackageInformation argPInfo) throws IOException {
        String packageName = argPInfo.getName();
        File outRef = _getFileRef(argPInfo.getRelPath() + "/package-frame.html");
        PrintWriter out = new PrintWriter(new FileOutputStream(outRef));
        File outSumRef = _getFileRef(argPInfo.getRelPath() + "/package-summary.html");
        PrintWriter out2 = new PrintWriter(new FileOutputStream(outSumRef));
        if (argPInfo.hasPackageComment()) {
            out2.println(argPInfo.getPackageComment().getFormattedText(_classDocRef, null, argPInfo.getDepth()));
        }
        _putHeader(out, "Elemente im " + packageName, argPInfo.getDepth());
        out.println("<BODY>");
        out.println("<BODY BGCOLOR=\"white\">");
        out.println("<FONT size=\"+1\" CLASS=\"FrameTitleFont\">");
        out.println("<a href=\"./package-summary.html\" target=\"" + DOC_FRAME + "\">" + packageName + "</a></B></FONT>");
        out.println("<TABLE BORDER=\"0\" WIDTH=\"100%\" SUMMARY=\"\">");
        out.println("<TR>");
        out.println("<TD NOWRAP><FONT size=\"+1\" CLASS=\"FrameHeadingFont\">");
        out.println("Elemente</FONT>&nbsp;<br><FONT CLASS=\"FrameItemFont\">");
        _putHeader(out2, "Katalog " + packageName, argPInfo.getDepth());
        out2.println("<BODY>");
        out2.println("<H2>Inhalt Katalog " + packageName);
        out2.println("</H2>\n<p>\n");
        out2.println("<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">");
        out2.println("<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">");
        out2.println("<TD COLSPAN=2><FONT SIZE=\"+2\">");
        out2.println("<B>Klassen und Programme</B></FONT></TD>");
        out2.println("</TR>");
        AbstractElement[] allElements = (AbstractElement[]) argPInfo.getElementList().values().toArray(new AbstractElement[0]);
        Arrays.sort(allElements, AbstractElement.BASENAME_COMPARATOR);
        String imgRef = AbstractElement.getLevelPrefix(2) + IMG_FRAMES;
        String name, path;
        for (int i = 0; i < allElements.length; i++) {
            AbstractElement elementInfo = allElements[i];
            name = elementInfo.getBaseName();
            path = elementInfo.getFullName() + ".html";
            _addOverviewEntry(out, elementInfo, argPInfo.getDepth());
            out.println("<BR>");
            out2.println("<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">");
            out2.print("<TD WIDTH=\"15%\"><b>");
            _addOverviewEntry(out2, elementInfo, argPInfo.getDepth());
            out2.println("</b></TD>");
            out2.println("<TD>" + elementInfo.getFileComment().getFirstSentence() + "&nbsp;</TD>");
            out2.println("</TR>");
        }
        out.println("</FONT></TD></TR>");
        out.println("</TABLE>");
        out.println("</BODY>");
        _putFooter(out);
        _putFooter(out2);
        out.close();
        out2.close();
    }

    /**
	 * Erzeugung der SAS-Base Dokumentation.
	 * 
	 * @param	argInfo
	 * 			Dateiinformationen. 
	 */
    public void writeSasBaseDoc(SasBaseInformation argInfo) throws IOException {
        if (log.isDebugEnabled()) log.debug("SAS-BASE: Erzeuge HTML f�r " + argInfo.getFullName());
        PackageInformation pInfo = argInfo.getParentPackage();
        String name = argInfo.getBaseName();
        String packageName = pInfo.getName();
        String path = argInfo.getFileRef(0, "html");
        File outRef = _getFileRef(path);
        PrintWriter out = new PrintWriter(new FileOutputStream(outRef));
        String thisFileRef = argInfo.getFileRef(pInfo.getDepth(), "html");
        _putHeader(out, name, pInfo.getDepth());
        out.println("<BODY BGCOLOR=\"white\" onload=\"windowTitle();\">");
        out.println("<HR>");
        out.println("<!-- ======== START OF CLASS DATA ======== -->");
        out.println("<H2>");
        out.println("<FONT SIZE=\"-1\">" + packageName + "</FONT>");
        out.println("<BR>");
        out.println("SAS-Base-Programm " + name + "</H2>");
        out.println("<HR>");
        out.println("<P>");
        out.println(argInfo.getFileComment().getFormattedText(_classDocRef, argInfo, pInfo.getDepth()));
        out.println("<P>");
        out.println("</BODY>");
        _putFooter(out);
        out.close();
    }

    /**
	 * Erzeugung der Klassendokumentation.
	 * 
	 * @param	argClassInfo
	 * 			Klasseninformationen. 
	 */
    public void writeClassDoc(SclClassInformation argClassInfo) throws IOException {
        if (log.isDebugEnabled()) log.debug("SAS-SCL: Erzeuge HTML f�r " + argClassInfo.getFullName());
        PackageInformation pInfo = argClassInfo.getParentPackage();
        String name = argClassInfo.getBaseName();
        String packageName = pInfo.getName();
        String path = argClassInfo.getFileRef(0, "html");
        String constructorTitle;
        String methodTitle;
        File outRef = _getFileRef(path);
        PrintWriter out = new PrintWriter(new FileOutputStream(outRef));
        ArrayList inhList = new ArrayList(5);
        SclClassInformation inhCi = null;
        String thisFileRef = argClassInfo.getFileRef(pInfo.getDepth(), "html");
        _putHeader(out, name, pInfo.getDepth());
        out.println("<BODY BGCOLOR=\"white\" onload=\"windowTitle();\">");
        out.println("<HR>");
        out.println("<!-- ======== START OF CLASS DATA ======== -->");
        out.println("<H2>");
        out.println("<FONT SIZE=\"-1\">" + packageName + "</FONT>");
        out.println("<BR>");
        if (argClassInfo.isOOType()) {
            if (argClassInfo.isInterface()) {
                out.println("Interface " + name + "</H2>");
            } else {
                out.println("Klasse " + name + "</H2>");
            }
            out.println("<PRE>");
            constructorTitle = "Konstruktoren";
            methodTitle = "Methoden";
            inhCi = argClassInfo;
            String parentClass;
            while (inhCi != null) {
                inhList.add(inhCi);
                parentClass = inhCi.getParentClass();
                if (parentClass != null) {
                    inhCi = _classDocRef.lookupClass(inhCi.getParentClass());
                    if (inhCi == null) inhList.add(parentClass);
                } else {
                    inhCi = null;
                }
            }
            int inhStart = inhList.size() - 1;
            if (argClassInfo.isInterface()) inhStart--;
            for (int i = inhStart; (inhStart > 0 && i >= 0); i--) {
                _putSpaces(out, (inhStart - i) * 2);
                if (inhList.get(i) instanceof String) {
                    out.println(inhList.get(i).toString());
                } else {
                    inhCi = (SclClassInformation) inhList.get(i);
                    out.print("<IMG SRC=\"../../images/inherit.gif\" ALT=\"extends\">");
                    out.println("<A HREF=\"" + inhCi.getFileRef(pInfo.getDepth(), "html") + "\">" + inhCi.getFullName() + "</A>");
                }
            }
            out.println("</PRE>");
            ArrayList supportList = new ArrayList(5);
            SclClassInformation supportCi;
            String[] allIntfc = argClassInfo.getSortedInterfaces();
            if (allIntfc.length > 0) {
                out.println("<DL>");
                out.print("<DT><B>Alle unterst�tzten Interfaces:</B> <DD>");
                for (int i = 0; i < allIntfc.length; i++) {
                    if (i > 0) out.print(", ");
                    supportCi = _classDocRef.lookupClass(allIntfc[i]);
                    if (supportCi == null) {
                        supportList.add(allIntfc[i]);
                        out.print(allIntfc[i]);
                    } else {
                        supportList.add(supportCi);
                        out.print("<A HREF=\"" + supportCi.getFileRef(pInfo.getDepth(), "html") + "\">" + supportCi.getBaseName() + "</A>");
                    }
                }
                out.println("</DD></DL>");
            }
            List subclassList = null;
            String subclassTitel = "";
            if (argClassInfo.isInterface()) {
                subclassList = _classDocRef.lookupImplementationsFor(argClassInfo.getFullName());
                subclassTitel = "Alle bekannten implementierenden Klassen:";
            } else {
                subclassList = _classDocRef.lookupExtensionsFor(argClassInfo.getFullName());
                subclassTitel = "Alle bekannten direkten Ableitungen:";
            }
            if (subclassList.size() > 0) {
                out.println("<DL>");
                out.print("<DT><B>" + subclassTitel + "</B> <DD>");
                for (int i = 0; i < subclassList.size(); i++) {
                    if (i > 0) out.print(", ");
                    supportCi = (SclClassInformation) subclassList.get(i);
                    out.print("<A HREF=\"" + supportCi.getFileRef(pInfo.getDepth(), "html") + "\">" + supportCi.getBaseName() + "</A>");
                }
                out.println("</DD></DL>");
            }
            out.println("<HR>");
            out.println(argClassInfo.getClassDeclaration(true));
        } else {
            out.println("SCL-Programm " + name + "</H2>");
            constructorTitle = "Initialisierung";
            methodTitle = "Sprungmarken";
            out.println("<HR>");
        }
        out.println("<P>");
        out.println(argClassInfo.getClassComment().getFormattedText(_classDocRef, argClassInfo, pInfo.getDepth()));
        out.println("<P>");
        out.println("<HR>");
        AttributeInformation[] allAttr = argClassInfo.getSortedAttributes(_classDocRef.getShowPrivate());
        if (allAttr.length > 0) {
            out.println("<A NAME=\"field_summary\"></A>");
            out.println("<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">");
            out.println("<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">");
            out.println("<TD COLSPAN=2><FONT SIZE=\"+2\">");
            out.println("<B>Klassen-Attribute</B></FONT></TD>");
            out.println("</TR>");
            for (int i = 0; i < allAttr.length; i++) {
                String attrName = allAttr[i].getDeclaredName();
                String decl = allAttr[i].getScope().toString() + "&nbsp;" + _classDocRef.getTypeLink(allAttr[i].getType(), pInfo.getDepth());
                String attrRef = thisFileRef + "#" + attrName;
                out.println("<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">");
                out.println("<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">");
                out.println("<CODE>" + decl + "</CODE></FONT></TD>");
                out.println("<TD><CODE><B><A HREF=\"" + attrRef + "\">" + attrName + "</A></B></CODE>");
                out.println("<BR>");
                out.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + allAttr[i].getComment().getFirstSentence());
                out.println("</TD></TR>");
            }
            out.println("</TABLE>");
            out.println("&nbsp;");
        }
        if (argClassInfo.isOOType() && inhList.size() > 0) {
            String clsRef;
            int inhStart = inhList.size() - 1;
            for (int i = inhStart; i >= 1; i--) {
                if (inhList.get(i) instanceof SclClassInformation) {
                    inhCi = (SclClassInformation) inhList.get(i);
                    clsRef = inhCi.getFileRef(pInfo.getDepth(), "html");
                    allAttr = inhCi.getSortedAttributes(_classDocRef.getShowPrivate());
                    if (allAttr.length > 0) {
                        out.println("&nbsp;<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">");
                        out.println("<TR BGCOLOR=\"#EEEEFF\" CLASS=\"TableSubHeadingColor\">");
                        out.println("<TD><B>Vererbte Attribute von <A HREF=\"" + clsRef + "\">" + inhCi.getFullName() + "</A></B></TD>");
                        out.println("</TR>");
                        out.println("<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">");
                        out.print("<TD><CODE>");
                        for (int m = 0; m < allAttr.length; m++) {
                            String attrName = allAttr[m].getDeclaredName();
                            String attrRef = clsRef + "#" + attrName;
                            if (m > 0) out.print(", ");
                            out.print("<A HREF=\"" + attrRef + "\">" + attrName + "</A>");
                        }
                        out.println("</CODE></TD></TR>");
                        out.println("</TABLE>");
                        out.println("&nbsp;");
                    }
                }
            }
        }
        MethodInformation[] allMeth = argClassInfo.getSortedConstructors(_classDocRef.getShowPrivate());
        if (allMeth.length > 0) {
            out.println("<A NAME=\"constructor_summary\"></A>");
            out.println("<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">");
            out.println("<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">");
            out.println("<TD COLSPAN=2><FONT SIZE=\"+2\">");
            out.println("<B>" + constructorTitle + "</B></FONT></TD>");
            out.println("</TR>");
            for (int i = 0; i < allMeth.length; i++) {
                String methName = allMeth[i].getSignature();
                String methRef = thisFileRef + "#" + methName;
                out.println("<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">");
                out.println("<TD><CODE><B><A HREF=\"" + methRef + "\">" + methName + "</A></B></CODE>");
                out.println("<BR>");
                out.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + allMeth[i].getComment().getFirstSentence());
                out.println("</TD></TR>");
            }
            out.println("</TABLE>");
            out.println("&nbsp;");
        }
        allMeth = argClassInfo.getSortedMethods(_classDocRef.getShowPrivate());
        if (allMeth.length > 0) {
            out.println("<A NAME=\"method_summary\"></A>");
            out.println("<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">");
            out.println("<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">");
            out.println("<TD COLSPAN=2><FONT SIZE=\"+2\">");
            out.println("<B>" + methodTitle + "</B></FONT></TD>");
            out.println("</TR>");
            for (int i = 0; i < allMeth.length; i++) {
                String methName = allMeth[i].getSignature();
                String methDecl = allMeth[i].getScope().toString() + "&nbsp;" + _classDocRef.getTypeLink(allMeth[i].getReturnType(), pInfo.getDepth());
                String methRef = thisFileRef + "#" + methName;
                out.println("<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">");
                out.println("<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">");
                out.println("<CODE>" + methDecl + "</CODE></FONT></TD>");
                out.println("<TD><CODE><B><A HREF=\"" + methRef + "\">" + methName + "</A></B></CODE>");
                out.println("<BR>");
                out.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + allMeth[i].getComment().getFirstSentence());
                out.println("</TD></TR>");
            }
            out.println("</TABLE>");
            out.println("&nbsp;");
        }
        if (argClassInfo.isOOType() && inhList.size() > 0) {
            String clsRef;
            int inhStart = inhList.size() - 1;
            for (int i = inhStart; i >= 1; i--) {
                if (inhList.get(i) instanceof SclClassInformation) {
                    inhCi = (SclClassInformation) inhList.get(i);
                    clsRef = inhCi.getFileRef(pInfo.getDepth(), "html");
                    allMeth = inhCi.getSortedMethods(_classDocRef.getShowPrivate());
                    if (allMeth.length > 0) {
                        out.println("&nbsp;<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">");
                        out.println("<TR BGCOLOR=\"#EEEEFF\" CLASS=\"TableSubHeadingColor\">");
                        out.println("<TD><B>Vererbte Methoden von <A HREF=\"" + clsRef + "\">" + inhCi.getFullName() + "</A></B></TD>");
                        out.println("</TR>");
                        out.println("<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">");
                        out.print("<TD><CODE>");
                        for (int m = 0; m < allMeth.length; m++) {
                            String methName = allMeth[m].getSignature();
                            String methRef = clsRef + "#" + methName;
                            if (m > 0) out.print(", ");
                            out.print("<A HREF=\"" + methRef + "\">" + methName + "</A>");
                        }
                        out.println("</CODE></TD></TR>");
                        out.println("</TABLE>");
                        out.println("&nbsp;");
                    }
                }
            }
        }
        allAttr = argClassInfo.getSortedAttributes(_classDocRef.getShowPrivate());
        if (allAttr.length > 0) {
            out.println("<A NAME=\"field_detail\"><!-- --></A>");
            out.println("<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">");
            out.println("<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">");
            out.println("<TD COLSPAN=1><FONT SIZE=\"+2\">");
            out.println("<B>Attribut-Details</B></FONT></TD>");
            out.println("</TR></TABLE>");
            for (int i = 0; i < allAttr.length; i++) {
                String attrName = allAttr[i].getDeclaredName();
                String decl = allAttr[i].getScope().toString() + "&nbsp;" + _classDocRef.getTypeLink(allAttr[i].getType(), pInfo.getDepth());
                String attrRef = thisFileRef + "#" + attrName;
                out.println("<A NAME=\"" + attrName + "\"><!-- --></A>");
                out.println("<H3>" + attrName + "</H3>");
                out.println("<PRE>");
                out.println(decl + " <B>" + attrName + "</B></PRE>");
                out.println("<DL>");
                out.println("<DD>" + allAttr[i].getComment().getFormattedText(_classDocRef, argClassInfo, pInfo.getDepth()));
                out.println("</DL>");
                out.println("<HR>");
            }
        }
        _writeMethodDetails(out, "Konstruktor-Details", argClassInfo, argClassInfo.getSortedConstructors(_classDocRef.getShowPrivate()));
        _writeMethodDetails(out, "Methoden-Details", argClassInfo, argClassInfo.getSortedMethods(_classDocRef.getShowPrivate()));
        out.println("</BODY>");
        _putFooter(out);
        out.close();
    }

    /**
	 * Erzeugen aller Standart-Resourcen.
	 */
    public void generateResources() throws IOException {
        _copyResources("resources/stylesheet.css", "stylesheet.css");
        _copyResources("resources/class.gif", "images/class.gif");
        _copyResources("resources/interface.gif", "images/interface.gif");
        _copyResources("resources/sclprog.gif", "images/sclprog.gif");
        _copyResources("resources/sasprog.gif", "images/sasprog.gif");
        _copyResources("resources/abstract_co.gif", "images/abstract_co.gif");
        _copyResources("resources/empty_co.gif", "images/empty_co.gif");
        _copyResources("resources/inherit.gif", "images/inherit.gif");
    }
}
