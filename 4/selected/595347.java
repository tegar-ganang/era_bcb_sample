package telkku;

import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.ApplicationContext;
import syndication.rss.RssFeedHandlerObserver;
import syndication.SyndicationErrorObserver;
import syndication.rss.Rss;
import syndication.rss.RssFeedLoader;
import org.xml.sax.SAXParseException;
import syndication.MalformedFeedElementException;
import telkku.channellist.ChannelList;
import telkku.channellist.Channel;
import java.util.Vector;
import java.net.MalformedURLException;
import java.io.IOException;
import org.xml.sax.SAXException;

/**
 * The application's main frame.
 */
public class TelkkuView extends FrameView {

    public TelkkuView(SingleFrameApplication app) {
        super(app);
        initComponents();
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
        busyIconIndex = 0;
        busyIconTimer.start();
        statusMessageLabel.setText("Initial data load...");
        TelkkuTableModel telkkuTableModel = (TelkkuTableModel) showTimeTable.getModel();
        Thread t = new Thread(new TelkkuDataModelUpdater(telkkuTableModel, true));
        t.start();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = TelkkuApp.getApplication().getMainFrame();
            aboutBox = new TelkkuAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        TelkkuApp.getApplication().show(aboutBox);
    }

    @Action
    public void showSettingsDialog() {
        if (settingsDialog == null) {
            JFrame mainFrame = TelkkuApp.getApplication().getMainFrame();
            settingsDialog = new TelkkuSettingDialog(mainFrame);
            settingsDialog.setLocationRelativeTo(mainFrame);
        }
        TelkkuApp.getApplication().show(settingsDialog);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    @Action
    public void testDefaultSyndication() {
        busyIconIndex = 0;
        busyIconTimer.start();
        statusMessageLabel.setText("Testing channel list...");
        Thread t = new Thread(new ChannelListLoader());
        t.start();
    }

    @Action
    public void reloadBtnPressed() {
        busyIconIndex = 0;
        busyIconTimer.start();
        statusMessageLabel.setText("Reloading...");
        TelkkuTableModel telkkuTableModel = (TelkkuTableModel) showTimeTable.getModel();
        Thread t = new Thread(new TelkkuDataModelUpdater(telkkuTableModel, false));
        t.start();
    }

    private void initComponents() {
        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        showTimeTable = new javax.swing.JTable();
        reloadBtn = new javax.swing.JButton();
        testDefaultSyndication = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        settingsMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        mainPanel.setName("mainPanel");
        jScrollPane1.setName("jScrollPane1");
        showTimeTable.setModel(new TelkkuTableModel());
        showTimeTable.setName("showTimeTable");
        jScrollPane1.setViewportView(showTimeTable);
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(telkku.TelkkuApp.class).getContext().getActionMap(TelkkuView.class, this);
        reloadBtn.setAction(actionMap.get("reloadBtnPressed"));
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(telkku.TelkkuApp.class).getContext().getResourceMap(TelkkuView.class);
        reloadBtn.setText(resourceMap.getString("Reload.text"));
        reloadBtn.setActionCommand(resourceMap.getString("Reload.actionCommand"));
        reloadBtn.setName("Reload");
        testDefaultSyndication.setAction(actionMap.get("testDefaultSyndication"));
        testDefaultSyndication.setText(resourceMap.getString("testDefaultSyndication.text"));
        testDefaultSyndication.setActionCommand(resourceMap.getString("testDefaultSyndication.actionCommand"));
        testDefaultSyndication.setName("testDefaultSyndication");
        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(mainPanelLayout.createSequentialGroup().addContainerGap().add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 932, Short.MAX_VALUE).add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup().add(testDefaultSyndication).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(reloadBtn))).addContainerGap()));
        mainPanelLayout.setVerticalGroup(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(mainPanelLayout.createSequentialGroup().addContainerGap().add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(reloadBtn).add(testDefaultSyndication)).addContainerGap()));
        menuBar.setName("menuBar");
        fileMenu.setText(resourceMap.getString("fileMenu.text"));
        fileMenu.setName("fileMenu");
        settingsMenuItem.setAction(actionMap.get("showSettingsDialog"));
        settingsMenuItem.setText(resourceMap.getString("settingsMenuItem.text"));
        settingsMenuItem.setName("settingsMenuItem");
        fileMenu.add(settingsMenuItem);
        exitMenuItem.setAction(actionMap.get("quit"));
        exitMenuItem.setName("exitMenuItem");
        fileMenu.add(exitMenuItem);
        menuBar.add(fileMenu);
        helpMenu.setText(resourceMap.getString("helpMenu.text"));
        helpMenu.setName("helpMenu");
        aboutMenuItem.setAction(actionMap.get("showAboutBox"));
        aboutMenuItem.setName("aboutMenuItem");
        helpMenu.add(aboutMenuItem);
        menuBar.add(helpMenu);
        statusPanel.setName("statusPanel");
        statusPanelSeparator.setName("statusPanelSeparator");
        statusMessageLabel.setName("statusMessageLabel");
        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel");
        progressBar.setName("progressBar");
        org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 952, Short.MAX_VALUE).add(statusPanelLayout.createSequentialGroup().addContainerGap().add(statusMessageLabel).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 782, Short.MAX_VALUE).add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(statusAnimationLabel).addContainerGap()));
        statusPanelLayout.setVerticalGroup(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(statusPanelLayout.createSequentialGroup().add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(statusMessageLabel).add(statusAnimationLabel).add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(3, 3, 3)));
        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }

    private class TelkkuDataModelUpdater implements Runnable {

        private TelkkuTableModel model = null;

        private boolean isFirstTimeLoad = true;

        public TelkkuDataModelUpdater(TelkkuTableModel model, boolean isFirstTimeLoad) {
            this.model = model;
            this.isFirstTimeLoad = isFirstTimeLoad;
        }

        public void run() {
            RssFeedLoader loader = new RssFeedLoader();
            int index;
            int channelCount = SettingsData.getChannelCount();
            Rss[] feedsArray = new Rss[channelCount];
            final Vector<Rss> feeds = new Vector<Rss>();
            for (index = 1; index <= channelCount; index++) {
                String channelUrl = SettingsData.getChannelUrl(index);
                RssFeedHandlerObserver feedObserver = new RssFeedHandlerObserver() {

                    public void startDocument() {
                    }

                    public void endDocument(Rss rootElement) {
                        feeds.add(rootElement);
                    }

                    public void warning(SAXParseException exception) {
                    }

                    public void error(SAXParseException exception) {
                    }

                    public void error(MalformedFeedElementException exception) {
                    }

                    public void fatalError(SAXParseException exception) {
                    }
                };
                SyndicationErrorObserver errorObserver = new SyndicationErrorObserver() {

                    public void error(MalformedURLException exception) {
                    }

                    public void error(SAXException exception) {
                    }

                    public void error(IOException exception) {
                    }
                };
                loader.startLoadingSync(channelUrl, feedObserver, errorObserver);
            }
            feedsArray = feeds.toArray(feedsArray);
            ChannelList chanList = new ChannelList(feedsArray);
            if (model != null) {
                model.setChannelList(chanList, isFirstTimeLoad);
            }
            busyIconTimer.stop();
            statusAnimationLabel.setIcon(idleIcon);
            statusMessageLabel.setText("");
        }
    }

    private class ChannelListLoader implements Runnable {

        public void run() {
            ChannelList chanList = new ChannelList(null);
            int chanCount = chanList.getChannelCount();
            for (int i = 0; i < chanCount; i++) {
                Channel chan = chanList.getChannelAt(i);
                System.out.print("Channel #" + (i + 1) + " - ");
                System.out.println(chan.getChannelName());
            }
            busyIconTimer.stop();
            statusAnimationLabel.setIcon(idleIcon);
            statusMessageLabel.setText("");
        }
    }

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JPanel mainPanel;

    private javax.swing.JMenuBar menuBar;

    private javax.swing.JProgressBar progressBar;

    private javax.swing.JButton reloadBtn;

    private javax.swing.JMenuItem settingsMenuItem;

    private javax.swing.JTable showTimeTable;

    private javax.swing.JLabel statusAnimationLabel;

    private javax.swing.JLabel statusMessageLabel;

    private javax.swing.JPanel statusPanel;

    private javax.swing.JButton testDefaultSyndication;

    private final Timer messageTimer;

    private final Timer busyIconTimer;

    private final Icon idleIcon;

    private final Icon[] busyIcons = new Icon[15];

    private int busyIconIndex = 0;

    private JDialog aboutBox;

    private JDialog settingsDialog;
}
