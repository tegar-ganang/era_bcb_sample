package org.tolven.client;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.Expand;

public class JBossClient {

    public static final String MESSAGE_DIGEST_ALGORITHM = "md5";

    public static final String DELETE_DIR_FIRST = "DELETE_DIR_FIRST";

    public static final String COMMENT = "THIS FILE IS AUTOGENERATED TO CONTAIN THE TOLVEN_CLASSPATH WHENEVER run.sh IS EXECUTED";

    public JBossClient() {
    }

    public void execute() throws Exception {
        File binDir = new File(System.getProperty("user.dir"));
        File confFile = new File(binDir, "conf.properties");
        Properties props = loadProperties(confFile);
        String downloadURL = props.getProperty("downloadURL");
        if (downloadURL == null) {
            throw new RuntimeException("downloadURL property not found in " + confFile.getPath());
        }
        File checksumsFile = new File(binDir, "checksum.properties");
        Properties localChecksums = null;
        if (checksumsFile.exists()) {
            localChecksums = loadProperties(checksumsFile);
        } else {
            localChecksums = new Properties();
        }
        String localClientDirname = props.getProperty("localClientDir");
        if (localClientDirname == null) {
            throw new RuntimeException("localClientDir property not found in " + confFile.getPath());
        }
        Properties remoteChecksums = new Properties();
        for (String[] fileData : getFileData("file.", props, localClientDirname)) {
            String urlString = downloadURL + "/" + fileData[0] + ".md5";
            String md5sum = getRemoteChecksum(urlString);
            remoteChecksums.put(urlString, md5sum);
        }
        for (String[] fileData : getFileData("zipToExpand.", props, localClientDirname)) {
            String urlString = downloadURL + "/" + fileData[0] + ".md5";
            String md5sum = getRemoteChecksum(urlString);
            remoteChecksums.put(urlString, md5sum);
        }
        boolean downloadFiles = !remoteChecksums.isEmpty() && checksumMismatch(localChecksums, remoteChecksums);
        if (downloadFiles) {
            File localClientDir = new File(localClientDirname);
            if (!localClientDir.getPath().equals(localClientDir.getAbsolutePath())) {
                localClientDir = new File(binDir, localClientDirname);
            }
            List<File> deletedDirs = new ArrayList<File>();
            if (localClientDir.exists()) {
                FileUtils.deleteDirectory(localClientDir);
                deletedDirs.add(localClientDir);
            }
            if (localClientDir.exists()) {
                throw new RuntimeException("Could not delete: " + localClientDir.getPath());
            }
            localClientDir.mkdirs();
            localChecksums = new Properties();
            for (String[] fileData : getFileData("file.", props, localClientDirname)) {
                URL url = new URL(downloadURL + "/" + fileData[0]);
                File downloadDir = getDownloadDir(fileData[1], binDir);
                if (!deletedDirs.contains(downloadDir) && fileData.length > 2 && DELETE_DIR_FIRST.equals(fileData[2])) {
                    FileUtils.deleteDirectory(downloadDir);
                    deletedDirs.add(downloadDir);
                }
                File destFile = new File(downloadDir, fileData[0]);
                downloadFile(url, destFile);
            }
            for (String[] fileData : getFileData("zipToExpand.", props, localClientDirname)) {
                URL url = new URL(downloadURL + "/" + fileData[0]);
                File downloadDir = getDownloadDir(fileData[1], binDir);
                if (!deletedDirs.contains(downloadDir) && fileData.length > 2 && DELETE_DIR_FIRST.equals(fileData[2])) {
                    FileUtils.deleteDirectory(downloadDir);
                    deletedDirs.add(downloadDir);
                }
                downLoadZippedFile(url, downloadDir);
            }
            File classPathShFile = new File(binDir, "tolven-classpath.sh");
            List<File> sourceJars = new ArrayList<File>();
            sourceJars.addAll(FileUtils.listFiles(localClientDir, new SuffixFileFilter(".jar"), null));
            FileUtils.writeStringToFile(classPathShFile, getTolvenClassPath("TOLVEN_CLASSPATH=", localClientDir.getName(), sourceJars, ":", "/", "# " + COMMENT + "\n"));
            File classPathBatFile = new File(binDir, "tolven-classpath.bat");
            FileUtils.writeStringToFile(classPathBatFile, getTolvenClassPath("set TOLVEN_CLASSPATH=", localClientDir.getName(), sourceJars, ";", "\\", "REM " + COMMENT + "\n\n"));
            storeProperties(remoteChecksums, checksumsFile);
        }
    }

    private List<String[]> getFileData(String prefix, Properties props, String defaultDir) {
        List<String[]> filenames = new ArrayList<String[]>();
        for (String key : props.stringPropertyNames()) {
            if (key.startsWith(prefix)) {
                String[] arr = new String[3];
                String[] value = props.getProperty(key).split(",");
                if (value.length == 0) {
                    throw new RuntimeException("Key: " + key + " in the conf properties file, has no value");
                }
                arr[0] = value[0];
                if (value.length > 1) {
                    arr[1] = value[1];
                } else {
                    arr[1] = defaultDir;
                }
                if (value.length > 2 && DELETE_DIR_FIRST.equalsIgnoreCase(value[2])) {
                    arr[2] = value[2];
                } else {
                    arr[2] = "";
                }
                filenames.add(arr);
            }
        }
        return filenames;
    }

    private File getDownloadDir(String dirname, File binDir) {
        File dir = new File(dirname);
        if (!dir.getPath().equals(dir.getAbsolutePath())) {
            dir = new File(binDir, dirname);
        }
        if (!dir.exists()) {
            dir.mkdirs();
        }
        return dir;
    }

    private Properties loadProperties(File file) {
        FileInputStream in = null;
        try {
            in = new FileInputStream(file);
            Properties properties = new Properties();
            properties.load(in);
            return properties;
        } catch (IOException ex) {
            throw new RuntimeException("Could not load properties file: " + file.getPath(), ex);
        }
    }

    private Properties storeProperties(Properties properties, File file) {
        try {
            FileOutputStream out = null;
            try {
                out = new FileOutputStream(file);
                properties.store(out, null);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
            return properties;
        } catch (Exception ex) {
            throw new RuntimeException("Could not write properties to " + file.getPath(), ex);
        }
    }

    private String getRemoteChecksum(String urlString) {
        try {
            String md5sum = null;
            File tmpFile = null;
            try {
                tmpFile = File.createTempFile("remoteMD5_", null);
                URL url = new URL(urlString);
                downloadFile(url, tmpFile);
                md5sum = FileUtils.readFileToString(tmpFile);
            } finally {
                if (tmpFile != null) {
                    tmpFile.delete();
                }
            }
            return md5sum;
        } catch (Exception ex) {
            throw new RuntimeException("Could not download remote MD5 URL: " + urlString, ex);
        }
    }

    private boolean checksumMismatch(Properties localChecksums, Properties remoteChecksums) {
        if (localChecksums.stringPropertyNames().size() != remoteChecksums.stringPropertyNames().size()) {
            return true;
        }
        for (String url : remoteChecksums.stringPropertyNames()) {
            String localChecksum = localChecksums.getProperty(url);
            if (localChecksum == null || !localChecksum.equals(remoteChecksums.getProperty(url))) {
                return true;
            }
        }
        return false;
    }

    private static URL downloadFile(URL url, File destFile) throws Exception {
        try {
            URLConnection urlConnection = url.openConnection();
            File tmpFile = null;
            try {
                tmpFile = File.createTempFile("remoteLib_", null);
                InputStream in = null;
                FileOutputStream out = null;
                try {
                    in = urlConnection.getInputStream();
                    out = new FileOutputStream(tmpFile);
                    IOUtils.copy(in, out);
                } finally {
                    if (out != null) {
                        out.close();
                    }
                    if (in != null) {
                        in.close();
                    }
                }
                FileUtils.copyFile(tmpFile, destFile);
            } finally {
                if (tmpFile != null) {
                    tmpFile.delete();
                }
            }
            URL localURL = destFile.toURI().toURL();
            return localURL;
        } catch (Exception ex) {
            throw new RuntimeException("Could not download URL: " + url, ex);
        }
    }

    private static URL downLoadZippedFile(URL url, File destDir) throws Exception {
        URLConnection urlConnection = url.openConnection();
        File tmpFile = null;
        try {
            tmpFile = File.createTempFile("remoteLib_", null);
            InputStream in = null;
            FileOutputStream out = null;
            try {
                in = urlConnection.getInputStream();
                out = new FileOutputStream(tmpFile);
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            }
            unzip(tmpFile, destDir);
        } finally {
            if (tmpFile != null) {
                tmpFile.delete();
            }
        }
        URL localURL = destDir.toURI().toURL();
        return localURL;
    }

    public static void unzip(File file, File dest) {
        Project project = new Project();
        project.init();
        Expand expand = new Expand();
        expand.setProject(project);
        expand.init();
        expand.setSrc(file);
        expand.setDest(dest);
        expand.execute();
    }

    private String getTolvenClassPath(String var, String dirname, List<File> files, String pathSeparator, String fileSeparator, String comment) {
        StringBuffer buff = new StringBuffer();
        buff.append(comment);
        buff.append("\n");
        buff.append(var);
        Iterator<File> it = files.iterator();
        while (it.hasNext()) {
            buff.append("..");
            buff.append(fileSeparator);
            buff.append(dirname);
            buff.append(fileSeparator);
            buff.append(it.next().getName());
            if (it.hasNext()) {
                buff.append(pathSeparator);
            }
        }
        return buff.toString();
    }

    public static void main(String[] args) throws Exception {
        new JBossClient().execute();
    }
}
