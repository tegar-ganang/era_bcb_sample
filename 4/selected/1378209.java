package org.vexi.build.jencode;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
import org.ibex.util.Encode;

public class JavaSourceEncode {

    public static final int LINE_LENGTH = 80 / 4;

    public static void main(String[] s) throws Exception {
        StringBuilder sw = new StringBuilder();
        encode(s[0], s[1], System.in, sw);
        System.out.println(sw.toString());
    }

    public static InputStream decode(String s) throws IOException {
        return new GZIPInputStream(new StringInputStream(s));
    }

    private static class StringInputStream extends InputStream {

        private final String s;

        private final int length;

        private int pos = 0;

        public StringInputStream(String s) {
            this.s = s;
            this.length = s.length();
        }

        public int read() {
            byte[] b = new byte[1];
            int numread = read(b, 0, 1);
            if (numread == -1) return -1;
            if (numread == 0) throw new Error();
            return b[0] & 0xff;
        }

        public int read(byte[] b, int off, int len) {
            for (int i = off; i < off + len; i++) {
                if (pos >= length) return i - off;
                b[i] = (byte) s.charAt(pos++);
            }
            return len;
        }
    }

    public static void encode(String packageName, String className, InputStream in, Appendable out) throws IOException {
        ByteArrayOutputStream baos;
        OutputStream os = new GZIPOutputStream(baos = new ByteArrayOutputStream());
        byte[] buf = new byte[1024];
        while (true) {
            int numread = in.read(buf, 0, buf.length);
            if (numread == -1) break;
            os.write(buf, 0, numread);
        }
        os.close();
        buf = baos.toByteArray();
        out.append("// generated by " + Encode.class.getName() + "\n\n");
        out.append("package " + packageName + ";\n\n");
        out.append("public class " + className + " {\n");
        out.append("    public static final String data = \n");
        for (int pos = 0; pos < buf.length; ) {
            out.append("        \"");
            for (int i = 0; i < LINE_LENGTH && pos < buf.length; i++) {
                String cs = Integer.toOctalString(buf[pos++] & 0xff);
                while (cs.length() < 3) cs = "0" + cs;
                out.append("\\" + cs);
            }
            out.append("\" +\n");
        }
        out.append("    \"\";\n");
        out.append("}\n");
    }
}
