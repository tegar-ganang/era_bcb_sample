package model.storage;

import model.storage.*;
import static org.junit.Assert.*;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.io.*;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import model.storage.Artifact;
import model.storage.Group;
import model.storage.GroupNotFoundException;
import model.storage.WorkingFile;
import model.storage.Artifact.artifactType;

public class StorageHandlerTest2 {

    StorageHandler storageHandler;

    String fileValid01XRM = "./src/model/storage/testinput/test2.xrm";

    String outputTemp = "./src/model/storage/testinput/temp.xrm";

    String fileXSD = "rmt.xsd";

    HashMap<Integer, Artifact> validArtifacts;

    HashMap<String, Artifact[]> validgroupedArtifacts;

    HashMap<String, Integer> groupList;

    WorkingFile wf;

    Artifact a1 = new Artifact();

    Artifact a2 = new Artifact();

    Artifact a3 = new Artifact();

    Artifact a4 = new Artifact();

    Artifact a5 = new Artifact();

    Artifact a6 = new Artifact();

    Artifact a7 = new Artifact();

    Artifact a8 = new Artifact();

    Artifact a9 = new Artifact();

    Artifact a10 = new Artifact();

    Artifact a11 = new Artifact();

    Artifact a12 = new Artifact();

    Artifact a13 = new Artifact();

    Artifact a14 = new Artifact();

    Artifact a15 = new Artifact();

    Artifact a16 = new Artifact();

    Artifact a17 = new Artifact();

    Artifact a18 = new Artifact();

    Artifact a19 = new Artifact();

    Artifact a20 = new Artifact();

    Artifact a21 = new Artifact();

    Artifact a22 = new Artifact();

    Artifact a23 = new Artifact();

    Artifact a24 = new Artifact();

    Artifact a25 = new Artifact();

    Artifact a26 = new Artifact();

    Artifact a27 = new Artifact();

    Artifact a28 = new Artifact();

    Artifact a29 = new Artifact();

    Artifact a30 = new Artifact();

    Artifact a31 = new Artifact();

    Artifact a32 = new Artifact();

    Artifact a33 = new Artifact();

    Artifact a34 = new Artifact();

    Artifact a35 = new Artifact();

    Artifact a36 = new Artifact();

    Artifact a37 = new Artifact();

    Artifact a38 = new Artifact();

    Artifact a39 = new Artifact();

    Artifact a40 = new Artifact();

    Artifact a41 = new Artifact();

    Artifact a42 = new Artifact();

    Artifact a43 = new Artifact();

    Artifact a44 = new Artifact();

    Artifact a45 = new Artifact();

    Artifact a46 = new Artifact();

    Artifact a47 = new Artifact();

    Artifact a48 = new Artifact();

    Artifact a49 = new Artifact();

    Artifact a50 = new Artifact();

    @Before
    public void setUp() {
        try {
            storageHandler = new StorageHandler();
            storageHandler.setXSDFile(fileXSD);
            wf = new WorkingFile();
            wf.setPdfDir(new String("C:\\Gavan\\Pdf"));
            wf.setPsDir(new String("C:\\Gavan\\Ps"));
            a1.setTitle("UML Sequence");
            a1.setType(Artifact.artifactType.article);
            a1.setAbstract("A beginner's guide to UML");
            a1.setYearAsString("2000");
            a1.setAuthorsAsString("John Smith; David Jones");
            a1.setEditorsAsString("Tom Jones; Barry White");
            a1.setJournal("This is journal field");
            a1.setVolumeAsString("1");
            ArrayList<Integer> p1 = new ArrayList<Integer>();
            p1.add(50);
            p1.add(100);
            a1.setPages(p1);
            a2.setTitle("Software Engineering");
            a2.setType(Artifact.artifactType.incollection);
            a2.setKeywordsAsString("software; engineering");
            a2.setAuthorsAsString("Jim Carey");
            a2.setYearAsString("2008");
            a2.setPublisher("Kerri-Anne");
            a2.setBookTitle("Team Management");
            a3.setTitle("Article 3");
            a3.setType(Artifact.artifactType.article);
            a3.setAbstract("An artifact that is type article.");
            a3.setYearAsString("2010");
            a3.setAuthorsAsString("Tracy Xu; Kylie Diep");
            a3.setJournal("This is journal field for article 3");
            a3.setVolumeAsString("3");
            ArrayList<Integer> p3 = new ArrayList<Integer>();
            p3.add(30);
            p3.add(100);
            a3.setPages(p3);
            a4.setTitle("Artifact 4");
            a4.setType(Artifact.artifactType.book);
            a4.setPublisher("Publisher 4");
            a4.setYear(2004);
            a4.setEditorsAsString("Bob Carr; Carlos Oliver");
            a4.setAuthorsAsString("John Kerr; Jeffery Rush");
            a5.setTitle("Artifact 5");
            a5.setType(Artifact.artifactType.booklet);
            a5.setAuthorsAsString("Ned Kelly");
            a5.setYear(1988);
            a6.setTitle("Artfact 6");
            a6.setType(Artifact.artifactType.conference);
            a6.setAuthorsAsString("James Oliver");
            a6.setBookTitle("Awesome Book");
            a6.setYear(1975);
            a6.setNote("ksdjf;lkajsdfklajsdl;fkjas;lkdfjaskldfjkslsdkfjals;djfkl;sajdflkasjfaskldjflkasjfl;djskdjf;lakjsdflkjasf");
            a7.setTitle("Artifact 7");
            a7.setType(Artifact.artifactType.inbook);
            a7.setChapter("chapter 5");
            a7.setPublisher("Publisher 7");
            a7.setYear(2014);
            a7.setEditorsAsString("Janet Jackson; James Vanderbeek");
            a7.setAuthorsAsString("Jane Austin");
            ArrayList<Integer> p7 = new ArrayList<Integer>();
            p7.add(45);
            p7.add(91);
            p7.add(70);
            p7.add(111);
            a7.setPages(p7);
            a8.setTitle("Artifact 8");
            a8.setType(Artifact.artifactType.inproceedings);
            a8.setBookTitle("Booktitle 8");
            a8.setYear(1908);
            a8.setAuthorsAsString("Darren Summers; Bridget Jones");
            a8.setMonth(9);
            a8.setAddress("29 Murphy st Richmond 3121");
            a9.setTitle("Artifact 9");
            a9.setType(Artifact.artifactType.manual);
            a9.setAuthorsAsString("James Brown");
            a9.setYear(1905);
            a10.setTitle("Artifact 10");
            a10.setType(Artifact.artifactType.mastersthesis);
            a10.setAuthorsAsString("Jack Johnson");
            a10.setSchool("Melbourne Uni");
            a10.setYear(1908);
            a11.setTitle("Artifact 11");
            a11.setType(Artifact.artifactType.misc);
            a11.setMonth(11);
            a11.setYear(1956);
            a11.setAuthorsAsString("Lois Lane");
            a12.setTitle("Artifact 12");
            a12.setType(Artifact.artifactType.phdthesis);
            a12.setAuthorsAsString("Wayne Guo");
            a12.setSchool("MLC");
            a12.setYear(1910);
            a13.setTitle("Artifact 13");
            a13.setType(Artifact.artifactType.proceedings);
            a13.setYear(1911);
            a13.setAuthorsAsString("Elizabeth Jane; Tim Hawkins");
            a14.setTitle("Artifact 14");
            a14.setType(Artifact.artifactType.techreport);
            a14.setAuthorsAsString("Jack Black; Tom Jones; Mary Jane; John Doe");
            a14.setInstitution("NMIT");
            a14.setYear(1909);
            a15.setTitle("Artifact 15");
            a15.setType(Artifact.artifactType.unpublished);
            a15.setAuthorsAsString("Eddie McGuire; Lizzy McGuire");
            a15.setNote("LALALALAALALALALALALALALALALLALALALALALALA");
            a16.setTitle("Artifact 16");
            a16.setType(Artifact.artifactType.article);
            a16.setNumber(16);
            a16.setEid("WHATISEID");
            a16.setNote("ksdf;alsdfj;klasjfkslajf;laksjfkajsfkljasdfkljasldfkjsakldfjaskl;dfjaklsdjflaksdjfl;kasjdflkasjdgkdfnmvbzmvbjhsdfgjhasgdfhjkasfgkhjsfgjkahsbhjsbvjhghjgflauryeuiwryywerufhsdjfhaljksfhljksahfkljashfjksdhfjksdncjkdbvbjlbhlsdjfhjksdfhksajhfljkshfljkhflkjashfljkshfjhsdlfkjhasldjfhlkjsdhflkjsdhfljsdhfljkhsldfjhlsdjfhlkjsdhcljksbv");
            a16.setAuthorsAsString("Amelie Murphy");
            a16.setJournal("Journal 16");
            a16.setYear(1916);
            a16.setVolume(16);
            ArrayList<Integer> p16 = new ArrayList<Integer>();
            p16.add(15);
            p16.add(60);
            p16.add(65);
            p16.add(100000);
            a16.setPages(p16);
            a17.setTitle("Artifact 17");
            a17.setType(Artifact.artifactType.booklet);
            a17.setAuthorsAsString("Nicole Kidman; James Hird");
            a17.setHowPublished("I don't know");
            a17.setLastchecked("18/8/08 4:19:23");
            a17.setAddress("296 Bridge rd Richmond");
            a17.setMonth(1);
            a17.setYear(1912);
            a17.setNote("Jane blah\n New line");
            a18.setTitle("Artifact 18");
            a18.setType(Artifact.artifactType.inbook);
            a18.setVolume(3);
            a18.setNumber(18);
            a18.setSeries("Series 18");
            a18.setAddress("2/91 William st Melbourne");
            a18.setEdition("5th edition");
            a18.setMonth(5);
            a18.setNote("Notes 18");
            a18.setChapter("18");
            a18.setPublisher("Publisher 18");
            a18.setYear(1918);
            a18.setEditorsAsString("Editor 1; Editor 2");
            a18.setAuthorsAsString("Kelly West; Bridget Jones");
            ArrayList<Integer> p18 = new ArrayList<Integer>();
            p18.add(6);
            p18.add(20);
            p18.add(60);
            a18.setPages(p18);
            a19.setTitle("Artifact 19");
            a19.setType(Artifact.artifactType.book);
            a19.setVolume(19);
            a19.setNumber(19);
            a19.setSeries("19th series");
            a19.setAddress("19 hall st Boxhill");
            a19.setEdition("3rd edition");
            a19.setMonth(11);
            a19.setNote("19th note");
            a19.setPublisher("Publisher 19");
            a19.setYear(1919);
            a19.setEditorsAsString("Clarke Kent; Jane Austin");
            a19.setAuthorsAsString("James Marsden; John West");
            a20.setTitle("Artifact 20");
            a20.setType(Artifact.artifactType.incollection);
            a20.setEditorsAsString("Tom Greenaway; Chris Bride");
            a20.setVolume(20);
            a20.setNumber(20);
            a20.setSeries("20th series");
            a20.setAddress("20 Jones st Mt Franklin");
            a20.setEdition("20th edition");
            a20.setMonth(4);
            a20.setNote("Note 20");
            a20.setChapter("20th Chapter");
            a20.setPublisher("Publisher 20");
            a20.setBookTitle("Booktitle 20");
            a20.setYear(1920);
            a20.setAuthorsAsString("Wilan Wong; Chris O");
            ArrayList<Integer> p20 = new ArrayList<Integer>();
            p20.add(1);
            p20.add(15);
            p20.add(70);
            a20.setPages(p20);
            a21.setTitle("Article 21");
            a21.setType(Artifact.artifactType.conference);
            a21.setEditorsAsString("James Dean; Jack Johnson");
            a21.setVolume(21);
            a21.setNumber(21);
            a21.setSeries("21th series");
            a21.setAddress("15 Yarrabend Crt Abbotsford");
            a21.setOrganization("NATO");
            a21.setMonth(11);
            a21.setNote("Note 21");
            a21.setPublisher("Publisher 21");
            a21.setBookTitle("Book 21");
            a21.setYear(1921);
            a21.setAuthorsAsString("Chris Bride; James Dean");
            ArrayList<Integer> p21 = new ArrayList<Integer>();
            p21.add(699);
            p21.add(610);
            p21.add(615);
            a21.setPages(p21);
            a22.setTitle("Artifact 22");
            a22.setType(Artifact.artifactType.inproceedings);
            a22.setEditorsAsString("Jane Austin; Lily Black");
            a22.setVolume(3);
            a22.setNumber(5);
            a22.setSeries("22nd series");
            a22.setAddress("123 Address st Suburb");
            a22.setOrganization("NATO");
            a22.setMonth(12);
            a22.setNote("Note 12");
            a22.setPublisher("Publisher 11");
            a22.setBookTitle("Booktitle 22");
            a22.setYear(1922);
            a22.setAuthorsAsString("Jason Dunstall; Chris Martin");
            ArrayList<Integer> p22 = new ArrayList<Integer>();
            p22.add(15);
            a22.setPages(p22);
            a23.setTitle("Artifact 23");
            a23.setType(Artifact.artifactType.proceedings);
            a23.setEditorsAsString("John Doe; Micheal Buble");
            a23.setVolume(23);
            a23.setNumber(23);
            a23.setSeries("23th series");
            a23.setAddress("23 James st Dandenong");
            a23.setOrganization("University of Melbourne");
            a23.setMonth(23);
            a23.setNote("Notes 23");
            a23.setPublisher("Publisher 23");
            a23.setYear(1923);
            a24.setTitle("Artifact 24");
            a24.setType(Artifact.artifactType.manual);
            a24.setEdition("24th edition");
            a24.setAuthorsAsString("Chris Martin; James Dean");
            a24.setAddress("24 johnston st Brunswick");
            a24.setYear(1924);
            a24.setOrganization("NATO");
            a24.setMonth(4);
            a24.setNote("Note 24");
            a25.setTitle("Artifact 25");
            a25.setType(Artifact.artifactType.techreport);
            a25.setNumber(25);
            a25.setAddress("25 Christmas st, Northpole");
            a25.setMonth(3);
            a25.setNote("Note 25");
            a25.setAuthorsAsString("Nathan Buckley; Nancy Du");
            a25.setInstitution("Academy");
            a25.setYear(1925);
            a26.setTitle("Artifact 26");
            a26.setType(Artifact.artifactType.mastersthesis);
            a26.setAddress("26 Tony st Knox");
            a26.setMonth(26);
            a26.setNote("Note 26");
            a26.setAuthorsAsString("Tony Leung; Maggie Cheung");
            a26.setSchool("MGC");
            a26.setYear(1926);
            a27.setTitle("Artifact 27");
            a27.setType(Artifact.artifactType.phdthesis);
            a27.setAddress("27 Mick st Molloy");
            a27.setMonth(7);
            a27.setNote("Note 27");
            a27.setAuthorsAsString("Edison Chen; Jamie Oliver");
            a27.setSchool("Melbourne Uni");
            a27.setYear(1827);
            a28.setTitle("Artifact 28");
            a28.setType(Artifact.artifactType.unpublished);
            a28.setMonth(8);
            a28.setYear(1828);
            a28.setAuthorsAsString("Gallen Lo; Maggie Cheung");
            a28.setNote("Note 28");
            a29.setTitle("Artifact 29");
            a29.setType(Artifact.artifactType.misc);
            a29.setMonth(9);
            a29.setYear(1729);
            a29.setAuthorsAsString("James Dean; Aimee Anderson");
            a29.setNote("Note 29");
            a29.setHowPublished("Have no idea");
            a30.setTitle("Artifact 30");
            a30.setType(Artifact.artifactType.manual);
            a30.setAuthorsAsString("Aimee Anderson; Jamie Jones");
            a30.setYear(1930);
            a31.setTitle("Artifact 31");
            a31.setType(Artifact.artifactType.mastersthesis);
            a31.setAuthorsAsString("Luke Wilson; James Dean");
            a31.setSchool("Moomba");
            a31.setYear(1931);
            a32.setTitle("Artifact 32");
            a32.setType(Artifact.artifactType.misc);
            a32.setMonth(7);
            a32.setYear(1932);
            a32.setAuthorsAsString("June Bell; Martin Luther");
            a33.setTitle("Artifact 33");
            a33.setType(Artifact.artifactType.phdthesis);
            a33.setAuthorsAsString("Martin King; Bill Clinton");
            a33.setSchool("PLC");
            a33.setYear(1933);
            a34.setTitle("Artifact 34");
            a34.setType(Artifact.artifactType.proceedings);
            a34.setYear(1934);
            a34.setAuthorsAsString("Tim Hawkins; James Dean");
            a35.setTitle("Artifact 35");
            a35.setType(Artifact.artifactType.techreport);
            a35.setAuthorsAsString("John Doe; LL CoolJ");
            a35.setInstitution("James Anh College");
            a35.setYear(1735);
            a36.setTitle("Artifact 36");
            a36.setType(Artifact.artifactType.unpublished);
            a36.setAuthorsAsString("Apple Mac; Microsoft Windows");
            a36.setNote("BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO");
            a37.setTitle("Artifact 37");
            a37.setType(Artifact.artifactType.article);
            a37.setNumber(37);
            a37.setEid("EID000000123123");
            a37.setNote("Note 37");
            a37.setAuthorsAsString("Jenny Lin; Jane Austin");
            a37.setJournal("Journal text for artifact 37");
            a37.setYear(1637);
            a37.setVolume(37);
            ArrayList<Integer> p37 = new ArrayList<Integer>();
            p37.add(851);
            p37.add(231);
            p37.add(4324);
            p37.add(8423);
            a37.setPages(p37);
            a38.setTitle("Artifact 38");
            a38.setType(Artifact.artifactType.booklet);
            a38.setAuthorsAsString("James Hird; Nathan Buckley");
            a38.setHowPublished("published?");
            a38.setLastchecked("18/8/38 6:55:06");
            a38.setAddress("38 Darling st Harbour");
            a38.setMonth(4);
            a38.setYear(1538);
            a38.setNote("Notes 38");
            a39.setTitle("Artifact 39");
            a39.setType(Artifact.artifactType.inbook);
            a39.setVolume(50);
            a39.setNumber(27);
            a39.setSeries("Series 39");
            a39.setAddress("2/91 William st Melbourne");
            a39.setEdition("39th edition");
            a39.setMonth(5);
            a39.setNote("Notes 39");
            a39.setChapter("40");
            a39.setPublisher("Publisher 39");
            a39.setYear(1939);
            a39.setEditorsAsString("James Dean; Marilyn Manroe");
            a39.setAuthorsAsString("Danny Fisher; Kirk Cobain");
            ArrayList<Integer> p39 = new ArrayList<Integer>();
            p39.add(6);
            p39.add(20);
            p39.add(60);
            a39.setPages(p39);
            a40.setTitle("Artifact 40");
            a40.setType(Artifact.artifactType.book);
            a40.setVolume(10);
            a40.setNumber(40);
            a40.setSeries("40th series");
            a40.setAddress("40 hall st Boxhill");
            a40.setEdition("40th edition");
            a40.setMonth(10);
            a40.setNote("40th note");
            a40.setPublisher("Publisher 40");
            a40.setYear(1840);
            a40.setEditorsAsString("Mickey Mouse");
            a40.setAuthorsAsString("Kirk Cobain; Louis Jackson");
            a41.setTitle("Artifact 41");
            a41.setType(Artifact.artifactType.incollection);
            a41.setEditorsAsString("Jamie Dunn");
            a41.setVolume(41);
            a41.setNumber(41);
            a41.setSeries("41st series");
            a41.setAddress("41 Madison Ave Mexico");
            a41.setEdition("41st edition");
            a41.setMonth(8);
            a41.setNote("Note 41");
            a41.setChapter("41st Chapter");
            a41.setPublisher("Publisher 41");
            a41.setBookTitle("Booktitle 41");
            a41.setYear(1741);
            a41.setAuthorsAsString("Chris Ooi; Dean Perry");
            ArrayList<Integer> p41 = new ArrayList<Integer>();
            p41.add(345);
            p41.add(123);
            p41.add(789);
            a41.setPages(p41);
            a42.setTitle("Article 42");
            a42.setType(Artifact.artifactType.conference);
            a42.setEditorsAsString("Matt Goening");
            a42.setVolume(42);
            a42.setNumber(42);
            a42.setSeries("42nd series");
            a42.setAddress("55 Station st Burwood");
            a42.setOrganization("Keido Club");
            a42.setMonth(10);
            a42.setNote("Note 42");
            a42.setPublisher("Publisher 42");
            a42.setBookTitle("Book 42");
            a42.setYear(1642);
            a42.setAuthorsAsString("Lisa Simpson; Bart Simpson");
            ArrayList<Integer> p42 = new ArrayList<Integer>();
            p42.add(699);
            p42.add(610);
            p42.add(615);
            a42.setPages(p42);
            a43.setTitle("Artifact 43");
            a43.setType(Artifact.artifactType.inproceedings);
            a43.setEditorsAsString("Tom Jones; Natalie Imbruglia");
            a43.setVolume(43);
            a43.setNumber(8);
            a43.setSeries("43rd series");
            a43.setAddress("50 Burnley st Melbourne");
            a43.setOrganization("AIDS Charity");
            a43.setMonth(2);
            a43.setNote("Note 43");
            a43.setPublisher("Publisher 43");
            a43.setBookTitle("Booktitle 43");
            a43.setYear(1343);
            a43.setAuthorsAsString("Chris Martin");
            ArrayList<Integer> p43 = new ArrayList<Integer>();
            p43.add(43);
            a43.setPages(p43);
            a44.setTitle("Artifact 44");
            a44.setType(Artifact.artifactType.proceedings);
            a44.setEditorsAsString("Micheal Buble; Ricki Lake");
            a44.setVolume(44);
            a44.setNumber(44);
            a44.setSeries("1st series");
            a44.setAddress("123 Lonsdale st Melbourne");
            a44.setOrganization("Connexus");
            a44.setMonth(2);
            a44.setNote("Notes 44");
            a44.setPublisher("Publisher 44");
            a44.setYear(1744);
            a45.setTitle("Artifact 45");
            a45.setType(Artifact.artifactType.manual);
            a45.setEdition("2nd edition");
            a45.setAuthorsAsString("Ricki Lake; Oliver Jones");
            a45.setAddress(" 55 Collins st Melbourne");
            a45.setYear(1745);
            a45.setOrganization("Judo Club");
            a45.setMonth(5);
            a45.setNote("Note 45");
            a46.setTitle("Artifact 46");
            a46.setType(Artifact.artifactType.techreport);
            a46.setNumber(46);
            a46.setAddress("55 Grattan st Fitzroy");
            a46.setMonth(1);
            a46.setNote("Note 46");
            a46.setAuthorsAsString("Nancy Du; James Dean");
            a46.setInstitution("Kendo Club");
            a46.setYear(1746);
            a47.setTitle("Artifact 47");
            a47.setType(Artifact.artifactType.mastersthesis);
            a47.setAddress("47 Fortress st Forest Hill");
            a47.setMonth(3);
            a47.setNote("Note 47");
            a47.setAuthorsAsString("John McDonald");
            a47.setSchool("TVB");
            a47.setYear(1647);
            a48.setTitle("Artifact 48");
            a48.setType(Artifact.artifactType.phdthesis);
            a48.setAddress("458 Victoria st Fitzroy");
            a48.setMonth(4);
            a48.setNote("Note 48");
            a48.setAuthorsAsString("Allan Law");
            a48.setSchool("Melbourne High");
            a48.setYear(1848);
            a49.setTitle("Artifact 49");
            a49.setType(Artifact.artifactType.unpublished);
            a49.setMonth(3);
            a49.setYear(1849);
            a49.setAuthorsAsString("Gene McIntyre; Jone Lee");
            a49.setNote("Note 49");
            a50.setTitle("Artifact 50");
            a50.setType(Artifact.artifactType.misc);
            a50.setMonth(3);
            a50.setYear(1750);
            a50.setAuthorsAsString("Aimee Anderson; Kylie Diep");
            a50.setNote("Note 50");
            a50.setHowPublished("Have no idea");
            a1.addIncoming(a21);
            a1.addOutgoing(a3);
            a1.addOutgoing(a10);
            a1.addOutgoing(a14);
            a1.addOutgoing(a20);
            a1.addOutgoing(a30);
            a1.addOutgoing(a40);
            a1.addOutgoing(a50);
            a2.addOutgoing(a21);
            a3.addIncoming(a1);
            a3.addOutgoing(a14);
            a4.addIncoming(a17);
            a4.addIncoming(a18);
            a4.addIncoming(a19);
            a4.addIncoming(a30);
            a4.addIncoming(a40);
            a4.addOutgoing(a25);
            a5.addIncoming(a8);
            a5.addIncoming(a9);
            a5.addIncoming(a12);
            a5.addIncoming(a14);
            a5.addIncoming(a20);
            a5.addOutgoing(a13);
            a5.addOutgoing(a22);
            a6.addIncoming(a50);
            a7.addOutgoing(a21);
            a8.addOutgoing(a5);
            a8.addOutgoing(a13);
            a9.addOutgoing(a5);
            a10.addIncoming(a1);
            a10.addOutgoing(a14);
            a11.addOutgoing(a21);
            a12.addOutgoing(a5);
            a13.addIncoming(a5);
            a13.addIncoming(a8);
            a13.addIncoming(a15);
            a13.addIncoming(a16);
            a13.addIncoming(a17);
            a14.addIncoming(a1);
            a14.addIncoming(a3);
            a14.addIncoming(a10);
            a14.addOutgoing(a5);
            a15.addOutgoing(a13);
            a15.addOutgoing(a16);
            a16.addIncoming(a15);
            a16.addOutgoing(a13);
            a17.addIncoming(a23);
            a17.addIncoming(a24);
            a17.addOutgoing(a4);
            a17.addOutgoing(a13);
            a18.addIncoming(a22);
            a18.addOutgoing(a4);
            a19.addIncoming(a22);
            a19.addOutgoing(a4);
            a20.addIncoming(a1);
            a20.addOutgoing(a5);
            a21.addIncoming(a2);
            a21.addIncoming(a7);
            a21.addIncoming(a11);
            a21.addIncoming(a32);
            a21.addIncoming(a39);
            a21.addIncoming(a45);
            a21.addOutgoing(a1);
            a22.addIncoming(a5);
            a22.addOutgoing(a18);
            a22.addOutgoing(a19);
            a23.addOutgoing(a17);
            a24.addOutgoing(a17);
            a25.addIncoming(a4);
            a25.addOutgoing(a26);
            a26.addIncoming(a25);
            a26.addIncoming(a37);
            a26.addIncoming(a47);
            a26.addIncoming(a48);
            a27.addOutgoing(a33);
            a30.addIncoming(a1);
            a30.addOutgoing(a4);
            a30.addOutgoing(a40);
            a32.addOutgoing(a21);
            a33.addIncoming(a27);
            a33.addIncoming(a44);
            a33.addOutgoing(a46);
            a37.addOutgoing(a26);
            a39.addOutgoing(a21);
            a40.addIncoming(a1);
            a40.addIncoming(a30);
            a40.addOutgoing(a4);
            a40.addOutgoing(a50);
            a44.addOutgoing(a33);
            a45.addOutgoing(a21);
            a46.addIncoming(a33);
            a47.addOutgoing(a26);
            a48.addOutgoing(a26);
            a50.addIncoming(a1);
            a50.addIncoming(a40);
            a50.addOutgoing(a6);
            validArtifacts = new HashMap<Integer, Artifact>();
            validArtifacts.put(1, a1);
            validArtifacts.put(2, a2);
            validArtifacts.put(3, a3);
            validArtifacts.put(4, a4);
            validArtifacts.put(5, a5);
            validArtifacts.put(6, a6);
            validArtifacts.put(7, a7);
            validArtifacts.put(8, a8);
            validArtifacts.put(9, a9);
            validArtifacts.put(10, a10);
            validArtifacts.put(11, a11);
            validArtifacts.put(12, a12);
            validArtifacts.put(13, a13);
            validArtifacts.put(14, a14);
            validArtifacts.put(15, a15);
            validArtifacts.put(16, a16);
            validArtifacts.put(17, a17);
            validArtifacts.put(18, a18);
            validArtifacts.put(19, a19);
            validArtifacts.put(20, a20);
            validArtifacts.put(21, a21);
            validArtifacts.put(22, a22);
            validArtifacts.put(23, a23);
            validArtifacts.put(24, a24);
            validArtifacts.put(25, a25);
            validArtifacts.put(26, a26);
            validArtifacts.put(27, a27);
            validArtifacts.put(28, a28);
            validArtifacts.put(29, a29);
            validArtifacts.put(30, a30);
            validArtifacts.put(31, a31);
            validArtifacts.put(32, a32);
            validArtifacts.put(33, a33);
            validArtifacts.put(34, a34);
            validArtifacts.put(35, a35);
            validArtifacts.put(36, a36);
            validArtifacts.put(37, a37);
            validArtifacts.put(38, a38);
            validArtifacts.put(39, a39);
            validArtifacts.put(40, a40);
            validArtifacts.put(41, a41);
            validArtifacts.put(42, a42);
            validArtifacts.put(43, a43);
            validArtifacts.put(44, a44);
            validArtifacts.put(45, a45);
            validArtifacts.put(46, a46);
            validArtifacts.put(47, a47);
            validArtifacts.put(48, a48);
            validArtifacts.put(49, a49);
            validArtifacts.put(50, a50);
            wf.addArtifact(a1);
            wf.addArtifact(a2);
            wf.addArtifact(a3);
            wf.addArtifact(a4);
            wf.addArtifact(a5);
            wf.addArtifact(a6);
            wf.addArtifact(a7);
            wf.addArtifact(a8);
            wf.addArtifact(a9);
            wf.addArtifact(a10);
            wf.addArtifact(a11);
            wf.addArtifact(a12);
            wf.addArtifact(a13);
            wf.addArtifact(a14);
            wf.addArtifact(a15);
            wf.addArtifact(a16);
            wf.addArtifact(a17);
            wf.addArtifact(a18);
            wf.addArtifact(a19);
            wf.addArtifact(a20);
            wf.addArtifact(a21);
            wf.addArtifact(a22);
            wf.addArtifact(a23);
            wf.addArtifact(a24);
            wf.addArtifact(a25);
            wf.addArtifact(a26);
            wf.addArtifact(a27);
            wf.addArtifact(a28);
            wf.addArtifact(a29);
            wf.addArtifact(a30);
            wf.addArtifact(a31);
            wf.addArtifact(a32);
            wf.addArtifact(a33);
            wf.addArtifact(a34);
            wf.addArtifact(a35);
            wf.addArtifact(a36);
            wf.addArtifact(a37);
            wf.addArtifact(a38);
            wf.addArtifact(a39);
            wf.addArtifact(a40);
            wf.addArtifact(a41);
            wf.addArtifact(a42);
            wf.addArtifact(a43);
            wf.addArtifact(a44);
            wf.addArtifact(a45);
            wf.addArtifact(a46);
            wf.addArtifact(a47);
            wf.addArtifact(a48);
            wf.addArtifact(a49);
            wf.addArtifact(a50);
            groupList = new HashMap<String, Integer>();
            groupList.put("group1", 7);
            groupList.put("group1.1", 0);
            groupList.put("group1.2", 0);
            groupList.put("group1.3", 0);
            groupList.put("group1.4", 0);
            groupList.put("group1.5", 0);
            groupList.put("group1.6", 0);
            groupList.put("group1.7", 0);
            groupList.put("group2", 3);
            groupList.put("group2.1", 3);
            groupList.put("group2.1.1", 0);
            groupList.put("group2.1.2", 0);
            groupList.put("group2.1.3", 0);
            groupList.put("group2.2", 2);
            groupList.put("group2.2.1", 0);
            groupList.put("group2.2.2", 0);
            groupList.put("group2.3", 1);
            groupList.put("group2.3.1", 0);
            groupList.put("group3", 4);
            groupList.put("group3.1", 2);
            groupList.put("group3.1.1", 5);
            groupList.put("group3.1.1.1", 3);
            groupList.put("group3.1.1.1.1", 0);
            groupList.put("group3.1.1.1.2", 0);
            groupList.put("group3.1.1.1.3", 0);
            groupList.put("group3.1.1.2", 3);
            groupList.put("group3.1.1.2.1", 0);
            groupList.put("group3.1.1.2.2", 0);
            groupList.put("group3.1.1.2.3", 0);
            groupList.put("group3.1.1.3", 0);
            groupList.put("group3.1.1.4", 0);
            groupList.put("group3.1.1.5", 1);
            groupList.put("group3.1.1.5.1", 3);
            groupList.put("group3.1.1.5.1.1", 0);
            groupList.put("group3.1.1.5.1.2", 0);
            groupList.put("group3.1.1.5.1.3", 0);
            groupList.put("group3.1.2", 2);
            groupList.put("group3.1.2.1", 1);
            groupList.put("group3.1.2.1.1", 0);
            groupList.put("group3.1.2.2", 0);
            groupList.put("group3.2", 0);
            groupList.put("group3.3", 0);
            groupList.put("group3.4", 0);
            groupList.put("group4", 1);
            groupList.put("group4.1", 1);
            groupList.put("group4.1.1", 1);
            groupList.put("group4.1.1.1", 1);
            groupList.put("group4.1.1.1.1", 1);
            groupList.put("group4.1.1.1.1.1", 0);
            validgroupedArtifacts = new HashMap<String, Artifact[]>();
            Artifact[] group1 = { a1, a41 };
            validgroupedArtifacts.put("group1", group1);
            Artifact[] group11 = { a5, a21, a22, a23, a24, a25 };
            validgroupedArtifacts.put("group1.1", group11);
            Artifact[] group12 = { a6, a7 };
            validgroupedArtifacts.put("group1.2", group12);
            Artifact[] group13 = { a6, a7 };
            validgroupedArtifacts.put("group1.3", group13);
            Artifact[] group14 = { a9, a10, a11, a12, a13, a14 };
            validgroupedArtifacts.put("group1.4", group14);
            Artifact[] group15 = { a2, a38, a39, a40 };
            validgroupedArtifacts.put("group1.5", group15);
            Artifact[] group16 = { a5 };
            validgroupedArtifacts.put("group1.6", group16);
            Artifact[] group17 = { a9, a10, a11, a12, a13, a14 };
            validgroupedArtifacts.put("group1.7", group17);
            Artifact[] group2 = { a4, a38, a39, a40, a41 };
            validgroupedArtifacts.put("group2", group2);
            Artifact[] group21 = { a3, a21, a22, a23, a24, a25 };
            validgroupedArtifacts.put("group2.1", group21);
            Artifact[] group211 = { a5 };
            validgroupedArtifacts.put("group2.1.1", group211);
            Artifact[] group212 = { a6, a7 };
            validgroupedArtifacts.put("group2.1.2", group212);
            Artifact[] group213 = { a1, a4 };
            validgroupedArtifacts.put("group2.1.3", group213);
            Artifact[] group22 = { a5, a38, a39, a40 };
            validgroupedArtifacts.put("group2.2", group22);
            Artifact[] group221 = { a6, a7, a9, a10, a11, a12, a13, a14 };
            validgroupedArtifacts.put("group2.2.1", group221);
            Artifact[] group222 = { a9, a10, a11, a12, a13, a14 };
            validgroupedArtifacts.put("group2.2.2", group222);
            Artifact[] group23 = { a9, a10, a11, a12, a13, a14 };
            validgroupedArtifacts.put("group2.3", group23);
            Artifact[] group231 = { a9, a10, a11, a12, a13, a14 };
            validgroupedArtifacts.put("group2.3.1", group231);
            Artifact[] group3 = { a1, a4, a41 };
            validgroupedArtifacts.put("group3", group3);
            Artifact[] group31 = { a4, a5 };
            validgroupedArtifacts.put("group3.1", group31);
            Artifact[] group311 = { a4 };
            validgroupedArtifacts.put("group3.1.1", group311);
            Artifact[] group3111 = { a3 };
            validgroupedArtifacts.put("group3.1.1.1", group3111);
            Artifact[] group31111 = { a5 };
            validgroupedArtifacts.put("group3.1.1.1.1", group31111);
            Artifact[] group31112 = { a6, a7 };
            validgroupedArtifacts.put("group3.1.1.1.2", group31112);
            Artifact[] group31113 = { a6, a7 };
            validgroupedArtifacts.put("group1", group31113);
            Artifact[] group3112 = { a9, a10, a11, a12, a13, a14 };
            validgroupedArtifacts.put("group3.1.1.2", group3112);
            Artifact[] group31121 = { a9, a10, a11, a12, a13, a14 };
            validgroupedArtifacts.put("group3.1.1.2.1", group31121);
            Artifact[] group31122 = { a15, a16, a17, a18, a19, a20 };
            validgroupedArtifacts.put("group3.1.1.2.2", group31122);
            Artifact[] group31123 = { a2 };
            validgroupedArtifacts.put("group3.1.1.2.3", group31123);
            Artifact[] group3113 = { a15, a16, a17, a18, a19, a20 };
            validgroupedArtifacts.put("group3.1.1.3", group3113);
            Artifact[] group3114 = { a15, a16, a17, a18, a19, a20 };
            validgroupedArtifacts.put("group3.1.1.4", group3114);
            Artifact[] group3115 = { a15, a16, a17, a18, a19, a20 };
            validgroupedArtifacts.put("group3.1.1.5", group3115);
            Artifact[] group31151 = { a15, a16, a17, a18, a19, a20 };
            validgroupedArtifacts.put("group3.1.1.5.1", group31151);
            Artifact[] group311511 = { a15, a16, a17, a18, a19, a20 };
            validgroupedArtifacts.put("group3.1.1.5.1.1", group311511);
            Artifact[] group311512 = { a15, a16, a17, a18, a19, a20 };
            validgroupedArtifacts.put("group3.1.1.5.1.2", group311512);
            Artifact[] group311513 = { a15, a16, a17, a18, a19, a20 };
            validgroupedArtifacts.put("group3.1.1.5.1.3", group311513);
            Artifact[] group312 = { a21, a22, a23, a24, a25 };
            validgroupedArtifacts.put("group3.1.2", group312);
            Artifact[] group3121 = {};
            validgroupedArtifacts.put("group3.1.2.1", group3121);
            Artifact[] group31211 = {};
            validgroupedArtifacts.put("group3.1.2.1.1", group31211);
            Artifact[] group3122 = { a3 };
            validgroupedArtifacts.put("group3.1.2.2", group3122);
            Artifact[] group32 = {};
            validgroupedArtifacts.put("group3.2", group32);
            Artifact[] group33 = {};
            validgroupedArtifacts.put("group3.3", group33);
            Artifact[] group34 = {};
            validgroupedArtifacts.put("group3.4", group34);
            Artifact[] group4 = { a1, a4, a21, a22, a23, a24, a25, a38, a39, a40, a41 };
            validgroupedArtifacts.put("group4", group4);
            Artifact[] group41 = { a1, a5, a6, a7 };
            validgroupedArtifacts.put("group4.1", group41);
            Artifact[] group411 = { a6, a7 };
            validgroupedArtifacts.put("group4.1.1", group411);
            Artifact[] group4111 = { a4 };
            validgroupedArtifacts.put("group4.1.1.1", group4111);
            Artifact[] group41111 = { a3, a4, a5 };
            validgroupedArtifacts.put("group4.1.1.1.1", group41111);
            Artifact[] group411111 = { a38, a39, a40 };
            validgroupedArtifacts.put("group4.1.1.1.1.1", group411111);
            Artifact[] ungroup = { a8, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a42, a43, a44, a45, a46, a47, a48, a49, a50 };
            validgroupedArtifacts.put("ungroup", ungroup);
            Set<String> groups = groupList.keySet();
            Iterator<String> iter = groups.iterator();
            while (iter.hasNext()) {
                wf.addNewGroup(iter.next());
            }
            iter = groups.iterator();
            while (iter.hasNext()) {
                String groupName = iter.next();
                int numChild = groupList.get(groupName);
                for (int i = 1; i <= numChild; i++) {
                    wf.moveGroup(groupName + "." + i, groupName);
                }
            }
        } catch (Exception e) {
            System.err.println("Error: could not setup test case due to the following");
            System.err.println(e.getMessage());
            fail();
        }
    }

    @After
    public void tearDown() throws Exception {
        storageHandler = null;
        wf = null;
        fileValid01XRM = null;
        outputTemp = null;
        fileXSD = null;
        validArtifacts = null;
        validgroupedArtifacts = null;
        groupList = null;
        a1 = null;
        a2 = null;
        a3 = null;
        a4 = null;
        a5 = null;
        a6 = null;
        a7 = null;
        a8 = null;
        a9 = null;
        a10 = null;
        a11 = null;
        a12 = null;
        a13 = null;
        a14 = null;
        a15 = null;
        a16 = null;
        a17 = null;
        a18 = null;
        a19 = null;
        a20 = null;
        a21 = null;
        a22 = null;
        a23 = null;
        a24 = null;
        a25 = null;
        a26 = null;
        a27 = null;
        a28 = null;
        a29 = null;
        a30 = null;
        a31 = null;
        a32 = null;
        a33 = null;
        a34 = null;
        a35 = null;
        a36 = null;
        a37 = null;
        a38 = null;
        a39 = null;
        a40 = null;
        a41 = null;
        a42 = null;
        a43 = null;
        a44 = null;
        a45 = null;
        a46 = null;
        a47 = null;
        a48 = null;
        a49 = null;
        a50 = null;
    }

    @Test
    public void testWriteValid1File() {
        String main_msg = "Testing read/write xrm.." + "\n\t" + "Error: ";
        String err_msg;
        storageHandler.setFile(wf);
        try {
            storageHandler.writeFileData(outputTemp, true);
            StorageHandler result = new StorageHandler();
            result.setXSDFile(fileXSD);
            result.setFile(new WorkingFile());
            result.readFileData(outputTemp);
            WorkingFile rwf = result.getFile();
            if (validArtifacts.size() != rwf.getAllArtifacts().size()) {
                err_msg = "The file does not have the correct number of artifacts." + "\n\tActual no of artifacts: " + rwf.getAllArtifactKeys() + "\n\tExpected no of artifacts: " + validArtifacts.size();
                assertTrue(main_msg + err_msg, false);
            }
            Iterator<Artifact> iter = validArtifacts.values().iterator();
            while (iter.hasNext()) {
                Artifact expArt = iter.next();
                Artifact resultArt = rwf.getArtifactByKey(expArt.getKey());
                if (resultArt == null) {
                    err_msg = "Could not find expected artifact named " + expArt.getTitle();
                    assertTrue(main_msg + err_msg, false);
                } else if (!resultArt.equals(expArt)) {
                    err_msg = "The expected artifact,(" + expArt.getTitle() + ") did not match resulted artifact (" + resultArt.getTitle() + ")";
                    assertTrue(main_msg + err_msg, false);
                }
            }
            Set<String> groups = groupList.keySet();
            Iterator<String> iter2 = groups.iterator();
            while (iter.hasNext()) {
                String groupName = iter2.next();
                Group g = rwf.getGroup(groupName);
                int numChild = groupList.get(groupName);
                for (int i = 1; i <= numChild; i++) {
                    String childName = groupName + "." + i;
                    if (!g.containsGroup(childName)) {
                        err_msg = groupName + "did not contain child group, " + childName;
                        assertTrue(main_msg + err_msg, false);
                    }
                    if (!rwf.getGroup(childName).getParent().getName().equals(groupName)) {
                        err_msg = "Checking that child group, " + childName + ", has the right parent group, " + groupName;
                        assertTrue(main_msg + err_msg, false);
                    }
                    Artifact[] groupArt = validgroupedArtifacts.get(groupName);
                    int expLength = groupArt.length;
                    int resultLength = g.getArtifacts().size();
                    if (expLength != resultLength) {
                        err_msg = g.getName() + " does not contain the expected number of artifacts (" + expLength + "). It contains " + resultLength + " artifacts.";
                        assertTrue(main_msg + err_msg, false);
                    }
                    for (int j = 0; j <= groupArt.length; j++) {
                        if (!g.containsArtifact(groupArt[j])) {
                            err_msg = g.getName() + " does not contain " + groupArt[j].getTitle();
                            assertTrue(main_msg + err_msg, false);
                        }
                    }
                }
            }
        } catch (Exception e) {
            assertTrue(main_msg + e.getMessage(), false);
        }
    }
}
