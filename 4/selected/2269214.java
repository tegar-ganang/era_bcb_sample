package com.ericdaugherty.mail.server.persistence.localDelivery;

import java.io.*;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.ericdaugherty.mail.server.configuration.ConfigurationManager;
import com.ericdaugherty.mail.server.info.EmailAddress;
import com.ericdaugherty.mail.server.info.User;
import com.ericdaugherty.mail.server.persistence.LocalDeliveryProcessor;
import com.ericdaugherty.mail.server.services.smtp.SMTPMessage;
import com.ericdaugherty.mail.server.utils.FileUtils;

/**
 * This class offers the means of persisting a message to a local user's
 * mailbox.
 *
 * @author Andreas Kyrmegalos
 */
public class SimpleFileIOProcessor implements LocalDeliveryProcessor {

    private static final String US_ASCII = "US-ASCII";

    private static final byte[] EOL;

    static {
        byte[] line_separator = null;
        try {
            line_separator = System.getProperty("line.separator").getBytes(US_ASCII);
        } catch (UnsupportedEncodingException ex) {
            line_separator = System.getProperty("line.separator").getBytes();
        } finally {
            EOL = line_separator;
        }
    }

    /** Logger */
    private Log log = LogFactory.getLog(SimpleFileIOProcessor.class);

    /** The ConfigurationManager */
    protected final ConfigurationManager configurationManager = ConfigurationManager.getInstance();

    public void createUserRepository(String userRepository) {
        File directory = new File(userRepository);
        if (!directory.exists()) {
            if (log.isInfoEnabled()) log.info("Directory " + userRepository + " does not exist, creating...");
            directory.mkdir();
        }
        if (!directory.isDirectory()) {
            log.error("User Directory: " + userRepository + " does not exist.");
            throw new RuntimeException("User's Directory path: " + userRepository + " is not a directory!");
        }
    }

    /**
     * Gets the user's directory as a String.  This method also verifies that the directory exists.
     *
     * @param user The user the message belongs to.
     * @return The full path denoting the user's directory.
     */
    public String getUserRepository(User user) {
        File directory = new File(configurationManager.getUsersDirectory(), user.getFullUsername());
        if (!directory.exists()) configurationManager.requestDirCreation(directory.getPath());
        return directory.getPath();
    }

    /**
     * Returns a message's size on disk
     *
     * @param user The user the message belongs to.
     * @param messageLocation The message filename (this is not a full path, since it is generated by a list() file method).
     * @return The message size on disk is returned.
     */
    public long getMessagePersistedSize(User user, String messageLocation) {
        return new File(getUserRepository(user), messageLocation).length();
    }

    /**
     * Saves a message to the user's directory and returns the full path/filename of the file where it was persisted.
     *
     * @param user The user the message is addrressed to.
     * @param message The message itself.
     * @param address The user's email address.
     * @return In the case of a file-system back-end the full path/filename is returned.
     * @throws java.io.IOException
     */
    public Object persistLocalMessage(User user, SMTPMessage message, EmailAddress address) throws IOException {
        File userDirectory = new File(getUserRepository(user));
        final File messageFile = new File(userDirectory, message.getSMTPUID() + ".tmp");
        BufferedOutputStream out = null;
        try {
            if (log.isDebugEnabled()) {
                log.debug("Delivering to: " + messageFile.getAbsolutePath());
            }
            out = new BufferedOutputStream(new FileOutputStream(messageFile), 4096);
            String outLine = "Return-Path: <" + message.getFromAddress().getAddress() + ">";
            out.write(outLine.getBytes(US_ASCII));
            out.write(EOL);
            out.flush();
            outLine = "Delivered-To: " + address.getAddress();
            out.write(outLine.getBytes(US_ASCII));
            out.write(EOL);
            out.flush();
            int count = 8;
            List<byte[]> dataLines = message.getSMTPPersistenceProccessor().loadIncrementally(count);
            while (dataLines.size() > 0) {
                for (byte[] singleLine : dataLines) {
                    if (singleLine.length > 0 && singleLine[0] == 0x2e) {
                        out.write(new byte[] { 0x02e });
                    }
                    out.write(singleLine);
                    out.write(EOL);
                    out.flush();
                }
                count += 250;
                dataLines.clear();
                dataLines = message.getSMTPPersistenceProccessor().loadIncrementally(count);
            }
            out.close();
            File messageLocation = new File(userDirectory, message.getSMTPUID() + ".loc");
            FileUtils.copyFile(messageFile, messageLocation);
            if (!messageFile.delete()) {
                throw new IOException("Failed to rename " + messageFile.getPath() + " to " + messageLocation.getPath());
            }
            return messageLocation.getPath();
        } catch (IOException ioe) {
            log.error("Error performing local delivery.", ioe);
            throw ioe;
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException ioe) {
                    log.error("Error closing output Stream.", ioe);
                }
            }
        }
    }
}
