package net.jetrix.filter;

import java.util.*;
import net.jetrix.*;
import net.jetrix.config.*;
import net.jetrix.messages.channel.*;

/**
 * Set the game field and settings when the game starts. A new puzzle is
 * displayed every time. The sequence of puzzles is generated by a
 * {@link PuzzleGenerator}, by default the {@link DownstackPuzzleGenerator}
 * is used. An alternative generator can be used by specifying the <tt>generator</tt>
 * parameter in the filter configuration. The filter configuration is passed
 * to the generator for its initialization.
 *
 * @since 0.3
 *
 * @author Emmanuel Bourg
 * @version $Revision: 798 $, $Date: 2009-02-18 10:24:28 -0500 (Wed, 18 Feb 2009) $
 */
public class PuzzleFilter extends GenericFilter {

    private static final String DEFAULT_GENERATOR = DownstackPuzzleGenerator.class.getName();

    private PuzzleGenerator generator;

    public void init() {
        try {
            generator = (PuzzleGenerator) Class.forName(getConfig().getString("generator", DEFAULT_GENERATOR)).newInstance();
        } catch (Exception e) {
            generator = new DownstackPuzzleGenerator();
        }
        generator.init(getConfig());
    }

    public void onMessage(NewGameMessage m, List<Message> out) {
        Puzzle puzzle = generator.getNextPuzzle();
        PlineMessage description = new PlineMessage();
        description.setKey("filter.puzzle.announce", puzzle.getKey(), puzzle.getName(), puzzle.getAuthor());
        out.add(description);
        if (puzzle.getSettings() != null) {
            m.setSettings(puzzle.getSettings());
            getChannel().getConfig().setSettings(puzzle.getSettings());
        }
        out.add(m);
        FieldMessage fieldMessage = new FieldMessage();
        fieldMessage.setSlot(1);
        fieldMessage.setField(puzzle.getField().getFieldString());
        out.add(fieldMessage);
    }

    public void onMessage(FieldMessage m, List<Message> out) {
        Field field = getChannel().getField(0);
        if (field.getHighest() <= 2) {
            getChannel().send(new EndGameMessage());
            PlineMessage grats = new PlineMessage();
            grats.setKey("filter.puzzle.cleared");
            getChannel().send(grats);
        }
        out.add(m);
    }
}
