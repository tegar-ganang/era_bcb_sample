package eu.isas.searchgui.gui;

import eu.isas.searchgui.SearchGUI;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;

/**
 * The waiting dialog used for displaying information about the search.
 *
 * @author Marc Vaudel
 * @author Harald Barsnes
 */
public class WaitingDialog extends javax.swing.JDialog {

    /**
     * Flags when the run is canceled
     */
    private boolean runCancelled = false;

    /**
     * Flags when the run is finished
     */
    private boolean runFinished = false;

    /**
     * The searchGUI instance
     */
    private SearchGUI searchGuiParent;

    /**
     * The current progress
     */
    private int progress = 0;

    /**
     * Convenience date format
     */
    private static final SimpleDateFormat sdf = new SimpleDateFormat("dd MMM yyyy, HH:mm");

    /**
     * Creates a new WaitingDialog
     *
     * @param parent    the SearchGUI instance
     * @param modal     if the dialog is to be modal or not
     */
    public WaitingDialog(SearchGUI parent, boolean modal) {
        super(parent.getMainFrame(), modal);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/searchgui.gif")));
        this.searchGuiParent = parent;
        initComponents();
        layeredPane.getComponent(0).setBounds(0, 0, layeredPane.getWidth(), layeredPane.getHeight());
        layeredPane.revalidate();
        layeredPane.repaint();
        reportArea.setText("\nSearchGUI Report:\n");
        progressBar.setIndeterminate(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        progressBar = new javax.swing.JProgressBar();
        closeButton = new javax.swing.JButton();
        indeterminateJProgressBar = new javax.swing.JProgressBar();
        peptideShakerPreLinkLabel = new javax.swing.JLabel();
        peptideShakerLinkLabel = new javax.swing.JLabel();
        layeredPane = new javax.swing.JLayeredPane();
        reportAreaScrollPane = new javax.swing.JScrollPane();
        reportArea = new javax.swing.JTextArea();
        saveReportLabel = new javax.swing.JLabel();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SearchGUI Processing Status");
        setResizable(false);
        progressBar.setString("SearchGUI Searching...");
        progressBar.setStringPainted(true);
        closeButton.setText("Cancel");
        closeButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        indeterminateJProgressBar.setIndeterminate(true);
        peptideShakerPreLinkLabel.setText("<html><i>To visualize and analyze your results we recommend</i></html>");
        peptideShakerLinkLabel.setText("<html><a href=\\\"dummy_link\"><i>PeptideShaker</i></a></html>");
        peptideShakerLinkLabel.setToolTipText("Open the PeptideShaker web page");
        peptideShakerLinkLabel.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                peptideShakerLinkLabelMouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                peptideShakerLinkLabelMouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                peptideShakerLinkLabelMouseExited(evt);
            }
        });
        reportArea.setBackground(new java.awt.Color(254, 254, 254));
        reportArea.setColumns(20);
        reportArea.setEditable(false);
        reportArea.setLineWrap(true);
        reportArea.setRows(5);
        reportAreaScrollPane.setViewportView(reportArea);
        reportAreaScrollPane.setBounds(0, 0, 680, 500);
        layeredPane.add(reportAreaScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        saveReportLabel.setText("<html><a href=\\\"dummy_link\"><i>Save Report</i></a></html>");
        saveReportLabel.setToolTipText("Save the report to a text file");
        saveReportLabel.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                saveReportLabelMouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                saveReportLabelMouseExited(evt);
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
                saveReportLabelMouseReleased(evt);
            }
        });
        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().addContainerGap().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layeredPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE).add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup().add(10, 10, 10).add(peptideShakerPreLinkLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(peptideShakerLinkLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 189, Short.MAX_VALUE).add(saveReportLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(18, 18, 18).add(closeButton)).add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup().add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(indeterminateJProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 173, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().addContainerGap().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(indeterminateJProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(layeredPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 508, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(closeButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).add(peptideShakerPreLinkLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(peptideShakerLinkLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(saveReportLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap()));
        layout.linkSize(new java.awt.Component[] { indeterminateJProgressBar, progressBar }, org.jdesktop.layout.GroupLayout.VERTICAL);
        pack();
    }

    /**
     * Cancels the search if not finished, or just closes the dialog.
     *
     * @param evt
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (runFinished || runCancelled) {
            this.setVisible(false);
            this.dispose();
        } else {
            runCancelled = true;
            closeButton.setText("Close");
            searchGuiParent.cancelPressed();
            progressBar.setString("Search Cancelled");
        }
    }

    /**
     * Changes the cursor into a hand cursor when hovering above the 
     * PeptideShaker link.
     *
     * @param evt
     */
    private void peptideShakerLinkLabelMouseEntered(java.awt.event.MouseEvent evt) {
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }

    /**
     * Changing the cursor back to the default cursor when leaving the 
     * PeptideShaker link.
     * 
     * @param evt 
     */
    private void peptideShakerLinkLabelMouseExited(java.awt.event.MouseEvent evt) {
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }

    /**
     * Opens the PeptideShaker Google Code page.
     * 
     * @param evt 
     */
    private void peptideShakerLinkLabelMouseClicked(java.awt.event.MouseEvent evt) {
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        BareBonesBrowserLaunch.openURL("http://peptide-shaker.googlecode.com");
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }

    /**
     * Saves the search report to file.
     *
     * @param evt
     */
    private void saveReportLabelMouseReleased(java.awt.event.MouseEvent evt) {
        File outputFile = null;
        JFileChooser fileChooser = new JFileChooser(new File(searchGuiParent.getLastSelectedFolder()));
        FileFilter filter = new FileFilter() {

            @Override
            public boolean accept(File myFile) {
                return myFile.getName().toLowerCase().endsWith("txt") || myFile.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Supported formats: Text (.txt)";
            }
        };
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            outputFile = fileChooser.getSelectedFile();
            searchGuiParent.setLastSelectedFolder(outputFile.getAbsolutePath());
            if (outputFile.exists()) {
                int choice = JOptionPane.showConfirmDialog(this, new String[] { "The file " + outputFile.getName() + " already exists!", "Overwrite?" }, "File Already Exists", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.NO_OPTION) {
                    return;
                }
            }
        }
        if (outputFile != null) {
            saveReport(outputFile);
        }
    }

    /**
     * Changes the cursor into a hand cursor when hovering above the 
     * Save Report link.
     *
     * @param evt
     */
    private void saveReportLabelMouseEntered(java.awt.event.MouseEvent evt) {
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }

    /**
     * Changing the cursor back to the default cursor.
     * 
     * @param evt 
     */
    private void saveReportLabelMouseExited(java.awt.event.MouseEvent evt) {
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }

    private javax.swing.JButton closeButton;

    private javax.swing.JProgressBar indeterminateJProgressBar;

    private javax.swing.JLayeredPane layeredPane;

    private javax.swing.JLabel peptideShakerLinkLabel;

    private javax.swing.JLabel peptideShakerPreLinkLabel;

    private javax.swing.JProgressBar progressBar;

    private javax.swing.JTextArea reportArea;

    private javax.swing.JScrollPane reportAreaScrollPane;

    private javax.swing.JLabel saveReportLabel;

    /**
     * Indicates if the run was canceled
     *
     * @return  a boolean indicating if the run was canceled
     */
    public boolean isRunCancelled() {
        return runCancelled;
    }

    /**
     * Appends a report to the report area
     *
     * @param report    the report to report in the report
     */
    public void appendReport(String report) {
        reportArea.append(report);
        reportArea.setCaretPosition(reportArea.getText().length());
    }

    /**
     * Sets the run finished
     */
    public void setRunFinished() {
        if (progressBar.isIndeterminate()) {
            progressBar.setIndeterminate(false);
        }
        progressBar.setValue(progressBar.getMaximum());
        progressBar.setString("");
        indeterminateJProgressBar.setIndeterminate(false);
        indeterminateJProgressBar.setValue(indeterminateJProgressBar.getMaximum());
        indeterminateJProgressBar.setStringPainted(true);
        indeterminateJProgressBar.setString("Search Completed");
        closeButton.setText("Close");
        runFinished = true;
    }

    /**
     * Sets the run canceled
     */
    public void setRunCanceled() {
        if (progressBar.isIndeterminate()) {
            progressBar.setIndeterminate(false);
        }
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                progressBar.setValue(0);
                progressBar.setString("");
                indeterminateJProgressBar.setIndeterminate(false);
                indeterminateJProgressBar.setValue(0);
                indeterminateJProgressBar.setStringPainted(true);
                indeterminateJProgressBar.setString("Search Cancelled!");
            }
        });
        closeButton.setText("Close");
        runCancelled = true;
    }

    /**
     * Sets the current progress on the progress bar
     * @param n the current progress status
     */
    public void setNProgress(int n) {
        if (!progressBar.isIndeterminate()) {
            progressBar.setMaximum(n);
        }
    }

    /**
     * Sets a text on the progress bar
     *
     * @param text  text to be written on the progress bar
     */
    public void setProgressbarText(String text) {
        progressBar.setStringPainted(true);
        progressBar.setString(text);
    }

    /**
     * Increments the progress of the progress bar
     */
    public void progress() {
        if (!progressBar.isIndeterminate()) {
            progressBar.setValue(++progress);
        }
    }

    /**
     * Saves the report in the given file
     *
     * @param aFile file to save the report in
     */
    private void saveReport(File aFile) {
        StringBuffer output = new StringBuffer();
        String host = " @ ";
        try {
            host += InetAddress.getLocalHost().getHostName();
        } catch (UnknownHostException uhe) {
        }
        output.append("# ------------------------------------------------------------------" + "\n# SearchGUI Report File" + "\n#" + "\n# Originally saved by: " + System.getProperty("user.name") + host + "\n#                  on: " + sdf.format(new Date()) + "\n#                  as: " + aFile.getName() + "\n# ------------------------------------------------------------------\n");
        output.append(reportArea.getText() + "\n");
        BufferedWriter bw = null;
        try {
            String filePath = aFile.getAbsolutePath();
            if (!filePath.endsWith(".txt")) {
                filePath += ".txt";
            }
            bw = new BufferedWriter(new FileWriter(filePath));
            bw.write(output.toString());
            bw.flush();
            JOptionPane.showMessageDialog(this, "Report written to file '" + filePath + "'.", "Report Saved", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ioe) {
            ioe.printStackTrace();
            JOptionPane.showMessageDialog(this, new String[] { "Error writing report to file:", ioe.getMessage() }, "Save Failed", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (bw != null) {
                try {
                    bw.close();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                    JOptionPane.showMessageDialog(this, new String[] { "Error writing report to file:", ioe.getMessage() }, "Save Failed", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
}
