package org.galab.frame;

import java.awt.*;
import java.io.*;
import java.lang.reflect.*;
import java.util.*;
import org.galab.saveableobject.*;
import org.galab.util.*;

public class Graph extends javax.swing.JFrame {

    public Graph(File newFilename, SaveableObject newObj, String newMeth) {
        this(newFilename, newObj, newMeth, null, null);
    }

    public Graph(File newFilename, SaveableObject newObj, String newMeth, Object[] newArgs, Class[] newArgTypes) {
        File[] transFilename = new File[1];
        transFilename[0] = newFilename;
        SaveableObject[] transObj = new SaveableObject[1];
        transObj[0] = newObj;
        String[] transMeth = new String[1];
        transMeth[0] = newMeth;
        Vector transArgs = new Vector();
        transArgs.add(newArgs);
        Vector transArgTypes = new Vector();
        transArgTypes.add(newArgTypes);
        construct(transFilename, transObj, transMeth, transArgs, transArgTypes);
    }

    public Graph(File[] newFilename, SaveableObject[] newObj, String[] newMeth) {
        Vector transArgs = new Vector();
        Vector transArgTypes = new Vector();
        for (int i = 0; i < newMeth.length; i++) {
            transArgs.add(new Object[0]);
            transArgTypes.add(new Class[0]);
        }
        construct(newFilename, newObj, newMeth, transArgs, transArgTypes);
    }

    public Graph(File[] newFilename, SaveableObject[] newObj, String[] newMeth, Vector newArgs, Vector newArgTypes) {
        construct(newFilename, newObj, newMeth, newArgs, newArgTypes);
    }

    private void construct(File[] newFilename, SaveableObject[] newObj, String[] newMeth, Vector newArgs, Vector newArgTypes) {
        initComponents();
        pack();
        filename = newFilename;
        obj = newObj;
        meth = new Method[filename.length];
        args = newArgs;
        boolean overwrite = getOverwrite();
        try {
            for (int i = 0; i < meth.length; i++) {
                Class[] cls = (Class[]) newArgTypes.get(i);
                meth[i] = obj[i].getClass().getMethod(newMeth[i], cls);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            dispose();
        } catch (SecurityException e) {
            e.printStackTrace();
            dispose();
        }
        String tmp = filename[0].getName();
        for (int i = 1; i < filename.length; i++) {
            tmp += ", " + filename[i].getName();
        }
        labFileName.setText(tmp);
        if (overwrite) {
            openFiles();
        }
        graphPanel.init(filename.length);
        show();
    }

    private boolean getOverwrite() {
        boolean exists = false;
        filenamesloop: for (int i = 0; i < filename.length; i++) {
            if (filename[i].exists()) {
                exists = true;
                break filenamesloop;
            }
        }
        if (exists) {
            return Util.yesNoMsg(this, "A file (" + filename[0].getName() + ") that this\ngraph writes to already exists:\ndo you want to overwrite it?\n(Answering \"no\" will continue with the new data\nat the end of the old file.");
        } else {
            return true;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {
        butPlot = new javax.swing.JButton();
        labFileName = new javax.swing.JLabel();
        graphPanel = new org.galab.frame.GraphPanel();
        getContentPane().setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        setTitle("GA - Graph");
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        butPlot.setPreferredSize(new java.awt.Dimension(100, 25));
        butPlot.setMaximumSize(new java.awt.Dimension(100, 25));
        butPlot.setFont(new java.awt.Font("Dialog", 0, 12));
        butPlot.setText("gnuplot");
        butPlot.setMinimumSize(new java.awt.Dimension(100, 25));
        butPlot.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPlotActionPerformed(evt);
            }
        });
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 1;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.insets = new java.awt.Insets(3, 0, 3, 3);
        getContentPane().add(butPlot, gridBagConstraints1);
        labFileName.setText("-filename-");
        labFileName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labFileName.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(3, 0, 3, 0);
        gridBagConstraints1.weightx = 0.9;
        getContentPane().add(labFileName, gridBagConstraints1);
        graphPanel.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.gridwidth = 2;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.weightx = 0.9;
        gridBagConstraints1.weighty = 0.9;
        getContentPane().add(graphPanel, gridBagConstraints1);
    }

    private void butPlotActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String pltname = Util.getCurrentDirectory() + "tmpga.plt";
            BufferedWriter buffy = new BufferedWriter(new FileWriter(pltname));
            buffy.write("plot '" + filename[0] + "' with lines");
            for (int i = 1; i < filename.length; i++) {
                buffy.write(", '" + filename[i] + "' with lines");
            }
            buffy.close();
            if (Util.getConfigEntry_boolean("win")) {
                Runtime.getRuntime().exec(Util.getConfigEntry_String("gnuplot") + " \"" + pltname + "\" -");
            } else {
                Runtime.getRuntime().exec(Util.getConfigEntry_String("gnuplot") + " " + pltname + " -");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {
        dispose();
    }

    public void step(boolean paint) {
        try {
            double[] val = new double[filename.length];
            for (int i = 0; i < filename.length; i++) {
                val[i] = ((Double) meth[i].invoke(obj[i], (Object[]) args.get(i))).doubleValue();
                BufferedWriter buffy = new BufferedWriter(new FileWriter(filename[i].toString(), true));
                buffy.write(String.valueOf(val[i]));
                buffy.newLine();
                buffy.close();
            }
            if (paint) {
                graphPanel.addVal(val);
            }
        } catch (IOException e) {
            e.printStackTrace();
            dispose();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
            dispose();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            dispose();
        }
    }

    private void openFiles() {
        try {
            for (int i = 0; i < filename.length; i++) {
                BufferedWriter buffy = new BufferedWriter(new FileWriter(filename[i]));
                buffy.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
            dispose();
        }
    }

    public void setObj(SaveableObject newObj) {
        for (int i = 0; i < obj.length; i++) {
            obj[i] = newObj;
        }
    }

    public void setArgs(Object[] newArgs) {
        args = new Vector();
        for (int i = 0; i < obj.length; i++) {
            args.add(newArgs);
        }
    }

    private javax.swing.JButton butPlot;

    private javax.swing.JLabel labFileName;

    private org.galab.frame.GraphPanel graphPanel;

    File[] filename;

    Method[] meth;

    SaveableObject[] obj;

    Vector args;
}
