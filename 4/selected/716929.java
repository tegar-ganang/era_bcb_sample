package org.ttalbott.mytelly;

import java.util.*;
import javax.swing.*;
import java.awt.*;
import javax.swing.JPanel;

/**
 *
 * @author  Tom Talbott
 */
public class ChannelSelectionDialog extends javax.swing.JDialog {

    org.ttalbott.mytelly.Config m_config;

    Programs m_programs;

    int m_mouseColIndex = -1;

    int m_mouseRowIndex = -1;

    /** Creates new form ChannelSelectionDialog */
    public ChannelSelectionDialog(java.awt.Frame parent, boolean modal, Config config, Programs programs) {
        super(parent, modal);
        m_config = config;
        m_programs = programs;
        initComponents();
        setLocationRelativeTo(parent);
        initDlg();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        this.setContentPane(getJPanel());
        pack();
    }

    private void jTableChannelsMouseReleased(java.awt.event.MouseEvent evt) {
        if (SwingUtilities.isLeftMouseButton(evt)) {
            Point click = evt.getPoint();
            int colIndex = jTableChannels.columnAtPoint(click);
            int rowIndex = jTableChannels.rowAtPoint(click);
            if (m_mouseColIndex == colIndex && m_mouseRowIndex == rowIndex) {
                Object obj = jTableChannels.getValueAt(rowIndex, colIndex);
                if (obj != null) {
                    String value = obj.toString();
                    m_config.markChannel(value, !m_config.isChannelMarked(value));
                    Rectangle cellRect = jTableChannels.getCellRect(rowIndex, colIndex, true);
                    jTableChannels.repaint(cellRect);
                }
            }
        }
        m_mouseColIndex = -1;
        m_mouseRowIndex = -1;
    }

    private void jTableChannelsMousePressed(java.awt.event.MouseEvent evt) {
        if (SwingUtilities.isLeftMouseButton(evt)) {
            Point click = evt.getPoint();
            m_mouseColIndex = jTableChannels.columnAtPoint(click);
            m_mouseRowIndex = jTableChannels.rowAtPoint(click);
        }
    }

    private void jButtonSelectNoneActionPerformed(java.awt.event.ActionEvent evt) {
        selectAll(false);
    }

    private void jButtonSelectAllActionPerformed(java.awt.event.ActionEvent evt) {
        selectAll(true);
    }

    private void selectAll(boolean select) {
        WaitCursor wait = new WaitCursor(this);
        int rows = jTableChannels.getRowCount();
        int cols = jTableChannels.getColumnCount();
        for (int col = 0; col < cols; col++) {
            for (int row = 0; row < rows; row++) {
                Object obj = jTableChannels.getValueAt(row, col);
                if (obj != null) {
                    String value = obj.toString();
                    m_config.markChannel(value, select);
                }
            }
        }
        jTableChannels.repaint();
        wait.done();
        wait = null;
    }

    private void jTableChannelsMouseClicked(java.awt.event.MouseEvent evt) {
    }

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {
        closeDialog(null);
    }

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {
        setVisible(false);
        dispose();
    }

    public void initDlg() {
        jTableChannels.setModel(new ChannelsTableModel(jTableChannels, m_programs, m_config));
        Enumeration e = jTableChannels.getColumnModel().getColumns();
        while (e.hasMoreElements()) {
            javax.swing.table.TableColumn t = (javax.swing.table.TableColumn) e.nextElement();
            t.setPreferredWidth(100);
        }
        pack();
    }

    public class ChannelsTableModel extends javax.swing.table.AbstractTableModel {

        org.ttalbott.mytelly.Config m_config;

        Programs m_programs;

        Vector m_channels;

        int m_rows = 0;

        int m_cols = 0;

        JTable m_parent;

        public ChannelsTableModel(JTable parent, Programs programs, Config config) {
            m_programs = programs;
            m_config = config;
            m_parent = parent;
            if (m_config != null) {
                setChannels(Programs.getChannels());
            }
        }

        public void setChannels(Channels channels) {
            m_channels = new Vector();
            channels.getSortedChannelDescriptions(m_channels);
            Container container = m_parent.getParent();
            if (container != null) {
                m_rows = container.getHeight() / m_parent.getRowHeight() - 1;
            } else {
                m_rows = 15;
            }
            m_cols = m_channels.size() / m_rows;
            if (m_rows * m_cols < m_channels.size()) m_cols++;
            Dimension size = m_parent.getPreferredScrollableViewportSize();
            size.height = m_rows * m_parent.getRowHeight();
            m_parent.setPreferredScrollableViewportSize(size);
        }

        public java.lang.Object getValueAt(int rowIndex, int columnIndex) {
            if (m_channels != null) {
                int index = columnIndex * m_rows + rowIndex;
                if (index < m_channels.size()) {
                    return m_channels.get(index);
                }
            }
            return null;
        }

        public int getRowCount() {
            return m_rows;
        }

        public int getColumnCount() {
            return m_cols;
        }

        public java.lang.Class getColumnClass(int param) {
            return String.class;
        }
    }

    public class ChannelsTableCellRenderer extends javax.swing.table.DefaultTableCellRenderer {

        JCheckBox m_checkbox = new JCheckBox();

        org.ttalbott.mytelly.Config m_config;

        public ChannelsTableCellRenderer(Config config) {
            m_config = config;
        }

        public java.awt.Component getTableCellRendererComponent(javax.swing.JTable jTable, java.lang.Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            java.awt.Component retValue;
            if (value == null) {
                retValue = null;
            } else {
                m_checkbox.setText(value.toString());
                m_checkbox.setBackground(jTable.getBackground());
                m_checkbox.setForeground(jTable.getForeground());
                m_checkbox.setBorderPaintedFlat(true);
                m_checkbox.setSelected(m_config.isChannelMarked(value.toString()));
                retValue = m_checkbox;
            }
            return retValue;
        }
    }

    private javax.swing.JLabel jLabel1;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JTable jTableChannels;

    private javax.swing.JButton jButtonClose;

    private javax.swing.JButton jButtonSelectAll;

    private javax.swing.JButton jButtonSelectNone;

    private JPanel jPanel = null;

    /**
	 * This method initializes jPanel	
	 * 	
	 * @return javax.swing.JPanel	
	 */
    private JPanel getJPanel() {
        if (jPanel == null) {
            jPanel = new JPanel();
            jPanel.setLayout(new java.awt.GridBagLayout());
            java.awt.GridBagConstraints gridBagConstraints1;
            gridBagConstraints1 = new java.awt.GridBagConstraints();
            gridBagConstraints1.gridx = 0;
            gridBagConstraints1.gridy = 0;
            gridBagConstraints1.gridwidth = 3;
            gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints1.ipadx = 140;
            gridBagConstraints1.insets = new java.awt.Insets(5, 5, 5, 5);
            jPanel.add(getJLabel1(), gridBagConstraints1);
            GridBagConstraints gridBagConstraints2 = new java.awt.GridBagConstraints();
            gridBagConstraints2.gridx = 0;
            gridBagConstraints2.gridy = 1;
            gridBagConstraints2.gridwidth = 3;
            gridBagConstraints2.gridheight = 2;
            gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints2.insets = new java.awt.Insets(5, 5, 5, 5);
            jPanel.add(getJScrollPane1(), gridBagConstraints2);
            GridBagConstraints gridBagConstraints3 = new java.awt.GridBagConstraints();
            gridBagConstraints3.gridx = 0;
            gridBagConstraints3.gridy = 3;
            gridBagConstraints3.gridwidth = java.awt.GridBagConstraints.REMAINDER;
            gridBagConstraints3.insets = new java.awt.Insets(10, 0, 10, 0);
            gridBagConstraints3.weightx = 1.0;
            jPanel.add(getJButtonClose(), gridBagConstraints3);
            GridBagConstraints gridBagConstraints4 = new java.awt.GridBagConstraints();
            gridBagConstraints4.gridx = 3;
            gridBagConstraints4.gridy = 1;
            gridBagConstraints4.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints4.insets = new java.awt.Insets(5, 0, 0, 5);
            gridBagConstraints4.anchor = java.awt.GridBagConstraints.WEST;
            jPanel.add(getJButtonSelectAll(), gridBagConstraints4);
            GridBagConstraints gridBagConstraints5 = new java.awt.GridBagConstraints();
            gridBagConstraints5.gridx = 3;
            gridBagConstraints5.gridy = 2;
            gridBagConstraints5.insets = new java.awt.Insets(5, 0, 0, 5);
            gridBagConstraints5.anchor = java.awt.GridBagConstraints.NORTHWEST;
            jPanel.add(getJButtonSelectNone(), gridBagConstraints5);
        }
        return jPanel;
    }

    /**
	 * 
	 */
    private JButton getJButtonSelectNone() {
        if (jButtonSelectNone == null) {
            jButtonSelectNone = new javax.swing.JButton();
            jButtonSelectNone.setText("Select None");
            jButtonSelectNone.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonSelectNoneActionPerformed(evt);
                }
            });
        }
        return jButtonSelectNone;
    }

    /**
	 * 
	 */
    private JButton getJButtonSelectAll() {
        if (jButtonSelectAll == null) {
            jButtonSelectAll = new javax.swing.JButton();
            jButtonSelectAll.setText("Select All");
            jButtonSelectAll.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonSelectAllActionPerformed(evt);
                }
            });
        }
        return jButtonSelectAll;
    }

    /**
	 * 
	 */
    private JButton getJButtonClose() {
        if (jButtonClose == null) {
            jButtonClose = new javax.swing.JButton();
            jButtonClose.setText("Close");
            jButtonClose.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonCloseActionPerformed(evt);
                }
            });
        }
        return jButtonClose;
    }

    /**
	 * 
	 */
    private JScrollPane getJScrollPane1() {
        if (jScrollPane1 == null) {
            jScrollPane1 = new javax.swing.JScrollPane();
            jScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
            jScrollPane1.setPreferredSize(new java.awt.Dimension(453, 303));
            jScrollPane1.setMinimumSize(new java.awt.Dimension(453, 303));
            jScrollPane1.setMaximumSize(new java.awt.Dimension(453, 303));
            jScrollPane1.setViewportView(getJTableChannels());
        }
        return jScrollPane1;
    }

    /**
	 * 
	 */
    private JTable getJTableChannels() {
        if (jTableChannels == null) {
            jTableChannels = new javax.swing.JTable();
            jTableChannels.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] {}));
            jTableChannels.setIntercellSpacing(new java.awt.Dimension(3, 1));
            jTableChannels.setTableHeader(null);
            jTableChannels.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            jTableChannels.setGridColor(java.awt.Color.white);
            jTableChannels.setRowSelectionAllowed(false);
            jTableChannels.setDefaultRenderer(String.class, new ChannelsTableCellRenderer(m_config));
            jTableChannels.addMouseListener(new java.awt.event.MouseAdapter() {

                public void mousePressed(java.awt.event.MouseEvent evt) {
                    jTableChannelsMousePressed(evt);
                }

                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    jTableChannelsMouseReleased(evt);
                }

                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jTableChannelsMouseClicked(evt);
                }
            });
        }
        return jTableChannels;
    }

    /**
	 *  
	 */
    private JLabel getJLabel1() {
        if (jLabel1 == null) {
            jLabel1 = new javax.swing.JLabel();
            jLabel1.setText("Select the channels you wish to get data for.");
        }
        return jLabel1;
    }
}
